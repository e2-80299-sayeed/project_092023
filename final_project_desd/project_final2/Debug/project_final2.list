
project_final2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004144  08004144  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800414c  0800414c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000224  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b8f7  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a98  00000000  00000000  0002b9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ca8  00000000  00000000  0002d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009e8  00000000  00000000  0002e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212ca  00000000  00000000  0002eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e6dd  00000000  00000000  0004fdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000caf1a  00000000  00000000  0005e49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003aa0  00000000  00000000  001293bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0012ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004098 	.word	0x08004098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004098 	.word	0x08004098

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <lcd16x2_i2c_sendCommand>:
/* Library variables */


/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	f023 030f 	bic.w	r3, r3, #15
 8000592:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000594:	7bbb      	ldrb	r3, [r7, #14]
 8000596:	f043 030c 	orr.w	r3, r3, #12
 800059a:	b2db      	uxtb	r3, r3
 800059c:	723b      	strb	r3, [r7, #8]
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	727b      	strb	r3, [r7, #9]
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	72bb      	strb	r3, [r7, #10]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	f043 0308 	orr.w	r3, r3, #8
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <lcd16x2_i2c_sendCommand+0x60>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <lcd16x2_i2c_sendCommand+0x64>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b299      	uxth	r1, r3
 80005c6:	f107 0208 	add.w	r2, r7, #8
 80005ca:	23c8      	movs	r3, #200	; 0xc8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	f001 f97e 	bl	80018d0 <HAL_I2C_Master_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	20000080 	.word	0x20000080

080005e4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	011b      	lsls	r3, r3, #4
 80005f2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f023 030f 	bic.w	r3, r3, #15
 80005fa:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	f043 030d 	orr.w	r3, r3, #13
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	f043 0309 	orr.w	r3, r3, #9
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <lcd16x2_i2c_sendData+0x60>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <lcd16x2_i2c_sendData+0x64>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b299      	uxth	r1, r3
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2304      	movs	r3, #4
 8000638:	f001 f94a 	bl	80018d0 <HAL_I2C_Master_Transmit>
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000007c 	.word	0x2000007c
 8000648:	20000080 	.word	0x20000080

0800064c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f000 fd1f 	bl	8001098 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <lcd16x2_i2c_init+0xd0>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000668:	2205      	movs	r2, #5
 800066a:	214e      	movs	r1, #78	; 0x4e
 800066c:	f001 fa2e 	bl	8001acc <HAL_I2C_IsDeviceReady>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d010      	beq.n	8000698 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <lcd16x2_i2c_init+0xd0>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800067e:	2205      	movs	r2, #5
 8000680:	217e      	movs	r1, #126	; 0x7e
 8000682:	f001 fa23 	bl	8001acc <HAL_I2C_IsDeviceReady>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <lcd16x2_i2c_init+0x44>
    {
      return false;
 800068c:	2300      	movs	r3, #0
 800068e:	e040      	b.n	8000712 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 8000692:	227e      	movs	r2, #126	; 0x7e
 8000694:	701a      	strb	r2, [r3, #0]
 8000696:	e002      	b.n	800069e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <lcd16x2_i2c_init+0xd4>)
 800069a:	224e      	movs	r2, #78	; 0x4e
 800069c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 800069e:	202d      	movs	r0, #45	; 0x2d
 80006a0:	f000 fcfa 	bl	8001098 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 80006a4:	2030      	movs	r0, #48	; 0x30
 80006a6:	f7ff ff69 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f000 fcf4 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006b0:	2030      	movs	r0, #48	; 0x30
 80006b2:	f7ff ff63 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fcee 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 80006bc:	2030      	movs	r0, #48	; 0x30
 80006be:	f7ff ff5d 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006c2:	2008      	movs	r0, #8
 80006c4:	f000 fce8 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 80006c8:	2020      	movs	r0, #32
 80006ca:	f7ff ff57 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 80006ce:	2008      	movs	r0, #8
 80006d0:	f000 fce2 	bl	8001098 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f7ff ff51 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fcdc 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff4b 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fcd6 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff45 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 fcd0 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 80006f8:	2006      	movs	r0, #6
 80006fa:	f7ff ff3f 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fcca 	bl	8001098 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000704:	200c      	movs	r0, #12
 8000706:	f7ff ff39 	bl	800057c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 fcc4 	bl	8001098 <HAL_Delay>

  return true;
 8000710:	2301      	movs	r3, #1
}
 8000712:	4618      	mov	r0, r3
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000007c 	.word	0x2000007c
 8000720:	20000080 	.word	0x20000080

08000724 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d108      	bne.n	8000754 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000748:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff15 	bl	800057c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000752:	e007      	b.n	8000764 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800075a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0c 	bl	800057c <lcd16x2_i2c_sendCommand>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 800076c:	b40f      	push	{r0, r1, r2, r3}
 800076e:	b590      	push	{r4, r7, lr}
 8000770:	b089      	sub	sp, #36	; 0x24
 8000772:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000774:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000778:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fffa 	bl	800377c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	77fb      	strb	r3, [r7, #31]
 800078c:	e00a      	b.n	80007a4 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 800078e:	7ffb      	ldrb	r3, [r7, #31]
 8000790:	3320      	adds	r3, #32
 8000792:	443b      	add	r3, r7
 8000794:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff23 	bl	80005e4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	3301      	adds	r3, #1
 80007a2:	77fb      	strb	r3, [r7, #31]
 80007a4:	7ffc      	ldrb	r4, [r7, #31]
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd10 	bl	80001d0 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	429c      	cmp	r4, r3
 80007b4:	d202      	bcs.n	80007bc <lcd16x2_i2c_printf+0x50>
 80007b6:	7ffb      	ldrb	r3, [r7, #31]
 80007b8:	2b0f      	cmp	r3, #15
 80007ba:	d9e8      	bls.n	800078e <lcd16x2_i2c_printf+0x22>
  }
}
 80007bc:	bf00      	nop
 80007be:	3724      	adds	r7, #36	; 0x24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007c6:	b004      	add	sp, #16
 80007c8:	4770      	bx	lr
	...

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fbf0 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f908 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 fa14 	bl	8000c04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007dc:	f000 f96e 	bl	8000abc <MX_I2C1_Init>
  MX_TIM2_Init();
 80007e0:	f000 f99a 	bl	8000b18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 80007e4:	486f      	ldr	r0, [pc, #444]	; (80009a4 <main+0x1d8>)
 80007e6:	f7ff ff31 	bl	800064c <lcd16x2_i2c_init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <main+0x30>
   {
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f6:	486c      	ldr	r0, [pc, #432]	; (80009a8 <main+0x1dc>)
 80007f8:	f000 ff0c 	bl	8001614 <HAL_GPIO_WritePin>
   }
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80007fc:	2104      	movs	r1, #4
 80007fe:	486b      	ldr	r0, [pc, #428]	; (80009ac <main+0x1e0>)
 8000800:	f002 f9c8 	bl	8002b94 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  car_front_entering = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000804:	2101      	movs	r1, #1
 8000806:	486a      	ldr	r0, [pc, #424]	; (80009b0 <main+0x1e4>)
 8000808:	f000 feec 	bl	80015e4 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <main+0x1e8>)
 8000812:	701a      	strb	r2, [r3, #0]
	 	  car_back_exiting = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000814:	2120      	movs	r1, #32
 8000816:	4866      	ldr	r0, [pc, #408]	; (80009b0 <main+0x1e4>)
 8000818:	f000 fee4 	bl	80015e4 <HAL_GPIO_ReadPin>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	4b65      	ldr	r3, [pc, #404]	; (80009b8 <main+0x1ec>)
 8000822:	701a      	strb	r2, [r3, #0]
//	 	  readSensor();
	 	  lcd16x2_i2c_setCursor(0,0);
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff ff7c 	bl	8000724 <lcd16x2_i2c_setCursor>
	 	   lcd16x2_i2c_printf(" Total slots = %d",slots);
 800082c:	4b63      	ldr	r3, [pc, #396]	; (80009bc <main+0x1f0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	4863      	ldr	r0, [pc, #396]	; (80009c0 <main+0x1f4>)
 8000834:	f7ff ff9a 	bl	800076c <lcd16x2_i2c_printf>
	 	   lcd16x2_i2c_setCursor(1,0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff72 	bl	8000724 <lcd16x2_i2c_setCursor>
	 	   if(S1 == 1)
 8000840:	4b60      	ldr	r3, [pc, #384]	; (80009c4 <main+0x1f8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d103      	bne.n	8000850 <main+0x84>
	 	   {
	 		   lcd16x2_i2c_printf("s1 = 1 ");
 8000848:	485f      	ldr	r0, [pc, #380]	; (80009c8 <main+0x1fc>)
 800084a:	f7ff ff8f 	bl	800076c <lcd16x2_i2c_printf>
 800084e:	e002      	b.n	8000856 <main+0x8a>
	 	   }
	 	   else
	 	   {
	 		   lcd16x2_i2c_printf("s1 = 0 ");
 8000850:	485e      	ldr	r0, [pc, #376]	; (80009cc <main+0x200>)
 8000852:	f7ff ff8b 	bl	800076c <lcd16x2_i2c_printf>
	 	   }
	 	   lcd16x2_i2c_setCursor(1,8);
 8000856:	2108      	movs	r1, #8
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff63 	bl	8000724 <lcd16x2_i2c_setCursor>
	 	   if(S2 == 1)
 800085e:	4b5c      	ldr	r3, [pc, #368]	; (80009d0 <main+0x204>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d103      	bne.n	800086e <main+0xa2>
	 	   {
	 		   lcd16x2_i2c_printf("s2 = 1 ");
 8000866:	485b      	ldr	r0, [pc, #364]	; (80009d4 <main+0x208>)
 8000868:	f7ff ff80 	bl	800076c <lcd16x2_i2c_printf>
 800086c:	e002      	b.n	8000874 <main+0xa8>
	 	   }
	 	   else
	 	   {
	 		   lcd16x2_i2c_printf("s2 = 0 ");
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <main+0x20c>)
 8000870:	f7ff ff7c 	bl	800076c <lcd16x2_i2c_printf>
	 	   }
	 	  if(car_front_entering == RESET && flag1 == 0 )//
 8000874:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <main+0x1e8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d143      	bne.n	8000904 <main+0x138>
 800087c:	4b57      	ldr	r3, [pc, #348]	; (80009dc <main+0x210>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d13f      	bne.n	8000904 <main+0x138>
	 	 	  	  {
	 	 //		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1250);
	 	 	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4847      	ldr	r0, [pc, #284]	; (80009a8 <main+0x1dc>)
 800088c:	f000 fec2 	bl	8001614 <HAL_GPIO_WritePin>
	 	 	  		  if(slots>0)
 8000890:	4b4a      	ldr	r3, [pc, #296]	; (80009bc <main+0x1f0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dd24      	ble.n	80008e2 <main+0x116>
	 	 	  		  {
	 	 	  			  flag1 = 1;
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <main+0x210>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]

	 	 	  			  if(flag2 == 0)
 800089e:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <main+0x214>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d118      	bne.n	80008d8 <main+0x10c>
	 	 	  			  {
	 	 	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1250);
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <main+0x1e0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80008ae:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  			  slots = slots-1;
 80008b0:	4b42      	ldr	r3, [pc, #264]	; (80009bc <main+0x1f0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	4a41      	ldr	r2, [pc, #260]	; (80009bc <main+0x1f0>)
 80008b8:	6013      	str	r3, [r2, #0]

	 	 	  			  if (slots == 1)
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <main+0x1f0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d103      	bne.n	80008ca <main+0xfe>
						  	  S1 = 1;
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <main+0x1f8>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e006      	b.n	80008d8 <main+0x10c>
	 	 	  			  else if(slots == 0)
 80008ca:	4b3c      	ldr	r3, [pc, #240]	; (80009bc <main+0x1f0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <main+0x10c>
	 	 	  				  S2 = 1;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <main+0x204>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]

	 	 	  			  }
	 	 	  			  HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 fbdc 	bl	8001098 <HAL_Delay>
 80008e0:	e010      	b.n	8000904 <main+0x138>
	 	 //
	 	 	  		  }
	 	 	  		  else
	 	 	  		  	  {
	 	 	  			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e8:	482f      	ldr	r0, [pc, #188]	; (80009a8 <main+0x1dc>)
 80008ea:	f000 fe93 	bl	8001614 <HAL_GPIO_WritePin>
	 	 	  			  lcd16x2_i2c_setCursor(1,0);
 80008ee:	2100      	movs	r1, #0
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ff17 	bl	8000724 <lcd16x2_i2c_setCursor>
	 	 	  			  lcd16x2_i2c_printf("  sorry no slot  ");
 80008f6:	483b      	ldr	r0, [pc, #236]	; (80009e4 <main+0x218>)
 80008f8:	f7ff ff38 	bl	800076c <lcd16x2_i2c_printf>

	 	 	  			  HAL_Delay(2000);
 80008fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000900:	f000 fbca 	bl	8001098 <HAL_Delay>

	 	 //	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,250);
	 	 	  		  	  }
	 	 	  	  }
	 	 	  		if(car_back_exiting  == RESET && flag2 == 0)
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <main+0x1ec>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d131      	bne.n	8000970 <main+0x1a4>
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <main+0x214>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d12d      	bne.n	8000970 <main+0x1a4>
	 	 	  			  {
	 	 	  				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091a:	4823      	ldr	r0, [pc, #140]	; (80009a8 <main+0x1dc>)
 800091c:	f000 fe7a 	bl	8001614 <HAL_GPIO_WritePin>
	 	 	  				flag2 = 1;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <main+0x214>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
	 	 	  				if(slots != 2)
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <main+0x1f0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d020      	beq.n	8000970 <main+0x1a4>
	 	 	  				{
	 	 	  				  if(flag1 == 0)
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <main+0x210>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d11c      	bne.n	8000970 <main+0x1a4>
	 	 	  				  {
	 	 	  					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1250);
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <main+0x1e0>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  					  HAL_Delay(1000);
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f000 fba8 	bl	8001098 <HAL_Delay>
	 	 	  					  slots = slots + 1;
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <main+0x1f0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	3301      	adds	r3, #1
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <main+0x1f0>)
 8000950:	6013      	str	r3, [r2, #0]

	 	 	  					if (slots == 1)
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <main+0x1f0>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d103      	bne.n	8000962 <main+0x196>
	 	 	  						S1 = 0;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <main+0x1f8>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	e006      	b.n	8000970 <main+0x1a4>
	 	 	  					else if(slots == 2)
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <main+0x1f0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d102      	bne.n	8000970 <main+0x1a4>
	 	 	  						  S2 = 0;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <main+0x204>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
//
//	 	 	  				  }

	 	 	  			  }

	 	 	  		if (flag1 == 1 && flag2 == 1)
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <main+0x210>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	f47f af45 	bne.w	8000804 <main+0x38>
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <main+0x214>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	f47f af40 	bne.w	8000804 <main+0x38>
	 	 	  			  {
	 	 	  		//		  HAL_Delay(500);
	 	 	  		//		  x=1250;
	 	 	  				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,250);
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <main+0x1e0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	22fa      	movs	r2, #250	; 0xfa
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
	 	 	  				  HAL_Delay(1000);
 800098c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000990:	f000 fb82 	bl	8001098 <HAL_Delay>
	 	 	  				  flag1 = 0,flag2 = 0;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <main+0x210>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <main+0x214>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
	  car_front_entering = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80009a0:	e730      	b.n	8000804 <main+0x38>
 80009a2:	bf00      	nop
 80009a4:	20000084 	.word	0x20000084
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	200000d8 	.word	0x200000d8
 80009b0:	40020000 	.word	0x40020000
 80009b4:	20000120 	.word	0x20000120
 80009b8:	20000121 	.word	0x20000121
 80009bc:	20000000 	.word	0x20000000
 80009c0:	080040b0 	.word	0x080040b0
 80009c4:	20000124 	.word	0x20000124
 80009c8:	080040c4 	.word	0x080040c4
 80009cc:	080040cc 	.word	0x080040cc
 80009d0:	20000128 	.word	0x20000128
 80009d4:	080040d4 	.word	0x080040d4
 80009d8:	080040dc 	.word	0x080040dc
 80009dc:	2000012c 	.word	0x2000012c
 80009e0:	20000130 	.word	0x20000130
 80009e4:	080040e4 	.word	0x080040e4

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	2230      	movs	r2, #48	; 0x30
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 feca 	bl	8003790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemClock_Config+0xcc>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <SystemClock_Config+0xd0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a5c:	2348      	movs	r3, #72	; 0x48
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0320 	add.w	r3, r7, #32
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fb65 	bl	800213c <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a78:	f000 f932 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2102      	movs	r1, #2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fdc6 	bl	800262c <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aa6:	f000 f91b 	bl	8000ce0 <Error_Handler>
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3750      	adds	r7, #80	; 0x50
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MX_I2C1_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C1_Init+0x50>)
 8000afa:	f000 fda5 	bl	8001648 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 f8ec 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000084 	.word	0x20000084
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	; 0x38
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	f107 0320 	add.w	r3, r7, #32
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	615a      	str	r2, [r3, #20]
 8000b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b52:	2247      	movs	r2, #71	; 0x47
 8000b54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b5e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b70:	4823      	ldr	r0, [pc, #140]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b72:	f001 ff67 	bl	8002a44 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b7c:	f000 f8b0 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481c      	ldr	r0, [pc, #112]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b8e:	f002 f98b 	bl	8002ea8 <HAL_TIM_ConfigClockSource>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000b98:	f000 f8a2 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b9c:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000b9e:	f001 ffa0 	bl	8002ae2 <HAL_TIM_PWM_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ba8:	f000 f89a 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000bbc:	f002 fd4c 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bc6:	f000 f88b 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bca:	2360      	movs	r3, #96	; 0x60
 8000bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000be2:	f002 f89f 	bl	8002d24 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000bec:	f000 f878 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bf0:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM2_Init+0xe8>)
 8000bf2:	f000 f90b 	bl	8000e0c <HAL_TIM_MspPostInit>

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000d8 	.word	0x200000d8

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a25      	ldr	r2, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_GPIO_Init+0xd0>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8000c90:	4811      	ldr	r0, [pc, #68]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000c92:	f000 fcbf 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000c96:	2321      	movs	r3, #33	; 0x21
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <MX_GPIO_Init+0xd8>)
 8000caa:	f000 faff 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 8000cae:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <MX_GPIO_Init+0xd4>)
 8000cc8:	f000 faf0 	bl	80012ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0d      	ldr	r3, [pc, #52]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d26:	603b      	str	r3, [r7, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2a:	2007      	movs	r0, #7
 8000d2c:	f000 fa8a 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	; (8000dc0 <HAL_I2C_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12b      	bne.n	8000db6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d7a:	23c0      	movs	r3, #192	; 0xc0
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7e:	2312      	movs	r3, #18
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <HAL_I2C_MspInit+0x8c>)
 8000d96:	f000 fa89 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000da4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_I2C_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d10d      	bne.n	8000dfa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e2c:	d11d      	bne.n	8000e6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_TIM_MspPostInit+0x68>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <HAL_TIM_MspPostInit+0x68>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_TIM_MspPostInit+0x68>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4619      	mov	r1, r3
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <HAL_TIM_MspPostInit+0x6c>)
 8000e66:	f000 fa21 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8c6 	bl	8001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f002 fc4e 	bl	80037a0 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20020000 	.word	0x20020000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000134 	.word	0x20000134
 8000f38:	20000288 	.word	0x20000288

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f66:	490e      	ldr	r1, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f68:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f6c:	e002      	b.n	8000f74 <LoopCopyDataInit>

08000f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f72:	3304      	adds	r3, #4

08000f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f78:	d3f9      	bcc.n	8000f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	; (8000fac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f80:	e001      	b.n	8000f86 <LoopFillZerobss>

08000f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f84:	3204      	adds	r2, #4

08000f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f88:	d3fb      	bcc.n	8000f82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8a:	f7ff ffd7 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f002 fc0d 	bl	80037ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fc1b 	bl	80007cc <main>
  bx  lr    
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fa4:	08004154 	.word	0x08004154
  ldr r2, =_sbss
 8000fa8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fac:	20000284 	.word	0x20000284

08000fb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC_IRQHandler>
	...

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_Init+0x40>)
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_Init+0x40>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x40>)
 8000fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f000 f931 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f808 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe8:	f7ff fe80 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023c00 	.word	0x40023c00

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x54>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x58>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f93b 	bl	8001292 <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e00e      	b.n	8001044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d80a      	bhi.n	8001042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 f911 	bl	800125a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001038:	4a06      	ldr	r2, [pc, #24]	; (8001054 <HAL_InitTick+0x5c>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e000      	b.n	8001044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000008 	.word	0x20000008

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000000c 	.word	0x2000000c
 800107c:	20000138 	.word	0x20000138

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000138 	.word	0x20000138

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000000c 	.word	0x2000000c

080010e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010fc:	4013      	ands	r3, r2
 80010fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001112:	4a04      	ldr	r2, [pc, #16]	; (8001124 <__NVIC_SetPriorityGrouping+0x44>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <__NVIC_GetPriorityGrouping+0x18>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	f003 0307 	and.w	r3, r3, #7
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff47 	bl	80010e0 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff5c 	bl	8001128 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff8e 	bl	8001198 <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5d 	bl	8001144 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffb0 	bl	8001200 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e16b      	b.n	80015a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 815a 	bne.w	800159a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b4 	beq.w	800159a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x310>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x314>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x318>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x31c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x320>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x21a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x324>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x216>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x328>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x212>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x32c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x330>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x20a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x310>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x334>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae90 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e12b      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fb64 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ac:	f001 f9b6 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 80016b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a81      	ldr	r2, [pc, #516]	; (80018bc <HAL_I2C_Init+0x274>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d807      	bhi.n	80016cc <HAL_I2C_Init+0x84>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a80      	ldr	r2, [pc, #512]	; (80018c0 <HAL_I2C_Init+0x278>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	e006      	b.n	80016da <HAL_I2C_Init+0x92>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	; (80018c4 <HAL_I2C_Init+0x27c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	bf94      	ite	ls
 80016d4:	2301      	movls	r3, #1
 80016d6:	2300      	movhi	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0e7      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a78      	ldr	r2, [pc, #480]	; (80018c8 <HAL_I2C_Init+0x280>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_I2C_Init+0x274>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d802      	bhi.n	800171c <HAL_I2C_Init+0xd4>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	e009      	b.n	8001730 <HAL_I2C_Init+0xe8>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_I2C_Init+0x284>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	3301      	adds	r3, #1
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	495c      	ldr	r1, [pc, #368]	; (80018bc <HAL_I2C_Init+0x274>)
 800174c:	428b      	cmp	r3, r1
 800174e:	d819      	bhi.n	8001784 <HAL_I2C_Init+0x13c>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e59      	subs	r1, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fbb1 f3f3 	udiv	r3, r1, r3
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001764:	400b      	ands	r3, r1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00a      	beq.n	8001780 <HAL_I2C_Init+0x138>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e59      	subs	r1, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fbb1 f3f3 	udiv	r3, r1, r3
 8001778:	3301      	adds	r3, #1
 800177a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177e:	e051      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001780:	2304      	movs	r3, #4
 8001782:	e04f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <HAL_I2C_Init+0x168>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e012      	b.n	80017d6 <HAL_I2C_Init+0x18e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Init+0x196>
 80017da:	2301      	movs	r3, #1
 80017dc:	e022      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10e      	bne.n	8001804 <HAL_I2C_Init+0x1bc>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e58      	subs	r0, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	e00f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6809      	ldr	r1, [r1, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6911      	ldr	r1, [r2, #16]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68d2      	ldr	r2, [r2, #12]
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	000186a0 	.word	0x000186a0
 80018c0:	001e847f 	.word	0x001e847f
 80018c4:	003d08ff 	.word	0x003d08ff
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	461a      	mov	r2, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	817b      	strh	r3, [r7, #10]
 80018e0:	4613      	mov	r3, r2
 80018e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff fbcc 	bl	8001080 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	f040 80e0 	bne.w	8001ab8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2319      	movs	r3, #25
 80018fe:	2201      	movs	r2, #1
 8001900:	4970      	ldr	r1, [pc, #448]	; (8001ac4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa92 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800190e:	2302      	movs	r3, #2
 8001910:	e0d3      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Master_Transmit+0x50>
 800191c:	2302      	movs	r3, #2
 800191e:	e0cc      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d007      	beq.n	8001946 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2221      	movs	r2, #33	; 0x21
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2210      	movs	r2, #16
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	893a      	ldrh	r2, [r7, #8]
 8001976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001988:	8979      	ldrh	r1, [r7, #10]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f9ca 	bl	8001d28 <I2C_MasterRequestWrite>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e08d      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019b4:	e066      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	6a39      	ldr	r1, [r7, #32]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fb0c 	bl	8001fd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d107      	bne.n	80019de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d11b      	bne.n	8001a58 <HAL_I2C_Master_Transmit+0x188>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d017      	beq.n	8001a58 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	6a39      	ldr	r1, [r7, #32]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fafc 	bl	800205a <I2C_WaitOnBTFFlagUntilTimeout>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d107      	bne.n	8001a80 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e01a      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d194      	bne.n	80019b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ab8:	2302      	movs	r3, #2
  }
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	00100002 	.word	0x00100002
 8001ac8:	ffff0000 	.word	0xffff0000

08001acc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fad0 	bl	8001080 <HAL_GetTick>
 8001ae0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	f040 8111 	bne.w	8001d16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2319      	movs	r3, #25
 8001afa:	2201      	movs	r2, #1
 8001afc:	4988      	ldr	r1, [pc, #544]	; (8001d20 <HAL_I2C_IsDeviceReady+0x254>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f994 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e104      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_I2C_IsDeviceReady+0x50>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e0fd      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d007      	beq.n	8001b42 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2224      	movs	r2, #36	; 0x24
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a70      	ldr	r2, [pc, #448]	; (8001d24 <HAL_I2C_IsDeviceReady+0x258>)
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b74:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f952 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b9c:	d103      	bne.n	8001ba6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0b6      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001baa:	897b      	ldrh	r3, [r7, #10]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bb8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fa61 	bl	8001080 <HAL_GetTick>
 8001bbe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bee:	e025      	b.n	8001c3c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bf0:	f7ff fa46 	bl	8001080 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d302      	bcc.n	8001c06 <HAL_I2C_IsDeviceReady+0x13a>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	22a0      	movs	r2, #160	; 0xa0
 8001c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2ba0      	cmp	r3, #160	; 0xa0
 8001c46:	d005      	beq.n	8001c54 <HAL_I2C_IsDeviceReady+0x188>
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <HAL_I2C_IsDeviceReady+0x188>
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0cd      	beq.n	8001bf0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2220      	movs	r2, #32
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d129      	bne.n	8001cbe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c78:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2319      	movs	r3, #25
 8001c96:	2201      	movs	r2, #1
 8001c98:	4921      	ldr	r1, [pc, #132]	; (8001d20 <HAL_I2C_IsDeviceReady+0x254>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f8c6 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e036      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e02c      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cd6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2319      	movs	r3, #25
 8001cde:	2201      	movs	r2, #1
 8001ce0:	490f      	ldr	r1, [pc, #60]	; (8001d20 <HAL_I2C_IsDeviceReady+0x254>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f8a2 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e012      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f4ff af32 	bcc.w	8001b66 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2220      	movs	r2, #32
 8001d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	00100002 	.word	0x00100002
 8001d24:	ffff0000 	.word	0xffff0000

08001d28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	460b      	mov	r3, r1
 8001d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d006      	beq.n	8001d52 <I2C_MasterRequestWrite+0x2a>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d003      	beq.n	8001d52 <I2C_MasterRequestWrite+0x2a>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d50:	d108      	bne.n	8001d64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e00b      	b.n	8001d7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d107      	bne.n	8001d7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f84f 	bl	8001e2c <I2C_WaitOnFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d00d      	beq.n	8001db0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d103      	bne.n	8001dac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e035      	b.n	8001e1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db8:	d108      	bne.n	8001dcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	e01b      	b.n	8001e04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	11db      	asrs	r3, r3, #7
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f003 0306 	and.w	r3, r3, #6
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f063 030f 	orn	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <I2C_MasterRequestWrite+0xfc>)
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f875 	bl	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e010      	b.n	8001e1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <I2C_MasterRequestWrite+0x100>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f865 	bl	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	00010008 	.word	0x00010008
 8001e28:	00010002 	.word	0x00010002

08001e2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e3c:	e025      	b.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e44:	d021      	beq.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e46:	f7ff f91b 	bl	8001080 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d302      	bcc.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d116      	bne.n	8001e8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e023      	b.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0c1b      	lsrs	r3, r3, #16
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10d      	bne.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	e00c      	b.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d0b6      	beq.n	8001e3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee8:	e051      	b.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef8:	d123      	bne.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f043 0204 	orr.w	r2, r3, #4
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e046      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f48:	d021      	beq.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f899 	bl	8001080 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d116      	bne.n	8001f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e020      	b.n	8001fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10c      	bne.n	8001fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	e00b      	b.n	8001fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d18d      	bne.n	8001eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fe4:	e02d      	b.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f878 	bl	80020dc <I2C_IsAcknowledgeFailed>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e02d      	b.n	8002052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffc:	d021      	beq.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7ff f83f 	bl	8001080 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d116      	bne.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f043 0220 	orr.w	r2, r3, #32
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204c:	2b80      	cmp	r3, #128	; 0x80
 800204e:	d1ca      	bne.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002066:	e02d      	b.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f837 	bl	80020dc <I2C_IsAcknowledgeFailed>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e02d      	b.n	80020d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207e:	d021      	beq.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002080:	f7fe fffe 	bl	8001080 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	429a      	cmp	r2, r3
 800208e:	d302      	bcc.n	8002096 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d116      	bne.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f043 0220 	orr.w	r2, r3, #32
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e007      	b.n	80020d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d1ca      	bne.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d11b      	bne.n	800212c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0204 	orr.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e267      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d075      	beq.n	8002246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4b85      	ldr	r3, [pc, #532]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b82      	ldr	r3, [pc, #520]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b7e      	ldr	r3, [pc, #504]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e242      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x74>
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a75      	ldr	r2, [pc, #468]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a6f      	ldr	r2, [pc, #444]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6d      	ldr	r3, [pc, #436]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6c      	ldr	r2, [pc, #432]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021d4:	4b69      	ldr	r3, [pc, #420]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a68      	ldr	r2, [pc, #416]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe ff44 	bl	8001080 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff40 	bl	8001080 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e207      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xc0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe ff30 	bl	8001080 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe ff2c 	bl	8001080 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1f3      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b51      	ldr	r3, [pc, #324]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_RCC_OscConfig+0x240>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c7      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4937      	ldr	r1, [pc, #220]	; (800237c <HAL_RCC_OscConfig+0x240>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_OscConfig+0x244>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fee5 	bl	8001080 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fee1 	bl	8001080 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a8      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4925      	ldr	r1, [pc, #148]	; (800237c <HAL_RCC_OscConfig+0x240>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCC_OscConfig+0x244>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fec4 	bl	8001080 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fec0 	bl	8001080 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e187      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d036      	beq.n	8002394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_RCC_OscConfig+0x248>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fea4 	bl	8001080 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fea0 	bl	8001080 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e167      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x240>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 800235a:	e01b      	b.n	8002394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_OscConfig+0x248>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fe8d 	bl	8001080 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	e00e      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe fe89 	bl	8001080 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d907      	bls.n	8002388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e150      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 800237c:	40023800 	.word	0x40023800
 8002380:	42470000 	.word	0x42470000
 8002384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ea      	bne.n	800236a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8097 	beq.w	80024d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b7d      	ldr	r3, [pc, #500]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a7c      	ldr	r2, [pc, #496]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b7a      	ldr	r3, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d2:	4b77      	ldr	r3, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023de:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a73      	ldr	r2, [pc, #460]	; (80025b0 <HAL_RCC_OscConfig+0x474>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fe49 	bl	8001080 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f2:	f7fe fe45 	bl	8001080 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e10c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b6a      	ldr	r3, [pc, #424]	; (80025b0 <HAL_RCC_OscConfig+0x474>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d106      	bne.n	8002426 <HAL_RCC_OscConfig+0x2ea>
 8002418:	4b64      	ldr	r3, [pc, #400]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4a63      	ldr	r2, [pc, #396]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6713      	str	r3, [r2, #112]	; 0x70
 8002424:	e01c      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b05      	cmp	r3, #5
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x30c>
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	4a5e      	ldr	r2, [pc, #376]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	6713      	str	r3, [r2, #112]	; 0x70
 800243a:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	4a5b      	ldr	r2, [pc, #364]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6713      	str	r3, [r2, #112]	; 0x70
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x324>
 8002448:	4b58      	ldr	r3, [pc, #352]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	4b55      	ldr	r3, [pc, #340]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002458:	4a54      	ldr	r2, [pc, #336]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7fe fe0a 	bl	8001080 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe fe06 	bl	8001080 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	; 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0cb      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002486:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ee      	beq.n	8002470 <HAL_RCC_OscConfig+0x334>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7fe fdf4 	bl	8001080 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe fdf0 	bl	8001080 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0b5      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b2:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ee      	bne.n	800249c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024be:	7dfb      	ldrb	r3, [r7, #23]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	4a38      	ldr	r2, [pc, #224]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a1 	beq.w	800261c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d05c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d141      	bne.n	8002572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCC_OscConfig+0x478>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fdc4 	bl	8001080 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fdc0 	bl	8001080 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e087      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250e:	4b27      	ldr	r3, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69da      	ldr	r2, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	019b      	lsls	r3, r3, #6
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	061b      	lsls	r3, r3, #24
 800253e:	491b      	ldr	r1, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe fd99 	bl	8001080 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe fd95 	bl	8001080 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e05c      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x416>
 8002570:	e054      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_RCC_OscConfig+0x478>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe fd82 	bl	8001080 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fd7e 	bl	8001080 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e045      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_OscConfig+0x470>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x444>
 800259e:	e03d      	b.n	800261c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e038      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40007000 	.word	0x40007000
 80025b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x4ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d028      	beq.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d121      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d11a      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d111      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	3b01      	subs	r3, #1
 8002602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d107      	bne.n	8002618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e000      	b.n	800261e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cc      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b68      	ldr	r3, [pc, #416]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d90c      	bls.n	8002668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d119      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e067      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe fcb0 	bl	8001080 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fcac 	bl	8001080 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d20c      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc10 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	080040f8 	.word	0x080040f8
 80027f0:	20000004 	.word	0x20000004
 80027f4:	20000008 	.word	0x20000008

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b094      	sub	sp, #80	; 0x50
 80027fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	647b      	str	r3, [r7, #68]	; 0x44
 8002804:	2300      	movs	r3, #0
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002808:	2300      	movs	r3, #0
 800280a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002810:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d00d      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x40>
 800281c:	2b08      	cmp	r3, #8
 800281e:	f200 80e1 	bhi.w	80029e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e0db      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_GetSysClockFreq+0x204>)
 800282e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002830:	e0db      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002836:	e0d8      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002838:	4b6f      	ldr	r3, [pc, #444]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002840:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d063      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	2200      	movs	r2, #0
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
 8002858:	63fa      	str	r2, [r7, #60]	; 0x3c
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
 8002862:	2300      	movs	r3, #0
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
 8002866:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800286a:	4622      	mov	r2, r4
 800286c:	462b      	mov	r3, r5
 800286e:	f04f 0000 	mov.w	r0, #0
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	0159      	lsls	r1, r3, #5
 8002878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800287c:	0150      	lsls	r0, r2, #5
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4621      	mov	r1, r4
 8002884:	1a51      	subs	r1, r2, r1
 8002886:	6139      	str	r1, [r7, #16]
 8002888:	4629      	mov	r1, r5
 800288a:	eb63 0301 	sbc.w	r3, r3, r1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800289c:	4659      	mov	r1, fp
 800289e:	018b      	lsls	r3, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a6:	4651      	mov	r1, sl
 80028a8:	018a      	lsls	r2, r1, #6
 80028aa:	4651      	mov	r1, sl
 80028ac:	ebb2 0801 	subs.w	r8, r2, r1
 80028b0:	4659      	mov	r1, fp
 80028b2:	eb63 0901 	sbc.w	r9, r3, r1
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028ca:	4690      	mov	r8, r2
 80028cc:	4699      	mov	r9, r3
 80028ce:	4623      	mov	r3, r4
 80028d0:	eb18 0303 	adds.w	r3, r8, r3
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	462b      	mov	r3, r5
 80028d8:	eb49 0303 	adc.w	r3, r9, r3
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ea:	4629      	mov	r1, r5
 80028ec:	024b      	lsls	r3, r1, #9
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028f4:	4621      	mov	r1, r4
 80028f6:	024a      	lsls	r2, r1, #9
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fe:	2200      	movs	r2, #0
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
 8002902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002904:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002908:	f7fd fcba 	bl	8000280 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	e058      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	2200      	movs	r2, #0
 800291e:	4618      	mov	r0, r3
 8002920:	4611      	mov	r1, r2
 8002922:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	2300      	movs	r3, #0
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002930:	4642      	mov	r2, r8
 8002932:	464b      	mov	r3, r9
 8002934:	f04f 0000 	mov.w	r0, #0
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	0159      	lsls	r1, r3, #5
 800293e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002942:	0150      	lsls	r0, r2, #5
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4641      	mov	r1, r8
 800294a:	ebb2 0a01 	subs.w	sl, r2, r1
 800294e:	4649      	mov	r1, r9
 8002950:	eb63 0b01 	sbc.w	fp, r3, r1
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002960:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002964:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002968:	ebb2 040a 	subs.w	r4, r2, sl
 800296c:	eb63 050b 	sbc.w	r5, r3, fp
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	00eb      	lsls	r3, r5, #3
 800297a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297e:	00e2      	lsls	r2, r4, #3
 8002980:	4614      	mov	r4, r2
 8002982:	461d      	mov	r5, r3
 8002984:	4643      	mov	r3, r8
 8002986:	18e3      	adds	r3, r4, r3
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	464b      	mov	r3, r9
 800298c:	eb45 0303 	adc.w	r3, r5, r3
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	61fa      	str	r2, [r7, #28]
 80029b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029bc:	f7fd fc60 	bl	8000280 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetSysClockFreq+0x204>)
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3750      	adds	r7, #80	; 0x50
 80029f0:	46bd      	mov	sp, r7
 80029f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	00f42400 	.word	0x00f42400
 8002a00:	007a1200 	.word	0x007a1200

08002a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a08:	4b03      	ldr	r3, [pc, #12]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a20:	f7ff fff0 	bl	8002a04 <HAL_RCC_GetHCLKFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	0a9b      	lsrs	r3, r3, #10
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	4903      	ldr	r1, [pc, #12]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	08004108 	.word	0x08004108

08002a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e041      	b.n	8002ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f9ae 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 fad8 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e041      	b.n	8002b78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f839 	bl	8002b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fa89 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x24>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e022      	b.n	8002bfe <HAL_TIM_PWM_Start+0x6a>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d109      	bne.n	8002bd2 <HAL_TIM_PWM_Start+0x3e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	e015      	b.n	8002bfe <HAL_TIM_PWM_Start+0x6a>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d109      	bne.n	8002bec <HAL_TIM_PWM_Start+0x58>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e008      	b.n	8002bfe <HAL_TIM_PWM_Start+0x6a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e07c      	b.n	8002d00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x82>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c14:	e013      	b.n	8002c3e <HAL_TIM_PWM_Start+0xaa>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start+0x92>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c24:	e00b      	b.n	8002c3e <HAL_TIM_PWM_Start+0xaa>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d104      	bne.n	8002c36 <HAL_TIM_PWM_Start+0xa2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c34:	e003      	b.n	8002c3e <HAL_TIM_PWM_Start+0xaa>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2201      	movs	r2, #1
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fce0 	bl	800360c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2d      	ldr	r2, [pc, #180]	; (8002d08 <HAL_TIM_PWM_Start+0x174>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_PWM_Start+0xcc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_TIM_PWM_Start+0x178>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_TIM_PWM_Start+0xd0>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_TIM_PWM_Start+0xd2>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_TIM_PWM_Start+0x174>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d01d      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1f      	ldr	r2, [pc, #124]	; (8002d10 <HAL_TIM_PWM_Start+0x17c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_TIM_PWM_Start+0x180>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_TIM_PWM_Start+0x184>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <HAL_TIM_PWM_Start+0x178>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIM_PWM_Start+0x188>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIM_PWM_Start+0x136>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_TIM_PWM_Start+0x18c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d111      	bne.n	8002cee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	d010      	beq.n	8002cfe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cec:	e007      	b.n	8002cfe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010400 	.word	0x40010400
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40001800 	.word	0x40001800

08002d24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0ae      	b.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	f200 809f 	bhi.w	8002e90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002e91 	.word	0x08002e91
 8002d60:	08002e91 	.word	0x08002e91
 8002d64:	08002e91 	.word	0x08002e91
 8002d68:	08002dcd 	.word	0x08002dcd
 8002d6c:	08002e91 	.word	0x08002e91
 8002d70:	08002e91 	.word	0x08002e91
 8002d74:	08002e91 	.word	0x08002e91
 8002d78:	08002e0f 	.word	0x08002e0f
 8002d7c:	08002e91 	.word	0x08002e91
 8002d80:	08002e91 	.word	0x08002e91
 8002d84:	08002e91 	.word	0x08002e91
 8002d88:	08002e4f 	.word	0x08002e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f9f0 	bl	8003178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0208 	orr.w	r2, r2, #8
 8002da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0204 	bic.w	r2, r2, #4
 8002db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6999      	ldr	r1, [r3, #24]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	619a      	str	r2, [r3, #24]
      break;
 8002dca:	e064      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fa40 	bl	8003258 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6999      	ldr	r1, [r3, #24]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	021a      	lsls	r2, r3, #8
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	619a      	str	r2, [r3, #24]
      break;
 8002e0c:	e043      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fa95 	bl	8003344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	69da      	ldr	r2, [r3, #28]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0208 	orr.w	r2, r2, #8
 8002e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0204 	bic.w	r2, r2, #4
 8002e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69d9      	ldr	r1, [r3, #28]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	61da      	str	r2, [r3, #28]
      break;
 8002e4c:	e023      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fae9 	bl	800342c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	021a      	lsls	r2, r3, #8
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	61da      	str	r2, [r3, #28]
      break;
 8002e8e:	e002      	b.n	8002e96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	75fb      	strb	r3, [r7, #23]
      break;
 8002e94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0b4      	b.n	800302e <HAL_TIM_ConfigClockSource+0x186>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efc:	d03e      	beq.n	8002f7c <HAL_TIM_ConfigClockSource+0xd4>
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	f200 8087 	bhi.w	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	f000 8086 	beq.w	800301a <HAL_TIM_ConfigClockSource+0x172>
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d87f      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b70      	cmp	r3, #112	; 0x70
 8002f16:	d01a      	beq.n	8002f4e <HAL_TIM_ConfigClockSource+0xa6>
 8002f18:	2b70      	cmp	r3, #112	; 0x70
 8002f1a:	d87b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b60      	cmp	r3, #96	; 0x60
 8002f1e:	d050      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8002f20:	2b60      	cmp	r3, #96	; 0x60
 8002f22:	d877      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f24:	2b50      	cmp	r3, #80	; 0x50
 8002f26:	d03c      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8002f28:	2b50      	cmp	r3, #80	; 0x50
 8002f2a:	d873      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d058      	beq.n	8002fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d86f      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f34:	2b30      	cmp	r3, #48	; 0x30
 8002f36:	d064      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f38:	2b30      	cmp	r3, #48	; 0x30
 8002f3a:	d86b      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d060      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	d867      	bhi.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05c      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d05a      	beq.n	8003002 <HAL_TIM_ConfigClockSource+0x15a>
 8002f4c:	e062      	b.n	8003014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	6899      	ldr	r1, [r3, #8]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f000 fb35 	bl	80035cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	609a      	str	r2, [r3, #8]
      break;
 8002f7a:	e04f      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f000 fb1e 	bl	80035cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f9e:	609a      	str	r2, [r3, #8]
      break;
 8002fa0:	e03c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f000 fa92 	bl	80034d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2150      	movs	r1, #80	; 0x50
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 faeb 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e02c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6859      	ldr	r1, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f000 fab1 	bl	8003536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2160      	movs	r1, #96	; 0x60
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fadb 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8002fe0:	e01c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f000 fa72 	bl	80034d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2140      	movs	r1, #64	; 0x40
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 facb 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003000:	e00c      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f000 fac2 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003012:	e003      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e000      	b.n	800301c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800301a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a40      	ldr	r2, [pc, #256]	; (800314c <TIM_Base_SetConfig+0x114>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d00f      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3d      	ldr	r2, [pc, #244]	; (8003150 <TIM_Base_SetConfig+0x118>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3c      	ldr	r2, [pc, #240]	; (8003154 <TIM_Base_SetConfig+0x11c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3b      	ldr	r2, [pc, #236]	; (8003158 <TIM_Base_SetConfig+0x120>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3a      	ldr	r2, [pc, #232]	; (800315c <TIM_Base_SetConfig+0x124>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2f      	ldr	r2, [pc, #188]	; (800314c <TIM_Base_SetConfig+0x114>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d02b      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d027      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <TIM_Base_SetConfig+0x118>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d023      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2b      	ldr	r2, [pc, #172]	; (8003154 <TIM_Base_SetConfig+0x11c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01f      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <TIM_Base_SetConfig+0x120>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01b      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <TIM_Base_SetConfig+0x124>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d017      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a28      	ldr	r2, [pc, #160]	; (8003160 <TIM_Base_SetConfig+0x128>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a27      	ldr	r2, [pc, #156]	; (8003164 <TIM_Base_SetConfig+0x12c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00f      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <TIM_Base_SetConfig+0x130>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00b      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <TIM_Base_SetConfig+0x134>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <TIM_Base_SetConfig+0x138>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <TIM_Base_SetConfig+0x13c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d108      	bne.n	80030fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0a      	ldr	r2, [pc, #40]	; (800314c <TIM_Base_SetConfig+0x114>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0xf8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0c      	ldr	r2, [pc, #48]	; (800315c <TIM_Base_SetConfig+0x124>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d103      	bne.n	8003138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	615a      	str	r2, [r3, #20]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40010000 	.word	0x40010000
 8003150:	40000400 	.word	0x40000400
 8003154:	40000800 	.word	0x40000800
 8003158:	40000c00 	.word	0x40000c00
 800315c:	40010400 	.word	0x40010400
 8003160:	40014000 	.word	0x40014000
 8003164:	40014400 	.word	0x40014400
 8003168:	40014800 	.word	0x40014800
 800316c:	40001800 	.word	0x40001800
 8003170:	40001c00 	.word	0x40001c00
 8003174:	40002000 	.word	0x40002000

08003178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f023 0201 	bic.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 0302 	bic.w	r3, r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <TIM_OC1_SetConfig+0xd8>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC1_SetConfig+0x64>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <TIM_OC1_SetConfig+0xdc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10c      	bne.n	80031f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0308 	bic.w	r3, r3, #8
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a15      	ldr	r2, [pc, #84]	; (8003250 <TIM_OC1_SetConfig+0xd8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <TIM_OC1_SetConfig+0x8e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <TIM_OC1_SetConfig+0xdc>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d111      	bne.n	800322a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40010000 	.word	0x40010000
 8003254:	40010400 	.word	0x40010400

08003258 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0210 	bic.w	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0320 	bic.w	r3, r3, #32
 80032a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a22      	ldr	r2, [pc, #136]	; (800333c <TIM_OC2_SetConfig+0xe4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_OC2_SetConfig+0x68>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <TIM_OC2_SetConfig+0xe8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10d      	bne.n	80032dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <TIM_OC2_SetConfig+0xe4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_OC2_SetConfig+0x94>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a16      	ldr	r2, [pc, #88]	; (8003340 <TIM_OC2_SetConfig+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d113      	bne.n	8003314 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	621a      	str	r2, [r3, #32]
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40010400 	.word	0x40010400

08003344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800338c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a21      	ldr	r2, [pc, #132]	; (8003424 <TIM_OC3_SetConfig+0xe0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_OC3_SetConfig+0x66>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <TIM_OC3_SetConfig+0xe4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10d      	bne.n	80033c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <TIM_OC3_SetConfig+0xe0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_OC3_SetConfig+0x92>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <TIM_OC3_SetConfig+0xe4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	621a      	str	r2, [r3, #32]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40010000 	.word	0x40010000
 8003428:	40010400 	.word	0x40010400

0800342c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	031b      	lsls	r3, r3, #12
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <TIM_OC4_SetConfig+0xa4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC4_SetConfig+0x68>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <TIM_OC4_SetConfig+0xa8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d109      	bne.n	80034a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800349a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	621a      	str	r2, [r3, #32]
}
 80034c2:	bf00      	nop
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40010400 	.word	0x40010400

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f023 0210 	bic.w	r2, r3, #16
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f043 0307 	orr.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
	...

08003658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800366c:	2302      	movs	r3, #2
 800366e:	e05a      	b.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d01d      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10c      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40001800 	.word	0x40001800

08003750 <_vsiprintf_r>:
 8003750:	b500      	push	{lr}
 8003752:	b09b      	sub	sp, #108	; 0x6c
 8003754:	9100      	str	r1, [sp, #0]
 8003756:	9104      	str	r1, [sp, #16]
 8003758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800375c:	9105      	str	r1, [sp, #20]
 800375e:	9102      	str	r1, [sp, #8]
 8003760:	4905      	ldr	r1, [pc, #20]	; (8003778 <_vsiprintf_r+0x28>)
 8003762:	9103      	str	r1, [sp, #12]
 8003764:	4669      	mov	r1, sp
 8003766:	f000 f999 	bl	8003a9c <_svfiprintf_r>
 800376a:	9b00      	ldr	r3, [sp, #0]
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	b01b      	add	sp, #108	; 0x6c
 8003772:	f85d fb04 	ldr.w	pc, [sp], #4
 8003776:	bf00      	nop
 8003778:	ffff0208 	.word	0xffff0208

0800377c <vsiprintf>:
 800377c:	4613      	mov	r3, r2
 800377e:	460a      	mov	r2, r1
 8003780:	4601      	mov	r1, r0
 8003782:	4802      	ldr	r0, [pc, #8]	; (800378c <vsiprintf+0x10>)
 8003784:	6800      	ldr	r0, [r0, #0]
 8003786:	f7ff bfe3 	b.w	8003750 <_vsiprintf_r>
 800378a:	bf00      	nop
 800378c:	2000005c 	.word	0x2000005c

08003790 <memset>:
 8003790:	4402      	add	r2, r0
 8003792:	4603      	mov	r3, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <__errno>:
 80037a0:	4b01      	ldr	r3, [pc, #4]	; (80037a8 <__errno+0x8>)
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000005c 	.word	0x2000005c

080037ac <__libc_init_array>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	4d0d      	ldr	r5, [pc, #52]	; (80037e4 <__libc_init_array+0x38>)
 80037b0:	4c0d      	ldr	r4, [pc, #52]	; (80037e8 <__libc_init_array+0x3c>)
 80037b2:	1b64      	subs	r4, r4, r5
 80037b4:	10a4      	asrs	r4, r4, #2
 80037b6:	2600      	movs	r6, #0
 80037b8:	42a6      	cmp	r6, r4
 80037ba:	d109      	bne.n	80037d0 <__libc_init_array+0x24>
 80037bc:	4d0b      	ldr	r5, [pc, #44]	; (80037ec <__libc_init_array+0x40>)
 80037be:	4c0c      	ldr	r4, [pc, #48]	; (80037f0 <__libc_init_array+0x44>)
 80037c0:	f000 fc6a 	bl	8004098 <_init>
 80037c4:	1b64      	subs	r4, r4, r5
 80037c6:	10a4      	asrs	r4, r4, #2
 80037c8:	2600      	movs	r6, #0
 80037ca:	42a6      	cmp	r6, r4
 80037cc:	d105      	bne.n	80037da <__libc_init_array+0x2e>
 80037ce:	bd70      	pop	{r4, r5, r6, pc}
 80037d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d4:	4798      	blx	r3
 80037d6:	3601      	adds	r6, #1
 80037d8:	e7ee      	b.n	80037b8 <__libc_init_array+0xc>
 80037da:	f855 3b04 	ldr.w	r3, [r5], #4
 80037de:	4798      	blx	r3
 80037e0:	3601      	adds	r6, #1
 80037e2:	e7f2      	b.n	80037ca <__libc_init_array+0x1e>
 80037e4:	0800414c 	.word	0x0800414c
 80037e8:	0800414c 	.word	0x0800414c
 80037ec:	0800414c 	.word	0x0800414c
 80037f0:	08004150 	.word	0x08004150

080037f4 <__retarget_lock_acquire_recursive>:
 80037f4:	4770      	bx	lr

080037f6 <__retarget_lock_release_recursive>:
 80037f6:	4770      	bx	lr

080037f8 <_free_r>:
 80037f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037fa:	2900      	cmp	r1, #0
 80037fc:	d044      	beq.n	8003888 <_free_r+0x90>
 80037fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003802:	9001      	str	r0, [sp, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f1a1 0404 	sub.w	r4, r1, #4
 800380a:	bfb8      	it	lt
 800380c:	18e4      	addlt	r4, r4, r3
 800380e:	f000 f8df 	bl	80039d0 <__malloc_lock>
 8003812:	4a1e      	ldr	r2, [pc, #120]	; (800388c <_free_r+0x94>)
 8003814:	9801      	ldr	r0, [sp, #4]
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	b933      	cbnz	r3, 8003828 <_free_r+0x30>
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6014      	str	r4, [r2, #0]
 800381e:	b003      	add	sp, #12
 8003820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003824:	f000 b8da 	b.w	80039dc <__malloc_unlock>
 8003828:	42a3      	cmp	r3, r4
 800382a:	d908      	bls.n	800383e <_free_r+0x46>
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	1961      	adds	r1, r4, r5
 8003830:	428b      	cmp	r3, r1
 8003832:	bf01      	itttt	eq
 8003834:	6819      	ldreq	r1, [r3, #0]
 8003836:	685b      	ldreq	r3, [r3, #4]
 8003838:	1949      	addeq	r1, r1, r5
 800383a:	6021      	streq	r1, [r4, #0]
 800383c:	e7ed      	b.n	800381a <_free_r+0x22>
 800383e:	461a      	mov	r2, r3
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b10b      	cbz	r3, 8003848 <_free_r+0x50>
 8003844:	42a3      	cmp	r3, r4
 8003846:	d9fa      	bls.n	800383e <_free_r+0x46>
 8003848:	6811      	ldr	r1, [r2, #0]
 800384a:	1855      	adds	r5, r2, r1
 800384c:	42a5      	cmp	r5, r4
 800384e:	d10b      	bne.n	8003868 <_free_r+0x70>
 8003850:	6824      	ldr	r4, [r4, #0]
 8003852:	4421      	add	r1, r4
 8003854:	1854      	adds	r4, r2, r1
 8003856:	42a3      	cmp	r3, r4
 8003858:	6011      	str	r1, [r2, #0]
 800385a:	d1e0      	bne.n	800381e <_free_r+0x26>
 800385c:	681c      	ldr	r4, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	440c      	add	r4, r1
 8003864:	6014      	str	r4, [r2, #0]
 8003866:	e7da      	b.n	800381e <_free_r+0x26>
 8003868:	d902      	bls.n	8003870 <_free_r+0x78>
 800386a:	230c      	movs	r3, #12
 800386c:	6003      	str	r3, [r0, #0]
 800386e:	e7d6      	b.n	800381e <_free_r+0x26>
 8003870:	6825      	ldr	r5, [r4, #0]
 8003872:	1961      	adds	r1, r4, r5
 8003874:	428b      	cmp	r3, r1
 8003876:	bf04      	itt	eq
 8003878:	6819      	ldreq	r1, [r3, #0]
 800387a:	685b      	ldreq	r3, [r3, #4]
 800387c:	6063      	str	r3, [r4, #4]
 800387e:	bf04      	itt	eq
 8003880:	1949      	addeq	r1, r1, r5
 8003882:	6021      	streq	r1, [r4, #0]
 8003884:	6054      	str	r4, [r2, #4]
 8003886:	e7ca      	b.n	800381e <_free_r+0x26>
 8003888:	b003      	add	sp, #12
 800388a:	bd30      	pop	{r4, r5, pc}
 800388c:	2000027c 	.word	0x2000027c

08003890 <sbrk_aligned>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	4e0e      	ldr	r6, [pc, #56]	; (80038cc <sbrk_aligned+0x3c>)
 8003894:	460c      	mov	r4, r1
 8003896:	6831      	ldr	r1, [r6, #0]
 8003898:	4605      	mov	r5, r0
 800389a:	b911      	cbnz	r1, 80038a2 <sbrk_aligned+0x12>
 800389c:	f000 fba6 	bl	8003fec <_sbrk_r>
 80038a0:	6030      	str	r0, [r6, #0]
 80038a2:	4621      	mov	r1, r4
 80038a4:	4628      	mov	r0, r5
 80038a6:	f000 fba1 	bl	8003fec <_sbrk_r>
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	d00a      	beq.n	80038c4 <sbrk_aligned+0x34>
 80038ae:	1cc4      	adds	r4, r0, #3
 80038b0:	f024 0403 	bic.w	r4, r4, #3
 80038b4:	42a0      	cmp	r0, r4
 80038b6:	d007      	beq.n	80038c8 <sbrk_aligned+0x38>
 80038b8:	1a21      	subs	r1, r4, r0
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 fb96 	bl	8003fec <_sbrk_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d101      	bne.n	80038c8 <sbrk_aligned+0x38>
 80038c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80038c8:	4620      	mov	r0, r4
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	20000280 	.word	0x20000280

080038d0 <_malloc_r>:
 80038d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d4:	1ccd      	adds	r5, r1, #3
 80038d6:	f025 0503 	bic.w	r5, r5, #3
 80038da:	3508      	adds	r5, #8
 80038dc:	2d0c      	cmp	r5, #12
 80038de:	bf38      	it	cc
 80038e0:	250c      	movcc	r5, #12
 80038e2:	2d00      	cmp	r5, #0
 80038e4:	4607      	mov	r7, r0
 80038e6:	db01      	blt.n	80038ec <_malloc_r+0x1c>
 80038e8:	42a9      	cmp	r1, r5
 80038ea:	d905      	bls.n	80038f8 <_malloc_r+0x28>
 80038ec:	230c      	movs	r3, #12
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	2600      	movs	r6, #0
 80038f2:	4630      	mov	r0, r6
 80038f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039cc <_malloc_r+0xfc>
 80038fc:	f000 f868 	bl	80039d0 <__malloc_lock>
 8003900:	f8d8 3000 	ldr.w	r3, [r8]
 8003904:	461c      	mov	r4, r3
 8003906:	bb5c      	cbnz	r4, 8003960 <_malloc_r+0x90>
 8003908:	4629      	mov	r1, r5
 800390a:	4638      	mov	r0, r7
 800390c:	f7ff ffc0 	bl	8003890 <sbrk_aligned>
 8003910:	1c43      	adds	r3, r0, #1
 8003912:	4604      	mov	r4, r0
 8003914:	d155      	bne.n	80039c2 <_malloc_r+0xf2>
 8003916:	f8d8 4000 	ldr.w	r4, [r8]
 800391a:	4626      	mov	r6, r4
 800391c:	2e00      	cmp	r6, #0
 800391e:	d145      	bne.n	80039ac <_malloc_r+0xdc>
 8003920:	2c00      	cmp	r4, #0
 8003922:	d048      	beq.n	80039b6 <_malloc_r+0xe6>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	4631      	mov	r1, r6
 8003928:	4638      	mov	r0, r7
 800392a:	eb04 0903 	add.w	r9, r4, r3
 800392e:	f000 fb5d 	bl	8003fec <_sbrk_r>
 8003932:	4581      	cmp	r9, r0
 8003934:	d13f      	bne.n	80039b6 <_malloc_r+0xe6>
 8003936:	6821      	ldr	r1, [r4, #0]
 8003938:	1a6d      	subs	r5, r5, r1
 800393a:	4629      	mov	r1, r5
 800393c:	4638      	mov	r0, r7
 800393e:	f7ff ffa7 	bl	8003890 <sbrk_aligned>
 8003942:	3001      	adds	r0, #1
 8003944:	d037      	beq.n	80039b6 <_malloc_r+0xe6>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	442b      	add	r3, r5
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	f8d8 3000 	ldr.w	r3, [r8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d038      	beq.n	80039c6 <_malloc_r+0xf6>
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	42a2      	cmp	r2, r4
 8003958:	d12b      	bne.n	80039b2 <_malloc_r+0xe2>
 800395a:	2200      	movs	r2, #0
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	e00f      	b.n	8003980 <_malloc_r+0xb0>
 8003960:	6822      	ldr	r2, [r4, #0]
 8003962:	1b52      	subs	r2, r2, r5
 8003964:	d41f      	bmi.n	80039a6 <_malloc_r+0xd6>
 8003966:	2a0b      	cmp	r2, #11
 8003968:	d917      	bls.n	800399a <_malloc_r+0xca>
 800396a:	1961      	adds	r1, r4, r5
 800396c:	42a3      	cmp	r3, r4
 800396e:	6025      	str	r5, [r4, #0]
 8003970:	bf18      	it	ne
 8003972:	6059      	strne	r1, [r3, #4]
 8003974:	6863      	ldr	r3, [r4, #4]
 8003976:	bf08      	it	eq
 8003978:	f8c8 1000 	streq.w	r1, [r8]
 800397c:	5162      	str	r2, [r4, r5]
 800397e:	604b      	str	r3, [r1, #4]
 8003980:	4638      	mov	r0, r7
 8003982:	f104 060b 	add.w	r6, r4, #11
 8003986:	f000 f829 	bl	80039dc <__malloc_unlock>
 800398a:	f026 0607 	bic.w	r6, r6, #7
 800398e:	1d23      	adds	r3, r4, #4
 8003990:	1af2      	subs	r2, r6, r3
 8003992:	d0ae      	beq.n	80038f2 <_malloc_r+0x22>
 8003994:	1b9b      	subs	r3, r3, r6
 8003996:	50a3      	str	r3, [r4, r2]
 8003998:	e7ab      	b.n	80038f2 <_malloc_r+0x22>
 800399a:	42a3      	cmp	r3, r4
 800399c:	6862      	ldr	r2, [r4, #4]
 800399e:	d1dd      	bne.n	800395c <_malloc_r+0x8c>
 80039a0:	f8c8 2000 	str.w	r2, [r8]
 80039a4:	e7ec      	b.n	8003980 <_malloc_r+0xb0>
 80039a6:	4623      	mov	r3, r4
 80039a8:	6864      	ldr	r4, [r4, #4]
 80039aa:	e7ac      	b.n	8003906 <_malloc_r+0x36>
 80039ac:	4634      	mov	r4, r6
 80039ae:	6876      	ldr	r6, [r6, #4]
 80039b0:	e7b4      	b.n	800391c <_malloc_r+0x4c>
 80039b2:	4613      	mov	r3, r2
 80039b4:	e7cc      	b.n	8003950 <_malloc_r+0x80>
 80039b6:	230c      	movs	r3, #12
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4638      	mov	r0, r7
 80039bc:	f000 f80e 	bl	80039dc <__malloc_unlock>
 80039c0:	e797      	b.n	80038f2 <_malloc_r+0x22>
 80039c2:	6025      	str	r5, [r4, #0]
 80039c4:	e7dc      	b.n	8003980 <_malloc_r+0xb0>
 80039c6:	605b      	str	r3, [r3, #4]
 80039c8:	deff      	udf	#255	; 0xff
 80039ca:	bf00      	nop
 80039cc:	2000027c 	.word	0x2000027c

080039d0 <__malloc_lock>:
 80039d0:	4801      	ldr	r0, [pc, #4]	; (80039d8 <__malloc_lock+0x8>)
 80039d2:	f7ff bf0f 	b.w	80037f4 <__retarget_lock_acquire_recursive>
 80039d6:	bf00      	nop
 80039d8:	20000278 	.word	0x20000278

080039dc <__malloc_unlock>:
 80039dc:	4801      	ldr	r0, [pc, #4]	; (80039e4 <__malloc_unlock+0x8>)
 80039de:	f7ff bf0a 	b.w	80037f6 <__retarget_lock_release_recursive>
 80039e2:	bf00      	nop
 80039e4:	20000278 	.word	0x20000278

080039e8 <__ssputs_r>:
 80039e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	688e      	ldr	r6, [r1, #8]
 80039ee:	461f      	mov	r7, r3
 80039f0:	42be      	cmp	r6, r7
 80039f2:	680b      	ldr	r3, [r1, #0]
 80039f4:	4682      	mov	sl, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	4690      	mov	r8, r2
 80039fa:	d82c      	bhi.n	8003a56 <__ssputs_r+0x6e>
 80039fc:	898a      	ldrh	r2, [r1, #12]
 80039fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a02:	d026      	beq.n	8003a52 <__ssputs_r+0x6a>
 8003a04:	6965      	ldr	r5, [r4, #20]
 8003a06:	6909      	ldr	r1, [r1, #16]
 8003a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a0c:	eba3 0901 	sub.w	r9, r3, r1
 8003a10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a14:	1c7b      	adds	r3, r7, #1
 8003a16:	444b      	add	r3, r9
 8003a18:	106d      	asrs	r5, r5, #1
 8003a1a:	429d      	cmp	r5, r3
 8003a1c:	bf38      	it	cc
 8003a1e:	461d      	movcc	r5, r3
 8003a20:	0553      	lsls	r3, r2, #21
 8003a22:	d527      	bpl.n	8003a74 <__ssputs_r+0x8c>
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7ff ff53 	bl	80038d0 <_malloc_r>
 8003a2a:	4606      	mov	r6, r0
 8003a2c:	b360      	cbz	r0, 8003a88 <__ssputs_r+0xa0>
 8003a2e:	6921      	ldr	r1, [r4, #16]
 8003a30:	464a      	mov	r2, r9
 8003a32:	f000 faeb 	bl	800400c <memcpy>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	6126      	str	r6, [r4, #16]
 8003a44:	6165      	str	r5, [r4, #20]
 8003a46:	444e      	add	r6, r9
 8003a48:	eba5 0509 	sub.w	r5, r5, r9
 8003a4c:	6026      	str	r6, [r4, #0]
 8003a4e:	60a5      	str	r5, [r4, #8]
 8003a50:	463e      	mov	r6, r7
 8003a52:	42be      	cmp	r6, r7
 8003a54:	d900      	bls.n	8003a58 <__ssputs_r+0x70>
 8003a56:	463e      	mov	r6, r7
 8003a58:	6820      	ldr	r0, [r4, #0]
 8003a5a:	4632      	mov	r2, r6
 8003a5c:	4641      	mov	r1, r8
 8003a5e:	f000 faab 	bl	8003fb8 <memmove>
 8003a62:	68a3      	ldr	r3, [r4, #8]
 8003a64:	1b9b      	subs	r3, r3, r6
 8003a66:	60a3      	str	r3, [r4, #8]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	4433      	add	r3, r6
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	2000      	movs	r0, #0
 8003a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a74:	462a      	mov	r2, r5
 8003a76:	f000 fad7 	bl	8004028 <_realloc_r>
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1e0      	bne.n	8003a42 <__ssputs_r+0x5a>
 8003a80:	6921      	ldr	r1, [r4, #16]
 8003a82:	4650      	mov	r0, sl
 8003a84:	f7ff feb8 	bl	80037f8 <_free_r>
 8003a88:	230c      	movs	r3, #12
 8003a8a:	f8ca 3000 	str.w	r3, [sl]
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9a:	e7e9      	b.n	8003a70 <__ssputs_r+0x88>

08003a9c <_svfiprintf_r>:
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	4698      	mov	r8, r3
 8003aa2:	898b      	ldrh	r3, [r1, #12]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	b09d      	sub	sp, #116	; 0x74
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	460d      	mov	r5, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	d50e      	bpl.n	8003ace <_svfiprintf_r+0x32>
 8003ab0:	690b      	ldr	r3, [r1, #16]
 8003ab2:	b963      	cbnz	r3, 8003ace <_svfiprintf_r+0x32>
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	f7ff ff0b 	bl	80038d0 <_malloc_r>
 8003aba:	6028      	str	r0, [r5, #0]
 8003abc:	6128      	str	r0, [r5, #16]
 8003abe:	b920      	cbnz	r0, 8003aca <_svfiprintf_r+0x2e>
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac8:	e0d0      	b.n	8003c6c <_svfiprintf_r+0x1d0>
 8003aca:	2340      	movs	r3, #64	; 0x40
 8003acc:	616b      	str	r3, [r5, #20]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003adc:	2330      	movs	r3, #48	; 0x30
 8003ade:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c84 <_svfiprintf_r+0x1e8>
 8003ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ae6:	f04f 0901 	mov.w	r9, #1
 8003aea:	4623      	mov	r3, r4
 8003aec:	469a      	mov	sl, r3
 8003aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003af2:	b10a      	cbz	r2, 8003af8 <_svfiprintf_r+0x5c>
 8003af4:	2a25      	cmp	r2, #37	; 0x25
 8003af6:	d1f9      	bne.n	8003aec <_svfiprintf_r+0x50>
 8003af8:	ebba 0b04 	subs.w	fp, sl, r4
 8003afc:	d00b      	beq.n	8003b16 <_svfiprintf_r+0x7a>
 8003afe:	465b      	mov	r3, fp
 8003b00:	4622      	mov	r2, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff ff6f 	bl	80039e8 <__ssputs_r>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f000 80a9 	beq.w	8003c62 <_svfiprintf_r+0x1c6>
 8003b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b12:	445a      	add	r2, fp
 8003b14:	9209      	str	r2, [sp, #36]	; 0x24
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80a1 	beq.w	8003c62 <_svfiprintf_r+0x1c6>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b2a:	f10a 0a01 	add.w	sl, sl, #1
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	9307      	str	r3, [sp, #28]
 8003b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b36:	931a      	str	r3, [sp, #104]	; 0x68
 8003b38:	4654      	mov	r4, sl
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b40:	4850      	ldr	r0, [pc, #320]	; (8003c84 <_svfiprintf_r+0x1e8>)
 8003b42:	f7fc fb4d 	bl	80001e0 <memchr>
 8003b46:	9a04      	ldr	r2, [sp, #16]
 8003b48:	b9d8      	cbnz	r0, 8003b82 <_svfiprintf_r+0xe6>
 8003b4a:	06d0      	lsls	r0, r2, #27
 8003b4c:	bf44      	itt	mi
 8003b4e:	2320      	movmi	r3, #32
 8003b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b54:	0711      	lsls	r1, r2, #28
 8003b56:	bf44      	itt	mi
 8003b58:	232b      	movmi	r3, #43	; 0x2b
 8003b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b62:	2b2a      	cmp	r3, #42	; 0x2a
 8003b64:	d015      	beq.n	8003b92 <_svfiprintf_r+0xf6>
 8003b66:	9a07      	ldr	r2, [sp, #28]
 8003b68:	4654      	mov	r4, sl
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f04f 0c0a 	mov.w	ip, #10
 8003b70:	4621      	mov	r1, r4
 8003b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b76:	3b30      	subs	r3, #48	; 0x30
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d94d      	bls.n	8003c18 <_svfiprintf_r+0x17c>
 8003b7c:	b1b0      	cbz	r0, 8003bac <_svfiprintf_r+0x110>
 8003b7e:	9207      	str	r2, [sp, #28]
 8003b80:	e014      	b.n	8003bac <_svfiprintf_r+0x110>
 8003b82:	eba0 0308 	sub.w	r3, r0, r8
 8003b86:	fa09 f303 	lsl.w	r3, r9, r3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	9304      	str	r3, [sp, #16]
 8003b8e:	46a2      	mov	sl, r4
 8003b90:	e7d2      	b.n	8003b38 <_svfiprintf_r+0x9c>
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	1d19      	adds	r1, r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	9103      	str	r1, [sp, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfbb      	ittet	lt
 8003b9e:	425b      	neglt	r3, r3
 8003ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba4:	9307      	strge	r3, [sp, #28]
 8003ba6:	9307      	strlt	r3, [sp, #28]
 8003ba8:	bfb8      	it	lt
 8003baa:	9204      	strlt	r2, [sp, #16]
 8003bac:	7823      	ldrb	r3, [r4, #0]
 8003bae:	2b2e      	cmp	r3, #46	; 0x2e
 8003bb0:	d10c      	bne.n	8003bcc <_svfiprintf_r+0x130>
 8003bb2:	7863      	ldrb	r3, [r4, #1]
 8003bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb6:	d134      	bne.n	8003c22 <_svfiprintf_r+0x186>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	9203      	str	r2, [sp, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfb8      	it	lt
 8003bc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bc8:	3402      	adds	r4, #2
 8003bca:	9305      	str	r3, [sp, #20]
 8003bcc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003c94 <_svfiprintf_r+0x1f8>
 8003bd0:	7821      	ldrb	r1, [r4, #0]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4650      	mov	r0, sl
 8003bd6:	f7fc fb03 	bl	80001e0 <memchr>
 8003bda:	b138      	cbz	r0, 8003bec <_svfiprintf_r+0x150>
 8003bdc:	9b04      	ldr	r3, [sp, #16]
 8003bde:	eba0 000a 	sub.w	r0, r0, sl
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	4082      	lsls	r2, r0
 8003be6:	4313      	orrs	r3, r2
 8003be8:	3401      	adds	r4, #1
 8003bea:	9304      	str	r3, [sp, #16]
 8003bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bf0:	4825      	ldr	r0, [pc, #148]	; (8003c88 <_svfiprintf_r+0x1ec>)
 8003bf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf6:	2206      	movs	r2, #6
 8003bf8:	f7fc faf2 	bl	80001e0 <memchr>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d038      	beq.n	8003c72 <_svfiprintf_r+0x1d6>
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <_svfiprintf_r+0x1f0>)
 8003c02:	bb1b      	cbnz	r3, 8003c4c <_svfiprintf_r+0x1b0>
 8003c04:	9b03      	ldr	r3, [sp, #12]
 8003c06:	3307      	adds	r3, #7
 8003c08:	f023 0307 	bic.w	r3, r3, #7
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c12:	4433      	add	r3, r6
 8003c14:	9309      	str	r3, [sp, #36]	; 0x24
 8003c16:	e768      	b.n	8003aea <_svfiprintf_r+0x4e>
 8003c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	2001      	movs	r0, #1
 8003c20:	e7a6      	b.n	8003b70 <_svfiprintf_r+0xd4>
 8003c22:	2300      	movs	r3, #0
 8003c24:	3401      	adds	r4, #1
 8003c26:	9305      	str	r3, [sp, #20]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f04f 0c0a 	mov.w	ip, #10
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c34:	3a30      	subs	r2, #48	; 0x30
 8003c36:	2a09      	cmp	r2, #9
 8003c38:	d903      	bls.n	8003c42 <_svfiprintf_r+0x1a6>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0c6      	beq.n	8003bcc <_svfiprintf_r+0x130>
 8003c3e:	9105      	str	r1, [sp, #20]
 8003c40:	e7c4      	b.n	8003bcc <_svfiprintf_r+0x130>
 8003c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c46:	4604      	mov	r4, r0
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e7f0      	b.n	8003c2e <_svfiprintf_r+0x192>
 8003c4c:	ab03      	add	r3, sp, #12
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	462a      	mov	r2, r5
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <_svfiprintf_r+0x1f4>)
 8003c54:	a904      	add	r1, sp, #16
 8003c56:	4638      	mov	r0, r7
 8003c58:	f3af 8000 	nop.w
 8003c5c:	1c42      	adds	r2, r0, #1
 8003c5e:	4606      	mov	r6, r0
 8003c60:	d1d6      	bne.n	8003c10 <_svfiprintf_r+0x174>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	065b      	lsls	r3, r3, #25
 8003c66:	f53f af2d 	bmi.w	8003ac4 <_svfiprintf_r+0x28>
 8003c6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c6c:	b01d      	add	sp, #116	; 0x74
 8003c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c72:	ab03      	add	r3, sp, #12
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	462a      	mov	r2, r5
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <_svfiprintf_r+0x1f4>)
 8003c7a:	a904      	add	r1, sp, #16
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f000 f879 	bl	8003d74 <_printf_i>
 8003c82:	e7eb      	b.n	8003c5c <_svfiprintf_r+0x1c0>
 8003c84:	08004110 	.word	0x08004110
 8003c88:	0800411a 	.word	0x0800411a
 8003c8c:	00000000 	.word	0x00000000
 8003c90:	080039e9 	.word	0x080039e9
 8003c94:	08004116 	.word	0x08004116

08003c98 <_printf_common>:
 8003c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	4699      	mov	r9, r3
 8003ca0:	688a      	ldr	r2, [r1, #8]
 8003ca2:	690b      	ldr	r3, [r1, #16]
 8003ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bfb8      	it	lt
 8003cac:	4613      	movlt	r3, r2
 8003cae:	6033      	str	r3, [r6, #0]
 8003cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cb4:	4607      	mov	r7, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	b10a      	cbz	r2, 8003cbe <_printf_common+0x26>
 8003cba:	3301      	adds	r3, #1
 8003cbc:	6033      	str	r3, [r6, #0]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	0699      	lsls	r1, r3, #26
 8003cc2:	bf42      	ittt	mi
 8003cc4:	6833      	ldrmi	r3, [r6, #0]
 8003cc6:	3302      	addmi	r3, #2
 8003cc8:	6033      	strmi	r3, [r6, #0]
 8003cca:	6825      	ldr	r5, [r4, #0]
 8003ccc:	f015 0506 	ands.w	r5, r5, #6
 8003cd0:	d106      	bne.n	8003ce0 <_printf_common+0x48>
 8003cd2:	f104 0a19 	add.w	sl, r4, #25
 8003cd6:	68e3      	ldr	r3, [r4, #12]
 8003cd8:	6832      	ldr	r2, [r6, #0]
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	dc26      	bgt.n	8003d2e <_printf_common+0x96>
 8003ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ce4:	1e13      	subs	r3, r2, #0
 8003ce6:	6822      	ldr	r2, [r4, #0]
 8003ce8:	bf18      	it	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	0692      	lsls	r2, r2, #26
 8003cee:	d42b      	bmi.n	8003d48 <_printf_common+0xb0>
 8003cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	47c0      	blx	r8
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d01e      	beq.n	8003d3c <_printf_common+0xa4>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	6922      	ldr	r2, [r4, #16]
 8003d02:	f003 0306 	and.w	r3, r3, #6
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	bf02      	ittt	eq
 8003d0a:	68e5      	ldreq	r5, [r4, #12]
 8003d0c:	6833      	ldreq	r3, [r6, #0]
 8003d0e:	1aed      	subeq	r5, r5, r3
 8003d10:	68a3      	ldr	r3, [r4, #8]
 8003d12:	bf0c      	ite	eq
 8003d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d18:	2500      	movne	r5, #0
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bfc4      	itt	gt
 8003d1e:	1a9b      	subgt	r3, r3, r2
 8003d20:	18ed      	addgt	r5, r5, r3
 8003d22:	2600      	movs	r6, #0
 8003d24:	341a      	adds	r4, #26
 8003d26:	42b5      	cmp	r5, r6
 8003d28:	d11a      	bne.n	8003d60 <_printf_common+0xc8>
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	e008      	b.n	8003d40 <_printf_common+0xa8>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	4652      	mov	r2, sl
 8003d32:	4649      	mov	r1, r9
 8003d34:	4638      	mov	r0, r7
 8003d36:	47c0      	blx	r8
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d103      	bne.n	8003d44 <_printf_common+0xac>
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d44:	3501      	adds	r5, #1
 8003d46:	e7c6      	b.n	8003cd6 <_printf_common+0x3e>
 8003d48:	18e1      	adds	r1, r4, r3
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	2030      	movs	r0, #48	; 0x30
 8003d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d52:	4422      	add	r2, r4
 8003d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	e7c7      	b.n	8003cf0 <_printf_common+0x58>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4622      	mov	r2, r4
 8003d64:	4649      	mov	r1, r9
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c0      	blx	r8
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d0e6      	beq.n	8003d3c <_printf_common+0xa4>
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7d9      	b.n	8003d26 <_printf_common+0x8e>
	...

08003d74 <_printf_i>:
 8003d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	7e0f      	ldrb	r7, [r1, #24]
 8003d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d7c:	2f78      	cmp	r7, #120	; 0x78
 8003d7e:	4691      	mov	r9, r2
 8003d80:	4680      	mov	r8, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	469a      	mov	sl, r3
 8003d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d8a:	d807      	bhi.n	8003d9c <_printf_i+0x28>
 8003d8c:	2f62      	cmp	r7, #98	; 0x62
 8003d8e:	d80a      	bhi.n	8003da6 <_printf_i+0x32>
 8003d90:	2f00      	cmp	r7, #0
 8003d92:	f000 80d4 	beq.w	8003f3e <_printf_i+0x1ca>
 8003d96:	2f58      	cmp	r7, #88	; 0x58
 8003d98:	f000 80c0 	beq.w	8003f1c <_printf_i+0x1a8>
 8003d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003da4:	e03a      	b.n	8003e1c <_printf_i+0xa8>
 8003da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003daa:	2b15      	cmp	r3, #21
 8003dac:	d8f6      	bhi.n	8003d9c <_printf_i+0x28>
 8003dae:	a101      	add	r1, pc, #4	; (adr r1, 8003db4 <_printf_i+0x40>)
 8003db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003d9d 	.word	0x08003d9d
 8003dc0:	08003d9d 	.word	0x08003d9d
 8003dc4:	08003d9d 	.word	0x08003d9d
 8003dc8:	08003d9d 	.word	0x08003d9d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d9d 	.word	0x08003d9d
 8003dd4:	08003d9d 	.word	0x08003d9d
 8003dd8:	08003d9d 	.word	0x08003d9d
 8003ddc:	08003d9d 	.word	0x08003d9d
 8003de0:	08003f25 	.word	0x08003f25
 8003de4:	08003e4d 	.word	0x08003e4d
 8003de8:	08003edf 	.word	0x08003edf
 8003dec:	08003d9d 	.word	0x08003d9d
 8003df0:	08003d9d 	.word	0x08003d9d
 8003df4:	08003f47 	.word	0x08003f47
 8003df8:	08003d9d 	.word	0x08003d9d
 8003dfc:	08003e4d 	.word	0x08003e4d
 8003e00:	08003d9d 	.word	0x08003d9d
 8003e04:	08003d9d 	.word	0x08003d9d
 8003e08:	08003ee7 	.word	0x08003ee7
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	602a      	str	r2, [r5, #0]
 8003e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e09f      	b.n	8003f60 <_printf_i+0x1ec>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	682b      	ldr	r3, [r5, #0]
 8003e24:	0607      	lsls	r7, r0, #24
 8003e26:	f103 0104 	add.w	r1, r3, #4
 8003e2a:	6029      	str	r1, [r5, #0]
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0xbe>
 8003e2e:	681e      	ldr	r6, [r3, #0]
 8003e30:	e003      	b.n	8003e3a <_printf_i+0xc6>
 8003e32:	0646      	lsls	r6, r0, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0xba>
 8003e36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	da03      	bge.n	8003e46 <_printf_i+0xd2>
 8003e3e:	232d      	movs	r3, #45	; 0x2d
 8003e40:	4276      	negs	r6, r6
 8003e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e46:	485a      	ldr	r0, [pc, #360]	; (8003fb0 <_printf_i+0x23c>)
 8003e48:	230a      	movs	r3, #10
 8003e4a:	e012      	b.n	8003e72 <_printf_i+0xfe>
 8003e4c:	682b      	ldr	r3, [r5, #0]
 8003e4e:	6820      	ldr	r0, [r4, #0]
 8003e50:	1d19      	adds	r1, r3, #4
 8003e52:	6029      	str	r1, [r5, #0]
 8003e54:	0605      	lsls	r5, r0, #24
 8003e56:	d501      	bpl.n	8003e5c <_printf_i+0xe8>
 8003e58:	681e      	ldr	r6, [r3, #0]
 8003e5a:	e002      	b.n	8003e62 <_printf_i+0xee>
 8003e5c:	0641      	lsls	r1, r0, #25
 8003e5e:	d5fb      	bpl.n	8003e58 <_printf_i+0xe4>
 8003e60:	881e      	ldrh	r6, [r3, #0]
 8003e62:	4853      	ldr	r0, [pc, #332]	; (8003fb0 <_printf_i+0x23c>)
 8003e64:	2f6f      	cmp	r7, #111	; 0x6f
 8003e66:	bf0c      	ite	eq
 8003e68:	2308      	moveq	r3, #8
 8003e6a:	230a      	movne	r3, #10
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e72:	6865      	ldr	r5, [r4, #4]
 8003e74:	60a5      	str	r5, [r4, #8]
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	bfa2      	ittt	ge
 8003e7a:	6821      	ldrge	r1, [r4, #0]
 8003e7c:	f021 0104 	bicge.w	r1, r1, #4
 8003e80:	6021      	strge	r1, [r4, #0]
 8003e82:	b90e      	cbnz	r6, 8003e88 <_printf_i+0x114>
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	d04b      	beq.n	8003f20 <_printf_i+0x1ac>
 8003e88:	4615      	mov	r5, r2
 8003e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8003e92:	5dc7      	ldrb	r7, [r0, r7]
 8003e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e98:	4637      	mov	r7, r6
 8003e9a:	42bb      	cmp	r3, r7
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	d9f4      	bls.n	8003e8a <_printf_i+0x116>
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d10b      	bne.n	8003ebc <_printf_i+0x148>
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	07de      	lsls	r6, r3, #31
 8003ea8:	d508      	bpl.n	8003ebc <_printf_i+0x148>
 8003eaa:	6923      	ldr	r3, [r4, #16]
 8003eac:	6861      	ldr	r1, [r4, #4]
 8003eae:	4299      	cmp	r1, r3
 8003eb0:	bfde      	ittt	le
 8003eb2:	2330      	movle	r3, #48	; 0x30
 8003eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ebc:	1b52      	subs	r2, r2, r5
 8003ebe:	6122      	str	r2, [r4, #16]
 8003ec0:	f8cd a000 	str.w	sl, [sp]
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	aa03      	add	r2, sp, #12
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4640      	mov	r0, r8
 8003ecc:	f7ff fee4 	bl	8003c98 <_printf_common>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d14a      	bne.n	8003f6a <_printf_i+0x1f6>
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed8:	b004      	add	sp, #16
 8003eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	4833      	ldr	r0, [pc, #204]	; (8003fb4 <_printf_i+0x240>)
 8003ee8:	2778      	movs	r7, #120	; 0x78
 8003eea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	6829      	ldr	r1, [r5, #0]
 8003ef2:	061f      	lsls	r7, r3, #24
 8003ef4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ef8:	d402      	bmi.n	8003f00 <_printf_i+0x18c>
 8003efa:	065f      	lsls	r7, r3, #25
 8003efc:	bf48      	it	mi
 8003efe:	b2b6      	uxthmi	r6, r6
 8003f00:	07df      	lsls	r7, r3, #31
 8003f02:	bf48      	it	mi
 8003f04:	f043 0320 	orrmi.w	r3, r3, #32
 8003f08:	6029      	str	r1, [r5, #0]
 8003f0a:	bf48      	it	mi
 8003f0c:	6023      	strmi	r3, [r4, #0]
 8003f0e:	b91e      	cbnz	r6, 8003f18 <_printf_i+0x1a4>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f023 0320 	bic.w	r3, r3, #32
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	2310      	movs	r3, #16
 8003f1a:	e7a7      	b.n	8003e6c <_printf_i+0xf8>
 8003f1c:	4824      	ldr	r0, [pc, #144]	; (8003fb0 <_printf_i+0x23c>)
 8003f1e:	e7e4      	b.n	8003eea <_printf_i+0x176>
 8003f20:	4615      	mov	r5, r2
 8003f22:	e7bd      	b.n	8003ea0 <_printf_i+0x12c>
 8003f24:	682b      	ldr	r3, [r5, #0]
 8003f26:	6826      	ldr	r6, [r4, #0]
 8003f28:	6961      	ldr	r1, [r4, #20]
 8003f2a:	1d18      	adds	r0, r3, #4
 8003f2c:	6028      	str	r0, [r5, #0]
 8003f2e:	0635      	lsls	r5, r6, #24
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	d501      	bpl.n	8003f38 <_printf_i+0x1c4>
 8003f34:	6019      	str	r1, [r3, #0]
 8003f36:	e002      	b.n	8003f3e <_printf_i+0x1ca>
 8003f38:	0670      	lsls	r0, r6, #25
 8003f3a:	d5fb      	bpl.n	8003f34 <_printf_i+0x1c0>
 8003f3c:	8019      	strh	r1, [r3, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	4615      	mov	r5, r2
 8003f44:	e7bc      	b.n	8003ec0 <_printf_i+0x14c>
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	602a      	str	r2, [r5, #0]
 8003f4c:	681d      	ldr	r5, [r3, #0]
 8003f4e:	6862      	ldr	r2, [r4, #4]
 8003f50:	2100      	movs	r1, #0
 8003f52:	4628      	mov	r0, r5
 8003f54:	f7fc f944 	bl	80001e0 <memchr>
 8003f58:	b108      	cbz	r0, 8003f5e <_printf_i+0x1ea>
 8003f5a:	1b40      	subs	r0, r0, r5
 8003f5c:	6060      	str	r0, [r4, #4]
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	6123      	str	r3, [r4, #16]
 8003f62:	2300      	movs	r3, #0
 8003f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f68:	e7aa      	b.n	8003ec0 <_printf_i+0x14c>
 8003f6a:	6923      	ldr	r3, [r4, #16]
 8003f6c:	462a      	mov	r2, r5
 8003f6e:	4649      	mov	r1, r9
 8003f70:	4640      	mov	r0, r8
 8003f72:	47d0      	blx	sl
 8003f74:	3001      	adds	r0, #1
 8003f76:	d0ad      	beq.n	8003ed4 <_printf_i+0x160>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	079b      	lsls	r3, r3, #30
 8003f7c:	d413      	bmi.n	8003fa6 <_printf_i+0x232>
 8003f7e:	68e0      	ldr	r0, [r4, #12]
 8003f80:	9b03      	ldr	r3, [sp, #12]
 8003f82:	4298      	cmp	r0, r3
 8003f84:	bfb8      	it	lt
 8003f86:	4618      	movlt	r0, r3
 8003f88:	e7a6      	b.n	8003ed8 <_printf_i+0x164>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4632      	mov	r2, r6
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4640      	mov	r0, r8
 8003f92:	47d0      	blx	sl
 8003f94:	3001      	adds	r0, #1
 8003f96:	d09d      	beq.n	8003ed4 <_printf_i+0x160>
 8003f98:	3501      	adds	r5, #1
 8003f9a:	68e3      	ldr	r3, [r4, #12]
 8003f9c:	9903      	ldr	r1, [sp, #12]
 8003f9e:	1a5b      	subs	r3, r3, r1
 8003fa0:	42ab      	cmp	r3, r5
 8003fa2:	dcf2      	bgt.n	8003f8a <_printf_i+0x216>
 8003fa4:	e7eb      	b.n	8003f7e <_printf_i+0x20a>
 8003fa6:	2500      	movs	r5, #0
 8003fa8:	f104 0619 	add.w	r6, r4, #25
 8003fac:	e7f5      	b.n	8003f9a <_printf_i+0x226>
 8003fae:	bf00      	nop
 8003fb0:	08004121 	.word	0x08004121
 8003fb4:	08004132 	.word	0x08004132

08003fb8 <memmove>:
 8003fb8:	4288      	cmp	r0, r1
 8003fba:	b510      	push	{r4, lr}
 8003fbc:	eb01 0402 	add.w	r4, r1, r2
 8003fc0:	d902      	bls.n	8003fc8 <memmove+0x10>
 8003fc2:	4284      	cmp	r4, r0
 8003fc4:	4623      	mov	r3, r4
 8003fc6:	d807      	bhi.n	8003fd8 <memmove+0x20>
 8003fc8:	1e43      	subs	r3, r0, #1
 8003fca:	42a1      	cmp	r1, r4
 8003fcc:	d008      	beq.n	8003fe0 <memmove+0x28>
 8003fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd6:	e7f8      	b.n	8003fca <memmove+0x12>
 8003fd8:	4402      	add	r2, r0
 8003fda:	4601      	mov	r1, r0
 8003fdc:	428a      	cmp	r2, r1
 8003fde:	d100      	bne.n	8003fe2 <memmove+0x2a>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fea:	e7f7      	b.n	8003fdc <memmove+0x24>

08003fec <_sbrk_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d06      	ldr	r5, [pc, #24]	; (8004008 <_sbrk_r+0x1c>)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	4608      	mov	r0, r1
 8003ff6:	602b      	str	r3, [r5, #0]
 8003ff8:	f7fc ff6a 	bl	8000ed0 <_sbrk>
 8003ffc:	1c43      	adds	r3, r0, #1
 8003ffe:	d102      	bne.n	8004006 <_sbrk_r+0x1a>
 8004000:	682b      	ldr	r3, [r5, #0]
 8004002:	b103      	cbz	r3, 8004006 <_sbrk_r+0x1a>
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	bd38      	pop	{r3, r4, r5, pc}
 8004008:	20000274 	.word	0x20000274

0800400c <memcpy>:
 800400c:	440a      	add	r2, r1
 800400e:	4291      	cmp	r1, r2
 8004010:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004014:	d100      	bne.n	8004018 <memcpy+0xc>
 8004016:	4770      	bx	lr
 8004018:	b510      	push	{r4, lr}
 800401a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004022:	4291      	cmp	r1, r2
 8004024:	d1f9      	bne.n	800401a <memcpy+0xe>
 8004026:	bd10      	pop	{r4, pc}

08004028 <_realloc_r>:
 8004028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402c:	4680      	mov	r8, r0
 800402e:	4614      	mov	r4, r2
 8004030:	460e      	mov	r6, r1
 8004032:	b921      	cbnz	r1, 800403e <_realloc_r+0x16>
 8004034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004038:	4611      	mov	r1, r2
 800403a:	f7ff bc49 	b.w	80038d0 <_malloc_r>
 800403e:	b92a      	cbnz	r2, 800404c <_realloc_r+0x24>
 8004040:	f7ff fbda 	bl	80037f8 <_free_r>
 8004044:	4625      	mov	r5, r4
 8004046:	4628      	mov	r0, r5
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	f000 f81b 	bl	8004086 <_malloc_usable_size_r>
 8004050:	4284      	cmp	r4, r0
 8004052:	4607      	mov	r7, r0
 8004054:	d802      	bhi.n	800405c <_realloc_r+0x34>
 8004056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800405a:	d812      	bhi.n	8004082 <_realloc_r+0x5a>
 800405c:	4621      	mov	r1, r4
 800405e:	4640      	mov	r0, r8
 8004060:	f7ff fc36 	bl	80038d0 <_malloc_r>
 8004064:	4605      	mov	r5, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	d0ed      	beq.n	8004046 <_realloc_r+0x1e>
 800406a:	42bc      	cmp	r4, r7
 800406c:	4622      	mov	r2, r4
 800406e:	4631      	mov	r1, r6
 8004070:	bf28      	it	cs
 8004072:	463a      	movcs	r2, r7
 8004074:	f7ff ffca 	bl	800400c <memcpy>
 8004078:	4631      	mov	r1, r6
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff fbbc 	bl	80037f8 <_free_r>
 8004080:	e7e1      	b.n	8004046 <_realloc_r+0x1e>
 8004082:	4635      	mov	r5, r6
 8004084:	e7df      	b.n	8004046 <_realloc_r+0x1e>

08004086 <_malloc_usable_size_r>:
 8004086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800408a:	1f18      	subs	r0, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	bfbc      	itt	lt
 8004090:	580b      	ldrlt	r3, [r1, r0]
 8004092:	18c0      	addlt	r0, r0, r3
 8004094:	4770      	bx	lr
	...

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
