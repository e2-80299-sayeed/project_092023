
Ultrasonic_Sensor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008b48  08008b48  00018b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc0  08008fc0  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc0  08008fc0  00018fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc8  08008fc8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08008fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          00000270  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c051  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c8d  00000000  00000000  0002c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d68  00000000  00000000  0002df30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a74  00000000  00000000  0002ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f6a  00000000  00000000  0002f70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000efc4  00000000  00000000  00051676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccbb1  00000000  00000000  0006063a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e44  00000000  00000000  0012d1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00132030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b30 	.word	0x08008b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008b30 	.word	0x08008b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <lcd16x2_i2c_sendCommand>:
/* Library variables */


/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	011b      	lsls	r3, r3, #4
 8000ffe:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f023 030f 	bic.w	r3, r3, #15
 8001006:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	f043 030c 	orr.w	r3, r3, #12
 800100e:	b2db      	uxtb	r3, r3
 8001010:	723b      	strb	r3, [r7, #8]
 8001012:	7bbb      	ldrb	r3, [r7, #14]
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	b2db      	uxtb	r3, r3
 800101a:	727b      	strb	r3, [r7, #9]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2db      	uxtb	r3, r3
 8001024:	72bb      	strb	r3, [r7, #10]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	b2db      	uxtb	r3, r3
 800102e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <lcd16x2_i2c_sendCommand+0x60>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <lcd16x2_i2c_sendCommand+0x64>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b299      	uxth	r1, r3
 800103a:	f107 0208 	add.w	r2, r7, #8
 800103e:	23c8      	movs	r3, #200	; 0xc8
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2304      	movs	r3, #4
 8001044:	f001 fa3e 	bl	80024c4 <HAL_I2C_Master_Transmit>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200001f4 	.word	0x200001f4
 8001054:	200001f8 	.word	0x200001f8

08001058 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f023 030f 	bic.w	r3, r3, #15
 800106e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	f043 030d 	orr.w	r3, r3, #13
 8001076:	b2db      	uxtb	r3, r3
 8001078:	723b      	strb	r3, [r7, #8]
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	f043 0309 	orr.w	r3, r3, #9
 8001080:	b2db      	uxtb	r3, r3
 8001082:	727b      	strb	r3, [r7, #9]
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f043 030d 	orr.w	r3, r3, #13
 800108a:	b2db      	uxtb	r3, r3
 800108c:	72bb      	strb	r3, [r7, #10]
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	f043 0309 	orr.w	r3, r3, #9
 8001094:	b2db      	uxtb	r3, r3
 8001096:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <lcd16x2_i2c_sendData+0x60>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <lcd16x2_i2c_sendData+0x64>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b299      	uxth	r1, r3
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	23c8      	movs	r3, #200	; 0xc8
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2304      	movs	r3, #4
 80010ac:	f001 fa0a 	bl	80024c4 <HAL_I2C_Master_Transmit>
}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001f4 	.word	0x200001f4
 80010bc:	200001f8 	.word	0x200001f8

080010c0 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 80010c8:	2032      	movs	r0, #50	; 0x32
 80010ca:	f000 fddf 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 80010ce:	4a30      	ldr	r2, [pc, #192]	; (8001190 <lcd16x2_i2c_init+0xd0>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <lcd16x2_i2c_init+0xd0>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010dc:	2205      	movs	r2, #5
 80010de:	214e      	movs	r1, #78	; 0x4e
 80010e0:	f001 faee 	bl	80026c0 <HAL_I2C_IsDeviceReady>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d010      	beq.n	800110c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 80010ea:	4b29      	ldr	r3, [pc, #164]	; (8001190 <lcd16x2_i2c_init+0xd0>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f2:	2205      	movs	r2, #5
 80010f4:	217e      	movs	r1, #126	; 0x7e
 80010f6:	f001 fae3 	bl	80026c0 <HAL_I2C_IsDeviceReady>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8001100:	2300      	movs	r3, #0
 8001102:	e040      	b.n	8001186 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <lcd16x2_i2c_init+0xd4>)
 8001106:	227e      	movs	r2, #126	; 0x7e
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e002      	b.n	8001112 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <lcd16x2_i2c_init+0xd4>)
 800110e:	224e      	movs	r2, #78	; 0x4e
 8001110:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8001112:	202d      	movs	r0, #45	; 0x2d
 8001114:	f000 fdba 	bl	8001c8c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001118:	2030      	movs	r0, #48	; 0x30
 800111a:	f7ff ff69 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800111e:	2005      	movs	r0, #5
 8001120:	f000 fdb4 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001124:	2030      	movs	r0, #48	; 0x30
 8001126:	f7ff ff63 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 fdae 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001130:	2030      	movs	r0, #48	; 0x30
 8001132:	f7ff ff5d 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001136:	2008      	movs	r0, #8
 8001138:	f000 fda8 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 800113c:	2020      	movs	r0, #32
 800113e:	f7ff ff57 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001142:	2008      	movs	r0, #8
 8001144:	f000 fda2 	bl	8001c8c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f7ff ff51 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800114e:	2001      	movs	r0, #1
 8001150:	f000 fd9c 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001154:	2008      	movs	r0, #8
 8001156:	f7ff ff4b 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f000 fd96 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff ff45 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001166:	2003      	movs	r0, #3
 8001168:	f000 fd90 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 800116c:	2006      	movs	r0, #6
 800116e:	f7ff ff3f 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fd8a 	bl	8001c8c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001178:	200c      	movs	r0, #12
 800117a:	f7ff ff39 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800117e:	2003      	movs	r0, #3
 8001180:	f000 fd84 	bl	8001c8c <HAL_Delay>

  return true;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001f4 	.word	0x200001f4
 8001194:	200001f8 	.word	0x200001f8

08001198 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	4613      	mov	r3, r2
 80011a6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d108      	bne.n	80011c8 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011bc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff15 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 80011c6:	e007      	b.n	80011d8 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80011ce:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff0c 	bl	8000ff0 <lcd16x2_i2c_sendCommand>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 80011e0:	b40f      	push	{r0, r1, r2, r3}
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b089      	sub	sp, #36	; 0x24
 80011e6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80011e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ec:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 f856 	bl	80052a8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
 8001200:	e00a      	b.n	8001218 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8001202:	7ffb      	ldrb	r3, [r7, #31]
 8001204:	3320      	adds	r3, #32
 8001206:	443b      	add	r3, r7
 8001208:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff23 	bl	8001058 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	3301      	adds	r3, #1
 8001216:	77fb      	strb	r3, [r7, #31]
 8001218:	7ffc      	ldrb	r4, [r7, #31]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f826 	bl	8000270 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	429c      	cmp	r4, r3
 8001228:	d202      	bcs.n	8001230 <lcd16x2_i2c_printf+0x50>
 800122a:	7ffb      	ldrb	r3, [r7, #31]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d9e8      	bls.n	8001202 <lcd16x2_i2c_printf+0x22>
  }
}
 8001230:	bf00      	nop
 8001232:	3724      	adds	r7, #36	; 0x24
 8001234:	46bd      	mov	sp, r7
 8001236:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800123a:	b004      	add	sp, #16
 800123c:	4770      	bx	lr
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f000 fcb0 	bl	8001ba8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f8a2 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f000 f9fe 	bl	800164c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001250:	f000 f936 	bl	80014c0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001254:	f000 f906 	bl	8001464 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001258:	f000 f982 	bl	8001560 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if(lcd16x2_i2c_init(&hi2c1))
 800125c:	483c      	ldr	r0, [pc, #240]	; (8001350 <main+0x110>)
 800125e:	f7ff ff2f 	bl	80010c0 <lcd16x2_i2c_init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <main+0x34>
   {
 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126e:	4839      	ldr	r0, [pc, #228]	; (8001354 <main+0x114>)
 8001270:	f000 ffca 	bl	8002208 <HAL_GPIO_WritePin>
   }
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8001274:	2104      	movs	r1, #4
 8001276:	4838      	ldr	r0, [pc, #224]	; (8001358 <main+0x118>)
 8001278:	f002 fa86 	bl	8003788 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  car_front_entering = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800127c:	2101      	movs	r1, #1
 800127e:	4837      	ldr	r0, [pc, #220]	; (800135c <main+0x11c>)
 8001280:	f000 ffaa 	bl	80021d8 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <main+0x120>)
 800128a:	701a      	strb	r2, [r3, #0]
	  car_back_exiting = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800128c:	2120      	movs	r1, #32
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <main+0x11c>)
 8001290:	f000 ffa2 	bl	80021d8 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <main+0x124>)
 800129a:	701a      	strb	r2, [r3, #0]
	  readSensor();
 800129c:	f000 fa52 	bl	8001744 <readSensor>
	  lcd16x2_i2c_setCursor(0,0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ff78 	bl	8001198 <lcd16x2_i2c_setCursor>
	   lcd16x2_i2c_printf(" Total slots = %d",slots);
 80012a8:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <main+0x128>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	482f      	ldr	r0, [pc, #188]	; (800136c <main+0x12c>)
 80012b0:	f7ff ff96 	bl	80011e0 <lcd16x2_i2c_printf>
	   lcd16x2_i2c_setCursor(1,0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2001      	movs	r0, #1
 80012b8:	f7ff ff6e 	bl	8001198 <lcd16x2_i2c_setCursor>
	   if(S1 == 1)
 80012bc:	4b2c      	ldr	r3, [pc, #176]	; (8001370 <main+0x130>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d103      	bne.n	80012cc <main+0x8c>
	   {
		   lcd16x2_i2c_printf("s1 = 1 ");
 80012c4:	482b      	ldr	r0, [pc, #172]	; (8001374 <main+0x134>)
 80012c6:	f7ff ff8b 	bl	80011e0 <lcd16x2_i2c_printf>
 80012ca:	e002      	b.n	80012d2 <main+0x92>
	   }
	   else
	   {
		   lcd16x2_i2c_printf("s1 = 0 ");
 80012cc:	482a      	ldr	r0, [pc, #168]	; (8001378 <main+0x138>)
 80012ce:	f7ff ff87 	bl	80011e0 <lcd16x2_i2c_printf>
	   }
	   lcd16x2_i2c_setCursor(1,10);
 80012d2:	210a      	movs	r1, #10
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff ff5f 	bl	8001198 <lcd16x2_i2c_setCursor>
	   if(S2 == 1)
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <main+0x13c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d103      	bne.n	80012ea <main+0xaa>
	   {
		   lcd16x2_i2c_printf("s2 = 1 ");
 80012e2:	4827      	ldr	r0, [pc, #156]	; (8001380 <main+0x140>)
 80012e4:	f7ff ff7c 	bl	80011e0 <lcd16x2_i2c_printf>
 80012e8:	e002      	b.n	80012f0 <main+0xb0>
	   }
	   else
	   {
		   lcd16x2_i2c_printf("s2 = 0 ");
 80012ea:	4826      	ldr	r0, [pc, #152]	; (8001384 <main+0x144>)
 80012ec:	f7ff ff78 	bl	80011e0 <lcd16x2_i2c_printf>
	   }

	   if(car_front_entering == RESET && flag1 == 0 )//
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <main+0x120>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d123      	bne.n	8001340 <main+0x100>
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <main+0x148>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11f      	bne.n	8001340 <main+0x100>
	  	  {
		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1250);
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <main+0x118>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001308:	639a      	str	r2, [r3, #56]	; 0x38
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <main+0x114>)
 8001312:	f000 ff79 	bl	8002208 <HAL_GPIO_WritePin>
	  		  if(slots>0)
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <main+0x128>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	dd17      	ble.n	800134e <main+0x10e>
	  		  {
	  			  flag1 = 1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <main+0x148>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]

	  			  if(flag2 == 0)
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <main+0x14c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <main+0xf6>
	  			  {
//	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,1250);
	  			  slots = slots-1;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <main+0x128>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3b01      	subs	r3, #1
 8001332:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <main+0x128>)
 8001334:	6013      	str	r3, [r2, #0]

	  			  }
	  			  HAL_Delay(3000);
 8001336:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800133a:	f000 fca7 	bl	8001c8c <HAL_Delay>
	  		  if(slots>0)
 800133e:	e006      	b.n	800134e <main+0x10e>

//	   lcd16x2_i2c_clear();
	  	  }
		  else
		  	  {
			  flag1=0;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <main+0x148>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,250);
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <main+0x118>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	22fa      	movs	r2, #250	; 0xfa
 800134c:	639a      	str	r2, [r3, #56]	; 0x38
	  car_front_entering = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800134e:	e795      	b.n	800127c <main+0x3c>
 8001350:	200001fc 	.word	0x200001fc
 8001354:	40020c00 	.word	0x40020c00
 8001358:	20000298 	.word	0x20000298
 800135c:	40020000 	.word	0x40020000
 8001360:	200002e0 	.word	0x200002e0
 8001364:	200002e1 	.word	0x200002e1
 8001368:	20000000 	.word	0x20000000
 800136c:	08008b48 	.word	0x08008b48
 8001370:	200002e4 	.word	0x200002e4
 8001374:	08008b5c 	.word	0x08008b5c
 8001378:	08008b64 	.word	0x08008b64
 800137c:	200002e8 	.word	0x200002e8
 8001380:	08008b6c 	.word	0x08008b6c
 8001384:	08008b74 	.word	0x08008b74
 8001388:	200002ec 	.word	0x200002ec
 800138c:	200002f0 	.word	0x200002f0

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	; 0x50
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	2230      	movs	r2, #48	; 0x30
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 ff8c 	bl	80052bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <SystemClock_Config+0xcc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <SystemClock_Config+0xcc>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <SystemClock_Config+0xcc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <SystemClock_Config+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <SystemClock_Config+0xd0>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <SystemClock_Config+0xd0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001400:	2304      	movs	r3, #4
 8001402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001404:	2348      	movs	r3, #72	; 0x48
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800140c:	2307      	movs	r3, #7
 800140e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fc8b 	bl	8002d30 <HAL_RCC_OscConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001420:	f000 f9b2 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001424:	230f      	movs	r3, #15
 8001426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	2302      	movs	r3, #2
 800142a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2102      	movs	r1, #2
 8001442:	4618      	mov	r0, r3
 8001444:	f001 feec 	bl	8003220 <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800144e:	f000 f99b 	bl	8001788 <Error_Handler>
  }
}
 8001452:	bf00      	nop
 8001454:	3750      	adds	r7, #80	; 0x50
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000

08001464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_I2C1_Init+0x50>)
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_I2C1_Init+0x54>)
 800146c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_I2C1_Init+0x58>)
 8001472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_I2C1_Init+0x50>)
 80014a2:	f000 fecb 	bl	800223c <HAL_I2C_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014ac:	f000 f96c 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200001fc 	.word	0x200001fc
 80014b8:	40005400 	.word	0x40005400
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_TIM1_Init+0x98>)
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <MX_TIM1_Init+0x9c>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM1_Init+0x98>)
 80014e4:	2247      	movs	r2, #71	; 0x47
 80014e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM1_Init+0x98>)
 80014f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM1_Init+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM1_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM1_Init+0x98>)
 800150a:	f002 f895 	bl	8003638 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001514:	f000 f938 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM1_Init+0x98>)
 8001526:	f002 fab9 	bl	8003a9c <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001530:	f000 f92a 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM1_Init+0x98>)
 8001542:	f002 fe83 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800154c:	f000 f91c 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000250 	.word	0x20000250
 800155c:	40010000 	.word	0x40010000

08001560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_TIM2_Init+0xe8>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <MX_TIM2_Init+0xe8>)
 800159a:	2247      	movs	r2, #71	; 0x47
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80015aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b8:	4823      	ldr	r0, [pc, #140]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015ba:	f002 f83d 	bl	8003638 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015c4:	f000 f8e0 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015d6:	f002 fa61 	bl	8003a9c <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015e0:	f000 f8d2 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e4:	4818      	ldr	r0, [pc, #96]	; (8001648 <MX_TIM2_Init+0xe8>)
 80015e6:	f002 f876 	bl	80036d6 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80015f0:	f000 f8ca 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	4619      	mov	r1, r3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_TIM2_Init+0xe8>)
 8001604:	f002 fe22 	bl	800424c <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800160e:	f000 f8bb 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM2_Init+0xe8>)
 800162a:	f002 f975 	bl	8003918 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001634:	f000 f8a8 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM2_Init+0xe8>)
 800163a:	f000 f951 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000298 	.word	0x20000298

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <MX_GPIO_Init+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a33      	ldr	r2, [pc, #204]	; (8001738 <MX_GPIO_Init+0xec>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b31      	ldr	r3, [pc, #196]	; (8001738 <MX_GPIO_Init+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <MX_GPIO_Init+0xec>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a2c      	ldr	r2, [pc, #176]	; (8001738 <MX_GPIO_Init+0xec>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <MX_GPIO_Init+0xec>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <MX_GPIO_Init+0xec>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a25      	ldr	r2, [pc, #148]	; (8001738 <MX_GPIO_Init+0xec>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_GPIO_Init+0xec>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_GPIO_Init+0xec>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a1e      	ldr	r2, [pc, #120]	; (8001738 <MX_GPIO_Init+0xec>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_GPIO_Init+0xec>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 41f4 	mov.w	r1, #31232	; 0x7a00
 80016d8:	4818      	ldr	r0, [pc, #96]	; (800173c <MX_GPIO_Init+0xf0>)
 80016da:	f000 fd95 	bl	8002208 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80016de:	2371      	movs	r3, #113	; 0x71
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4813      	ldr	r0, [pc, #76]	; (8001740 <MX_GPIO_Init+0xf4>)
 80016f2:	f000 fbd5 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_GPIO_Init+0xf0>)
 800170c:	f000 fbc8 	bl	8001ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD11 PD12 PD13
                           PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001710:	f44f 43f4 	mov.w	r3, #31232	; 0x7a00
 8001714:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_GPIO_Init+0xf0>)
 800172a:	f000 fbb9 	bl	8001ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40020000 	.word	0x40020000

08001744 <readSensor>:
	usTIM->SR &= ~1; 		//Resets the flag
	usTIM->CR1 |= 1; 		//Enables the counter
	while((usTIM->SR&0x0001) != 1);
	usTIM->SR &= ~(0x0001);
}
void readSensor() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 int S1 = 0, S2 = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12) == GPIO_PIN_SET)
 8001752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <readSensor+0x40>)
 8001758:	f000 fd3e 	bl	80021d8 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <readSensor+0x22>
  {
	  S1 = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	607b      	str	r3, [r7, #4]
  }
  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_SET)
 8001766:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <readSensor+0x40>)
 800176c:	f000 fd34 	bl	80021d8 <HAL_GPIO_ReadPin>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <readSensor+0x36>
  {
	  S2 = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	603b      	str	r3, [r7, #0]
  }
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020c00 	.word	0x40020c00

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_MspInit+0x4c>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_MspInit+0x4c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d2:	2007      	movs	r0, #7
 80017d4:	f000 fb30 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a19      	ldr	r2, [pc, #100]	; (8001868 <HAL_I2C_MspInit+0x84>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12b      	bne.n	800185e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_I2C_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_I2C_MspInit+0x88>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_I2C_MspInit+0x88>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001822:	23c0      	movs	r3, #192	; 0xc0
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001826:	2312      	movs	r3, #18
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001832:	2304      	movs	r3, #4
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <HAL_I2C_MspInit+0x8c>)
 800183e:	f000 fb2f 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_I2C_MspInit+0x88>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_I2C_MspInit+0x88>)
 800184c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b06      	ldr	r3, [pc, #24]	; (800186c <HAL_I2C_MspInit+0x88>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40005400 	.word	0x40005400
 800186c:	40023800 	.word	0x40023800
 8001870:	40020400 	.word	0x40020400

08001874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_TIM_Base_MspInit+0x64>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a13      	ldr	r2, [pc, #76]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a2:	e012      	b.n	80018ca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d10d      	bne.n	80018ca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_TIM_Base_MspInit+0x68>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d11d      	bne.n	800193e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_TIM_MspPostInit+0x68>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_TIM_MspPostInit+0x68>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_TIM_MspPostInit+0x68>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800191e:	2302      	movs	r3, #2
 8001920:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192e:	2301      	movs	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 030c 	add.w	r3, r7, #12
 8001936:	4619      	mov	r1, r3
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <HAL_TIM_MspPostInit+0x6c>)
 800193a:	f000 fab1 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800193e:	bf00      	nop
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 f956 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f003 fccf 	bl	8005360 <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	e7fe      	b.n	80019e6 <_exit+0x12>

080019e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e00a      	b.n	8001a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fa:	f3af 8000 	nop.w
 80019fe:	4601      	mov	r1, r0
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	b2ca      	uxtb	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf0      	blt.n	80019fa <_read+0x12>
  }

  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e009      	b.n	8001a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60ba      	str	r2, [r7, #8]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf1      	blt.n	8001a34 <_write+0x12>
  }
  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_close>:

int _close(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a82:	605a      	str	r2, [r3, #4]
  return 0;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_isatty>:

int _isatty(int file)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f003 fc34 	bl	8005360 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200002f4 	.word	0x200002f4
 8001b2c:	20000448 	.word	0x20000448

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f003 fbf3 	bl	800536c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fb5b 	bl	8001240 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001b98:	08008fd0 	.word	0x08008fd0
  ldr r2, =_sbss
 8001b9c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ba0:	20000448 	.word	0x20000448

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_Init+0x40>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_Init+0x40>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <HAL_Init+0x40>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 f931 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f808 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bdc:	f7ff fdda 	bl	8001794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f93b 	bl	8001e86 <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c28:	f000 f911 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000004 	.word	0x20000004
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	20000008 	.word	0x20000008

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	200002f8 	.word	0x200002f8

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200002f8 	.word	0x200002f8

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff47 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff5c 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffb0 	bl	8001df4 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e16b      	b.n	8002194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 815a 	bne.w	800218e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80b4 	beq.w	800218e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b60      	ldr	r3, [pc, #384]	; (80021ac <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5f      	ldr	r2, [pc, #380]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a5b      	ldr	r2, [pc, #364]	; (80021b0 <HAL_GPIO_Init+0x310>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x314>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_Init+0x318>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_Init+0x31c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x320>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x328>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20a>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00e      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020aa:	2308      	movs	r3, #8
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x310>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x334>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae90 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021c00 	.word	0x40021c00
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021f0:	2301      	movs	r3, #1
 80021f2:	73fb      	strb	r3, [r7, #15]
 80021f4:	e001      	b.n	80021fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	807b      	strh	r3, [r7, #2]
 8002214:	4613      	mov	r3, r2
 8002216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002218:	787b      	ldrb	r3, [r7, #1]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002224:	e003      	b.n	800222e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e12b      	b.n	80024a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d106      	bne.n	8002268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff fabe 	bl	80017e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2224      	movs	r2, #36	; 0x24
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800229e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a0:	f001 f9b6 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80022a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a81      	ldr	r2, [pc, #516]	; (80024b0 <HAL_I2C_Init+0x274>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d807      	bhi.n	80022c0 <HAL_I2C_Init+0x84>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a80      	ldr	r2, [pc, #512]	; (80024b4 <HAL_I2C_Init+0x278>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e006      	b.n	80022ce <HAL_I2C_Init+0x92>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a7d      	ldr	r2, [pc, #500]	; (80024b8 <HAL_I2C_Init+0x27c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0e7      	b.n	80024a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a78      	ldr	r2, [pc, #480]	; (80024bc <HAL_I2C_Init+0x280>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <HAL_I2C_Init+0x274>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d802      	bhi.n	8002310 <HAL_I2C_Init+0xd4>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3301      	adds	r3, #1
 800230e:	e009      	b.n	8002324 <HAL_I2C_Init+0xe8>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	4a69      	ldr	r2, [pc, #420]	; (80024c0 <HAL_I2C_Init+0x284>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	3301      	adds	r3, #1
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	495c      	ldr	r1, [pc, #368]	; (80024b0 <HAL_I2C_Init+0x274>)
 8002340:	428b      	cmp	r3, r1
 8002342:	d819      	bhi.n	8002378 <HAL_I2C_Init+0x13c>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e59      	subs	r1, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002352:	1c59      	adds	r1, r3, #1
 8002354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002358:	400b      	ands	r3, r1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <HAL_I2C_Init+0x138>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1e59      	subs	r1, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fbb1 f3f3 	udiv	r3, r1, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002372:	e051      	b.n	8002418 <HAL_I2C_Init+0x1dc>
 8002374:	2304      	movs	r3, #4
 8002376:	e04f      	b.n	8002418 <HAL_I2C_Init+0x1dc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d111      	bne.n	80023a4 <HAL_I2C_Init+0x168>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	440b      	add	r3, r1
 800238e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002392:	3301      	adds	r3, #1
 8002394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e012      	b.n	80023ca <HAL_I2C_Init+0x18e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	0099      	lsls	r1, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	bf0c      	ite	eq
 80023c4:	2301      	moveq	r3, #1
 80023c6:	2300      	movne	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Init+0x196>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e022      	b.n	8002418 <HAL_I2C_Init+0x1dc>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10e      	bne.n	80023f8 <HAL_I2C_Init+0x1bc>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1e58      	subs	r0, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	440b      	add	r3, r1
 80023e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ec:	3301      	adds	r3, #1
 80023ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f6:	e00f      	b.n	8002418 <HAL_I2C_Init+0x1dc>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e58      	subs	r0, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	0099      	lsls	r1, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	6809      	ldr	r1, [r1, #0]
 800241c:	4313      	orrs	r3, r2
 800241e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6911      	ldr	r1, [r2, #16]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68d2      	ldr	r2, [r2, #12]
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	430b      	orrs	r3, r1
 800245a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695a      	ldr	r2, [r3, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2220      	movs	r2, #32
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	000186a0 	.word	0x000186a0
 80024b4:	001e847f 	.word	0x001e847f
 80024b8:	003d08ff 	.word	0x003d08ff
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	10624dd3 	.word	0x10624dd3

080024c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	461a      	mov	r2, r3
 80024d0:	460b      	mov	r3, r1
 80024d2:	817b      	strh	r3, [r7, #10]
 80024d4:	4613      	mov	r3, r2
 80024d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fbcc 	bl	8001c74 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	f040 80e0 	bne.w	80026ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2319      	movs	r3, #25
 80024f2:	2201      	movs	r2, #1
 80024f4:	4970      	ldr	r1, [pc, #448]	; (80026b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fa92 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
 8002504:	e0d3      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2C_Master_Transmit+0x50>
 8002510:	2302      	movs	r3, #2
 8002512:	e0cc      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b01      	cmp	r3, #1
 8002528:	d007      	beq.n	800253a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002548:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2221      	movs	r2, #33	; 0x21
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2210      	movs	r2, #16
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	893a      	ldrh	r2, [r7, #8]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a50      	ldr	r2, [pc, #320]	; (80026bc <HAL_I2C_Master_Transmit+0x1f8>)
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800257c:	8979      	ldrh	r1, [r7, #10]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f9ca 	bl	800291c <I2C_MasterRequestWrite>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e08d      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025a8:	e066      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	6a39      	ldr	r1, [r7, #32]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fb0c 	bl	8002bcc <I2C_WaitOnTXEFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06b      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d11b      	bne.n	800264c <HAL_I2C_Master_Transmit+0x188>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	6a39      	ldr	r1, [r7, #32]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 fafc 	bl	8002c4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00d      	beq.n	8002678 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2b04      	cmp	r3, #4
 8002662:	d107      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002672:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e01a      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d194      	bne.n	80025aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	00100002 	.word	0x00100002
 80026bc:	ffff0000 	.word	0xffff0000

080026c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	460b      	mov	r3, r1
 80026ce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fad0 	bl	8001c74 <HAL_GetTick>
 80026d4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	f040 8111 	bne.w	800290a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2319      	movs	r3, #25
 80026ee:	2201      	movs	r2, #1
 80026f0:	4988      	ldr	r1, [pc, #544]	; (8002914 <HAL_I2C_IsDeviceReady+0x254>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f994 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	e104      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2C_IsDeviceReady+0x50>
 800270c:	2302      	movs	r3, #2
 800270e:	e0fd      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d007      	beq.n	8002736 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002744:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2224      	movs	r2, #36	; 0x24
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a70      	ldr	r2, [pc, #448]	; (8002918 <HAL_I2C_IsDeviceReady+0x258>)
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002768:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f952 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002790:	d103      	bne.n	800279a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0b6      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800279e:	897b      	ldrh	r3, [r7, #10]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027ac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff fa61 	bl	8001c74 <HAL_GetTick>
 80027b2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027e2:	e025      	b.n	8002830 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027e4:	f7ff fa46 	bl	8001c74 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <HAL_I2C_IsDeviceReady+0x13a>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	22a0      	movs	r2, #160	; 0xa0
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2ba0      	cmp	r3, #160	; 0xa0
 800283a:	d005      	beq.n	8002848 <HAL_I2C_IsDeviceReady+0x188>
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <HAL_I2C_IsDeviceReady+0x188>
 8002842:	7dbb      	ldrb	r3, [r7, #22]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0cd      	beq.n	80027e4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d129      	bne.n	80028b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2319      	movs	r3, #25
 800288a:	2201      	movs	r2, #1
 800288c:	4921      	ldr	r1, [pc, #132]	; (8002914 <HAL_I2C_IsDeviceReady+0x254>)
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f8c6 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e036      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e02c      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2319      	movs	r3, #25
 80028d2:	2201      	movs	r2, #1
 80028d4:	490f      	ldr	r1, [pc, #60]	; (8002914 <HAL_I2C_IsDeviceReady+0x254>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8a2 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e012      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f4ff af32 	bcc.w	800275a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	00100002 	.word	0x00100002
 8002918:	ffff0000 	.word	0xffff0000

0800291c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d006      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d003      	beq.n	8002946 <I2C_MasterRequestWrite+0x2a>
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002944:	d108      	bne.n	8002958 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00b      	b.n	8002970 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	2b12      	cmp	r3, #18
 800295e:	d107      	bne.n	8002970 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f84f 	bl	8002a20 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e035      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d108      	bne.n	80029c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	e01b      	b.n	80029f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029c0:	897b      	ldrh	r3, [r7, #10]
 80029c2:	11db      	asrs	r3, r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0306 	and.w	r3, r3, #6
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 030f 	orn	r3, r3, #15
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <I2C_MasterRequestWrite+0xfc>)
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f875 	bl	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e010      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <I2C_MasterRequestWrite+0x100>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f865 	bl	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	00010008 	.word	0x00010008
 8002a1c:	00010002 	.word	0x00010002

08002a20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a30:	e025      	b.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a38:	d021      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff f91b 	bl	8001c74 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d116      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0220 	orr.w	r2, r3, #32
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e023      	b.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10d      	bne.n	8002aa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	e00c      	b.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2301      	moveq	r3, #1
 8002ab8:	2300      	movne	r3, #0
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d0b6      	beq.n	8002a32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002adc:	e051      	b.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aec:	d123      	bne.n	8002b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e046      	b.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b3c:	d021      	beq.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3e:	f7ff f899 	bl	8001c74 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d116      	bne.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e020      	b.n	8002bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10c      	bne.n	8002ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	bf14      	ite	ne
 8002b9e:	2301      	movne	r3, #1
 8002ba0:	2300      	moveq	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	e00b      	b.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf14      	ite	ne
 8002bb8:	2301      	movne	r3, #1
 8002bba:	2300      	moveq	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d18d      	bne.n	8002ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bd8:	e02d      	b.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f878 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e02d      	b.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf0:	d021      	beq.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7ff f83f 	bl	8001c74 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d116      	bne.n	8002c36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0220 	orr.w	r2, r3, #32
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e007      	b.n	8002c46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d1ca      	bne.n	8002bda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c5a:	e02d      	b.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f837 	bl	8002cd0 <I2C_IsAcknowledgeFailed>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e02d      	b.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c72:	d021      	beq.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c74:	f7fe fffe 	bl	8001c74 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d302      	bcc.n	8002c8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d116      	bne.n	8002cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e007      	b.n	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0304 	and.w	r3, r3, #4
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d1ca      	bne.n	8002c5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d11b      	bne.n	8002d20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e267      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d075      	beq.n	8002e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4e:	4b88      	ldr	r3, [pc, #544]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d00c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5a:	4b85      	ldr	r3, [pc, #532]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d112      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d72:	d10b      	bne.n	8002d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	4b7e      	ldr	r3, [pc, #504]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05b      	beq.n	8002e38 <HAL_RCC_OscConfig+0x108>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d157      	bne.n	8002e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e242      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d94:	d106      	bne.n	8002da4 <HAL_RCC_OscConfig+0x74>
 8002d96:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a75      	ldr	r2, [pc, #468]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x98>
 8002dae:	4b70      	ldr	r3, [pc, #448]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a6f      	ldr	r2, [pc, #444]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6c      	ldr	r2, [pc, #432]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xb0>
 8002dc8:	4b69      	ldr	r3, [pc, #420]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a68      	ldr	r2, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b66      	ldr	r3, [pc, #408]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe ff44 	bl	8001c74 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe ff40 	bl	8001c74 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e207      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xc0>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe ff30 	bl	8001c74 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe ff2c 	bl	8001c74 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1f3      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0xe8>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e46:	4b4a      	ldr	r3, [pc, #296]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e52:	4b47      	ldr	r3, [pc, #284]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5e:	4b44      	ldr	r3, [pc, #272]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1c7      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3b      	ldr	r3, [pc, #236]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4937      	ldr	r1, [pc, #220]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fee5 	bl	8001c74 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fee1 	bl	8001c74 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1a8      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4925      	ldr	r1, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x244>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fec4 	bl	8001c74 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fec0 	bl	8001c74 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e187      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d036      	beq.n	8002f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe fea4 	bl	8001c74 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe fea0 	bl	8001c74 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e167      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x240>)
 8002f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x200>
 8002f4e:	e01b      	b.n	8002f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_RCC_OscConfig+0x248>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fe8d 	bl	8001c74 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	e00e      	b.n	8002f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5e:	f7fe fe89 	bl	8001c74 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d907      	bls.n	8002f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e150      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 8002f70:	40023800 	.word	0x40023800
 8002f74:	42470000 	.word	0x42470000
 8002f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7c:	4b88      	ldr	r3, [pc, #544]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1ea      	bne.n	8002f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 8097 	beq.w	80030c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b81      	ldr	r3, [pc, #516]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	4b7d      	ldr	r3, [pc, #500]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a7c      	ldr	r2, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc6:	4b77      	ldr	r3, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd2:	4b74      	ldr	r3, [pc, #464]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a73      	ldr	r2, [pc, #460]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fe fe49 	bl	8001c74 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7fe fe45 	bl	8001c74 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e10c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x474>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x2ea>
 800300c:	4b64      	ldr	r3, [pc, #400]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a63      	ldr	r2, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e01c      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x30c>
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a5e      	ldr	r2, [pc, #376]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b5c      	ldr	r3, [pc, #368]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a5b      	ldr	r2, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x324>
 800303c:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	; 0x70
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d015      	beq.n	8003088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fe0a 	bl	8001c74 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fe06 	bl	8001c74 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0cb      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0ee      	beq.n	8003064 <HAL_RCC_OscConfig+0x334>
 8003086:	e014      	b.n	80030b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe fdf4 	bl	8001c74 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fdf0 	bl	8001c74 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0b5      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a6:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ee      	bne.n	8003090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80a1 	beq.w	8003210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d05c      	beq.n	8003194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d141      	bne.n	8003166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fdc4 	bl	8001c74 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fdc0 	bl	8001c74 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e087      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	019b      	lsls	r3, r3, #6
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	3b01      	subs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	061b      	lsls	r3, r3, #24
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fd99 	bl	8001c74 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe fd95 	bl	8001c74 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e05c      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f0      	beq.n	8003146 <HAL_RCC_OscConfig+0x416>
 8003164:	e054      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_RCC_OscConfig+0x478>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fd82 	bl	8001c74 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003174:	f7fe fd7e 	bl	8001c74 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e045      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x470>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x444>
 8003192:	e03d      	b.n	8003210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d107      	bne.n	80031ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e038      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40007000 	.word	0x40007000
 80031a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x4ec>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d028      	beq.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d121      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d11a      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031dc:	4013      	ands	r3, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d111      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0cc      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b68      	ldr	r3, [pc, #416]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d90c      	bls.n	800325c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b65      	ldr	r3, [pc, #404]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b63      	ldr	r3, [pc, #396]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0b8      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d020      	beq.n	80032aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003274:	4b59      	ldr	r3, [pc, #356]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	494d      	ldr	r1, [pc, #308]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d044      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	4b47      	ldr	r3, [pc, #284]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d119      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e07f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d003      	beq.n	80032de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e067      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4934      	ldr	r1, [pc, #208]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7fe fcb0 	bl	8001c74 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fe fcac 	bl	8001c74 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e04f      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b25      	ldr	r3, [pc, #148]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20c      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d001      	beq.n	8003368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e032      	b.n	80033ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4916      	ldr	r1, [pc, #88]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	490e      	ldr	r1, [pc, #56]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a6:	f000 f821 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033aa:	4602      	mov	r2, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	5ccb      	ldrb	r3, [r1, r3]
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe fc10 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08008b7c 	.word	0x08008b7c
 80033e4:	20000004 	.word	0x20000004
 80033e8:	20000008 	.word	0x20000008

080033ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b094      	sub	sp, #80	; 0x50
 80033f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
 80033f8:	2300      	movs	r3, #0
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033fc:	2300      	movs	r3, #0
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d00d      	beq.n	800342c <HAL_RCC_GetSysClockFreq+0x40>
 8003410:	2b08      	cmp	r3, #8
 8003412:	f200 80e1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x34>
 800341a:	2b04      	cmp	r3, #4
 800341c:	d003      	beq.n	8003426 <HAL_RCC_GetSysClockFreq+0x3a>
 800341e:	e0db      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003424:	e0db      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800342a:	e0d8      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	2200      	movs	r2, #0
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
 800344c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
 800345a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	6139      	str	r1, [r7, #16]
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003490:	4659      	mov	r1, fp
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4651      	mov	r1, sl
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	4651      	mov	r1, sl
 80034a0:	ebb2 0801 	subs.w	r8, r2, r1
 80034a4:	4659      	mov	r1, fp
 80034a6:	eb63 0901 	sbc.w	r9, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034be:	4690      	mov	r8, r2
 80034c0:	4699      	mov	r9, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb18 0303 	adds.w	r3, r8, r3
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	462b      	mov	r3, r5
 80034cc:	eb49 0303 	adc.w	r3, r9, r3
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034de:	4629      	mov	r1, r5
 80034e0:	024b      	lsls	r3, r1, #9
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e8:	4621      	mov	r1, r4
 80034ea:	024a      	lsls	r2, r1, #9
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	2200      	movs	r2, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034fc:	f7fd fbc4 	bl	8000c88 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003508:	e058      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	4618      	mov	r0, r3
 8003514:	4611      	mov	r1, r2
 8003516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800351a:	623b      	str	r3, [r7, #32]
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003524:	4642      	mov	r2, r8
 8003526:	464b      	mov	r3, r9
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003536:	0150      	lsls	r0, r2, #5
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4641      	mov	r1, r8
 800353e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003542:	4649      	mov	r1, r9
 8003544:	eb63 0b01 	sbc.w	fp, r3, r1
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800355c:	ebb2 040a 	subs.w	r4, r2, sl
 8003560:	eb63 050b 	sbc.w	r5, r3, fp
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	00eb      	lsls	r3, r5, #3
 800356e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003572:	00e2      	lsls	r2, r4, #3
 8003574:	4614      	mov	r4, r2
 8003576:	461d      	mov	r5, r3
 8003578:	4643      	mov	r3, r8
 800357a:	18e3      	adds	r3, r4, r3
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	464b      	mov	r3, r9
 8003580:	eb45 0303 	adc.w	r3, r5, r3
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359c:	4621      	mov	r1, r4
 800359e:	028a      	lsls	r2, r1, #10
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a6:	2200      	movs	r2, #0
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	61fa      	str	r2, [r7, #28]
 80035ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b0:	f7fd fb6a 	bl	8000c88 <__aeabi_uldivmod>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4613      	mov	r3, r2
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_GetSysClockFreq+0x200>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0c1b      	lsrs	r3, r3, #16
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	3301      	adds	r3, #1
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d6:	e002      	b.n	80035de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3750      	adds	r7, #80	; 0x50
 80035e4:	46bd      	mov	sp, r7
 80035e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	007a1200 	.word	0x007a1200

080035f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000004 	.word	0x20000004

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08008b8c 	.word	0x08008b8c

08003638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e041      	b.n	80036ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f908 	bl	8001874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	4619      	mov	r1, r3
 8003676:	4610      	mov	r0, r2
 8003678:	f000 fad8 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e041      	b.n	800376c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f839 	bl	8003774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2202      	movs	r2, #2
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	4619      	mov	r1, r3
 8003714:	4610      	mov	r0, r2
 8003716:	f000 fa89 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07c      	b.n	80038f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fce0 	bl	8004200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_PWM_Start+0xcc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <HAL_TIM_PWM_Start+0x178>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Start+0xd0>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_TIM_PWM_Start+0xd2>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d01d      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_TIM_PWM_Start+0x17c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_TIM_PWM_Start+0x180>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_TIM_PWM_Start+0x184>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_PWM_Start+0x178>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_PWM_Start+0x188>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIM_PWM_Start+0x18c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d010      	beq.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010000 	.word	0x40010000
 8003900:	40010400 	.word	0x40010400
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003932:	2302      	movs	r3, #2
 8003934:	e0ae      	b.n	8003a94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b0c      	cmp	r3, #12
 8003942:	f200 809f 	bhi.w	8003a84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003981 	.word	0x08003981
 8003950:	08003a85 	.word	0x08003a85
 8003954:	08003a85 	.word	0x08003a85
 8003958:	08003a85 	.word	0x08003a85
 800395c:	080039c1 	.word	0x080039c1
 8003960:	08003a85 	.word	0x08003a85
 8003964:	08003a85 	.word	0x08003a85
 8003968:	08003a85 	.word	0x08003a85
 800396c:	08003a03 	.word	0x08003a03
 8003970:	08003a85 	.word	0x08003a85
 8003974:	08003a85 	.word	0x08003a85
 8003978:	08003a85 	.word	0x08003a85
 800397c:	08003a43 	.word	0x08003a43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f9f0 	bl	8003d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0208 	orr.w	r2, r2, #8
 800399a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6999      	ldr	r1, [r3, #24]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
      break;
 80039be:	e064      	b.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fa40 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6999      	ldr	r1, [r3, #24]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	021a      	lsls	r2, r3, #8
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	619a      	str	r2, [r3, #24]
      break;
 8003a00:	e043      	b.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fa95 	bl	8003f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0208 	orr.w	r2, r2, #8
 8003a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69da      	ldr	r2, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0204 	bic.w	r2, r2, #4
 8003a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69d9      	ldr	r1, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	61da      	str	r2, [r3, #28]
      break;
 8003a40:	e023      	b.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fae9 	bl	8004020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69da      	ldr	r2, [r3, #28]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	61da      	str	r2, [r3, #28]
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	75fb      	strb	r3, [r7, #23]
      break;
 8003a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d101      	bne.n	8003ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	e0b4      	b.n	8003c22 <HAL_TIM_ConfigClockSource+0x186>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af0:	d03e      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xd4>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af6:	f200 8087 	bhi.w	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afe:	f000 8086 	beq.w	8003c0e <HAL_TIM_ConfigClockSource+0x172>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	d87f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d01a      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0xa6>
 8003b0c:	2b70      	cmp	r3, #112	; 0x70
 8003b0e:	d87b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d050      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x11a>
 8003b14:	2b60      	cmp	r3, #96	; 0x60
 8003b16:	d877      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d03c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xfa>
 8003b1c:	2b50      	cmp	r3, #80	; 0x50
 8003b1e:	d873      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d058      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d86f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d064      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d86b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d060      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d867      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d05a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	e062      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f000 fb35 	bl	80041c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
      break;
 8003b6e:	e04f      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f000 fb1e 	bl	80041c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e03c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 fa92 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2150      	movs	r1, #80	; 0x50
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 faeb 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e02c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 fab1 	bl	800412a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2160      	movs	r1, #96	; 0x60
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fadb 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e01c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 fa72 	bl	80040cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 facb 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 fac2 	bl	800418a <TIM_ITRx_SetConfig>
      break;
 8003c06:	e003      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8c:	d027      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	; (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d023      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_Base_SetConfig+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d017      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <TIM_Base_SetConfig+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	; (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00f      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	; (8003d5c <TIM_Base_SetConfig+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <TIM_Base_SetConfig+0x134>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <TIM_Base_SetConfig+0x138>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <TIM_Base_SetConfig+0x13c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <TIM_Base_SetConfig+0x114>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <TIM_Base_SetConfig+0x124>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800
 8003d60:	40001800 	.word	0x40001800
 8003d64:	40001c00 	.word	0x40001c00
 8003d68:	40002000 	.word	0x40002000

08003d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f023 0201 	bic.w	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 0302 	bic.w	r3, r3, #2
 8003db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC1_SetConfig+0x64>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a1f      	ldr	r2, [pc, #124]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10c      	bne.n	8003dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0308 	bic.w	r3, r3, #8
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 0304 	bic.w	r3, r3, #4
 8003de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a15      	ldr	r2, [pc, #84]	; (8003e44 <TIM_OC1_SetConfig+0xd8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_OC1_SetConfig+0x8e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <TIM_OC1_SetConfig+0xdc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d111      	bne.n	8003e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	621a      	str	r2, [r3, #32]
}
 8003e38:	bf00      	nop
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40010400 	.word	0x40010400

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0320 	bic.w	r3, r3, #32
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_OC2_SetConfig+0x68>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10d      	bne.n	8003ed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ece:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <TIM_OC2_SetConfig+0xe4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0x94>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <TIM_OC2_SetConfig+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000
 8003f34:	40010400 	.word	0x40010400

08003f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_OC3_SetConfig+0x66>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <TIM_OC3_SetConfig+0xe4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10d      	bne.n	8003fba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a16      	ldr	r2, [pc, #88]	; (8004018 <TIM_OC3_SetConfig+0xe0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC3_SetConfig+0x92>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a15      	ldr	r2, [pc, #84]	; (800401c <TIM_OC3_SetConfig+0xe4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d113      	bne.n	8003ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000
 800401c:	40010400 	.word	0x40010400

08004020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	031b      	lsls	r3, r3, #12
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <TIM_OC4_SetConfig+0xa4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC4_SetConfig+0x68>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <TIM_OC4_SetConfig+0xa8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400

080040cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f023 030a 	bic.w	r3, r3, #10
 8004108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412a:	b480      	push	{r7}
 800412c:	b087      	sub	sp, #28
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0210 	bic.w	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800418a:	b480      	push	{r7}
 800418c:	b085      	sub	sp, #20
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f043 0307 	orr.w	r3, r3, #7
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	021a      	lsls	r2, r3, #8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2201      	movs	r2, #1
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
}
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004260:	2302      	movs	r3, #2
 8004262:	e05a      	b.n	800431a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b0:	d01d      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a15      	ldr	r2, [pc, #84]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10c      	bne.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40010400 	.word	0x40010400
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <__cvt>:
 8004344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	ec55 4b10 	vmov	r4, r5, d0
 800434c:	2d00      	cmp	r5, #0
 800434e:	460e      	mov	r6, r1
 8004350:	4619      	mov	r1, r3
 8004352:	462b      	mov	r3, r5
 8004354:	bfbb      	ittet	lt
 8004356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800435a:	461d      	movlt	r5, r3
 800435c:	2300      	movge	r3, #0
 800435e:	232d      	movlt	r3, #45	; 0x2d
 8004360:	700b      	strb	r3, [r1, #0]
 8004362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004368:	4691      	mov	r9, r2
 800436a:	f023 0820 	bic.w	r8, r3, #32
 800436e:	bfbc      	itt	lt
 8004370:	4622      	movlt	r2, r4
 8004372:	4614      	movlt	r4, r2
 8004374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004378:	d005      	beq.n	8004386 <__cvt+0x42>
 800437a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800437e:	d100      	bne.n	8004382 <__cvt+0x3e>
 8004380:	3601      	adds	r6, #1
 8004382:	2102      	movs	r1, #2
 8004384:	e000      	b.n	8004388 <__cvt+0x44>
 8004386:	2103      	movs	r1, #3
 8004388:	ab03      	add	r3, sp, #12
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	ab02      	add	r3, sp, #8
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	ec45 4b10 	vmov	d0, r4, r5
 8004394:	4653      	mov	r3, sl
 8004396:	4632      	mov	r2, r6
 8004398:	f001 f89e 	bl	80054d8 <_dtoa_r>
 800439c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a0:	4607      	mov	r7, r0
 80043a2:	d102      	bne.n	80043aa <__cvt+0x66>
 80043a4:	f019 0f01 	tst.w	r9, #1
 80043a8:	d022      	beq.n	80043f0 <__cvt+0xac>
 80043aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043ae:	eb07 0906 	add.w	r9, r7, r6
 80043b2:	d110      	bne.n	80043d6 <__cvt+0x92>
 80043b4:	783b      	ldrb	r3, [r7, #0]
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	d10a      	bne.n	80043d0 <__cvt+0x8c>
 80043ba:	2200      	movs	r2, #0
 80043bc:	2300      	movs	r3, #0
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fc fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80043c6:	b918      	cbnz	r0, 80043d0 <__cvt+0x8c>
 80043c8:	f1c6 0601 	rsb	r6, r6, #1
 80043cc:	f8ca 6000 	str.w	r6, [sl]
 80043d0:	f8da 3000 	ldr.w	r3, [sl]
 80043d4:	4499      	add	r9, r3
 80043d6:	2200      	movs	r2, #0
 80043d8:	2300      	movs	r3, #0
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fc fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80043e2:	b108      	cbz	r0, 80043e8 <__cvt+0xa4>
 80043e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80043e8:	2230      	movs	r2, #48	; 0x30
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	454b      	cmp	r3, r9
 80043ee:	d307      	bcc.n	8004400 <__cvt+0xbc>
 80043f0:	9b03      	ldr	r3, [sp, #12]
 80043f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043f4:	1bdb      	subs	r3, r3, r7
 80043f6:	4638      	mov	r0, r7
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	b004      	add	sp, #16
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	1c59      	adds	r1, r3, #1
 8004402:	9103      	str	r1, [sp, #12]
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e7f0      	b.n	80043ea <__cvt+0xa6>

08004408 <__exponent>:
 8004408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440a:	4603      	mov	r3, r0
 800440c:	2900      	cmp	r1, #0
 800440e:	bfb8      	it	lt
 8004410:	4249      	neglt	r1, r1
 8004412:	f803 2b02 	strb.w	r2, [r3], #2
 8004416:	bfb4      	ite	lt
 8004418:	222d      	movlt	r2, #45	; 0x2d
 800441a:	222b      	movge	r2, #43	; 0x2b
 800441c:	2909      	cmp	r1, #9
 800441e:	7042      	strb	r2, [r0, #1]
 8004420:	dd2a      	ble.n	8004478 <__exponent+0x70>
 8004422:	f10d 0207 	add.w	r2, sp, #7
 8004426:	4617      	mov	r7, r2
 8004428:	260a      	movs	r6, #10
 800442a:	4694      	mov	ip, r2
 800442c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004430:	fb06 1415 	mls	r4, r6, r5, r1
 8004434:	3430      	adds	r4, #48	; 0x30
 8004436:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800443a:	460c      	mov	r4, r1
 800443c:	2c63      	cmp	r4, #99	; 0x63
 800443e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004442:	4629      	mov	r1, r5
 8004444:	dcf1      	bgt.n	800442a <__exponent+0x22>
 8004446:	3130      	adds	r1, #48	; 0x30
 8004448:	f1ac 0402 	sub.w	r4, ip, #2
 800444c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004450:	1c41      	adds	r1, r0, #1
 8004452:	4622      	mov	r2, r4
 8004454:	42ba      	cmp	r2, r7
 8004456:	d30a      	bcc.n	800446e <__exponent+0x66>
 8004458:	f10d 0209 	add.w	r2, sp, #9
 800445c:	eba2 020c 	sub.w	r2, r2, ip
 8004460:	42bc      	cmp	r4, r7
 8004462:	bf88      	it	hi
 8004464:	2200      	movhi	r2, #0
 8004466:	4413      	add	r3, r2
 8004468:	1a18      	subs	r0, r3, r0
 800446a:	b003      	add	sp, #12
 800446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004472:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004476:	e7ed      	b.n	8004454 <__exponent+0x4c>
 8004478:	2330      	movs	r3, #48	; 0x30
 800447a:	3130      	adds	r1, #48	; 0x30
 800447c:	7083      	strb	r3, [r0, #2]
 800447e:	70c1      	strb	r1, [r0, #3]
 8004480:	1d03      	adds	r3, r0, #4
 8004482:	e7f1      	b.n	8004468 <__exponent+0x60>

08004484 <_printf_float>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	ed2d 8b02 	vpush	{d8}
 800448c:	b08d      	sub	sp, #52	; 0x34
 800448e:	460c      	mov	r4, r1
 8004490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004494:	4616      	mov	r6, r2
 8004496:	461f      	mov	r7, r3
 8004498:	4605      	mov	r5, r0
 800449a:	f000 ff17 	bl	80052cc <_localeconv_r>
 800449e:	f8d0 a000 	ldr.w	sl, [r0]
 80044a2:	4650      	mov	r0, sl
 80044a4:	f7fb fee4 	bl	8000270 <strlen>
 80044a8:	2300      	movs	r3, #0
 80044aa:	930a      	str	r3, [sp, #40]	; 0x28
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	f8d8 3000 	ldr.w	r3, [r8]
 80044b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80044b8:	3307      	adds	r3, #7
 80044ba:	f023 0307 	bic.w	r3, r3, #7
 80044be:	f103 0208 	add.w	r2, r3, #8
 80044c2:	f8c8 2000 	str.w	r2, [r8]
 80044c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80044ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80044ce:	9307      	str	r3, [sp, #28]
 80044d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80044d4:	ee08 0a10 	vmov	s16, r0
 80044d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80044dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044e0:	4b9e      	ldr	r3, [pc, #632]	; (800475c <_printf_float+0x2d8>)
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e6:	f7fc fb21 	bl	8000b2c <__aeabi_dcmpun>
 80044ea:	bb88      	cbnz	r0, 8004550 <_printf_float+0xcc>
 80044ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044f0:	4b9a      	ldr	r3, [pc, #616]	; (800475c <_printf_float+0x2d8>)
 80044f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044f6:	f7fc fafb 	bl	8000af0 <__aeabi_dcmple>
 80044fa:	bb48      	cbnz	r0, 8004550 <_printf_float+0xcc>
 80044fc:	2200      	movs	r2, #0
 80044fe:	2300      	movs	r3, #0
 8004500:	4640      	mov	r0, r8
 8004502:	4649      	mov	r1, r9
 8004504:	f7fc faea 	bl	8000adc <__aeabi_dcmplt>
 8004508:	b110      	cbz	r0, 8004510 <_printf_float+0x8c>
 800450a:	232d      	movs	r3, #45	; 0x2d
 800450c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004510:	4a93      	ldr	r2, [pc, #588]	; (8004760 <_printf_float+0x2dc>)
 8004512:	4b94      	ldr	r3, [pc, #592]	; (8004764 <_printf_float+0x2e0>)
 8004514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004518:	bf94      	ite	ls
 800451a:	4690      	movls	r8, r2
 800451c:	4698      	movhi	r8, r3
 800451e:	2303      	movs	r3, #3
 8004520:	6123      	str	r3, [r4, #16]
 8004522:	9b05      	ldr	r3, [sp, #20]
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	f04f 0900 	mov.w	r9, #0
 800452e:	9700      	str	r7, [sp, #0]
 8004530:	4633      	mov	r3, r6
 8004532:	aa0b      	add	r2, sp, #44	; 0x2c
 8004534:	4621      	mov	r1, r4
 8004536:	4628      	mov	r0, r5
 8004538:	f000 f9da 	bl	80048f0 <_printf_common>
 800453c:	3001      	adds	r0, #1
 800453e:	f040 8090 	bne.w	8004662 <_printf_float+0x1de>
 8004542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004546:	b00d      	add	sp, #52	; 0x34
 8004548:	ecbd 8b02 	vpop	{d8}
 800454c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	4640      	mov	r0, r8
 8004556:	4649      	mov	r1, r9
 8004558:	f7fc fae8 	bl	8000b2c <__aeabi_dcmpun>
 800455c:	b140      	cbz	r0, 8004570 <_printf_float+0xec>
 800455e:	464b      	mov	r3, r9
 8004560:	2b00      	cmp	r3, #0
 8004562:	bfbc      	itt	lt
 8004564:	232d      	movlt	r3, #45	; 0x2d
 8004566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800456a:	4a7f      	ldr	r2, [pc, #508]	; (8004768 <_printf_float+0x2e4>)
 800456c:	4b7f      	ldr	r3, [pc, #508]	; (800476c <_printf_float+0x2e8>)
 800456e:	e7d1      	b.n	8004514 <_printf_float+0x90>
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004576:	9206      	str	r2, [sp, #24]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	d13f      	bne.n	80045fc <_printf_float+0x178>
 800457c:	2306      	movs	r3, #6
 800457e:	6063      	str	r3, [r4, #4]
 8004580:	9b05      	ldr	r3, [sp, #20]
 8004582:	6861      	ldr	r1, [r4, #4]
 8004584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004588:	2300      	movs	r3, #0
 800458a:	9303      	str	r3, [sp, #12]
 800458c:	ab0a      	add	r3, sp, #40	; 0x28
 800458e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004592:	ab09      	add	r3, sp, #36	; 0x24
 8004594:	ec49 8b10 	vmov	d0, r8, r9
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045a0:	4628      	mov	r0, r5
 80045a2:	f7ff fecf 	bl	8004344 <__cvt>
 80045a6:	9b06      	ldr	r3, [sp, #24]
 80045a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045aa:	2b47      	cmp	r3, #71	; 0x47
 80045ac:	4680      	mov	r8, r0
 80045ae:	d108      	bne.n	80045c2 <_printf_float+0x13e>
 80045b0:	1cc8      	adds	r0, r1, #3
 80045b2:	db02      	blt.n	80045ba <_printf_float+0x136>
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	4299      	cmp	r1, r3
 80045b8:	dd41      	ble.n	800463e <_printf_float+0x1ba>
 80045ba:	f1ab 0302 	sub.w	r3, fp, #2
 80045be:	fa5f fb83 	uxtb.w	fp, r3
 80045c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045c6:	d820      	bhi.n	800460a <_printf_float+0x186>
 80045c8:	3901      	subs	r1, #1
 80045ca:	465a      	mov	r2, fp
 80045cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045d0:	9109      	str	r1, [sp, #36]	; 0x24
 80045d2:	f7ff ff19 	bl	8004408 <__exponent>
 80045d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045d8:	1813      	adds	r3, r2, r0
 80045da:	2a01      	cmp	r2, #1
 80045dc:	4681      	mov	r9, r0
 80045de:	6123      	str	r3, [r4, #16]
 80045e0:	dc02      	bgt.n	80045e8 <_printf_float+0x164>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	d501      	bpl.n	80045ec <_printf_float+0x168>
 80045e8:	3301      	adds	r3, #1
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d09c      	beq.n	800452e <_printf_float+0xaa>
 80045f4:	232d      	movs	r3, #45	; 0x2d
 80045f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fa:	e798      	b.n	800452e <_printf_float+0xaa>
 80045fc:	9a06      	ldr	r2, [sp, #24]
 80045fe:	2a47      	cmp	r2, #71	; 0x47
 8004600:	d1be      	bne.n	8004580 <_printf_float+0xfc>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1bc      	bne.n	8004580 <_printf_float+0xfc>
 8004606:	2301      	movs	r3, #1
 8004608:	e7b9      	b.n	800457e <_printf_float+0xfa>
 800460a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800460e:	d118      	bne.n	8004642 <_printf_float+0x1be>
 8004610:	2900      	cmp	r1, #0
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	dd0b      	ble.n	800462e <_printf_float+0x1aa>
 8004616:	6121      	str	r1, [r4, #16]
 8004618:	b913      	cbnz	r3, 8004620 <_printf_float+0x19c>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	07d0      	lsls	r0, r2, #31
 800461e:	d502      	bpl.n	8004626 <_printf_float+0x1a2>
 8004620:	3301      	adds	r3, #1
 8004622:	440b      	add	r3, r1
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	65a1      	str	r1, [r4, #88]	; 0x58
 8004628:	f04f 0900 	mov.w	r9, #0
 800462c:	e7de      	b.n	80045ec <_printf_float+0x168>
 800462e:	b913      	cbnz	r3, 8004636 <_printf_float+0x1b2>
 8004630:	6822      	ldr	r2, [r4, #0]
 8004632:	07d2      	lsls	r2, r2, #31
 8004634:	d501      	bpl.n	800463a <_printf_float+0x1b6>
 8004636:	3302      	adds	r3, #2
 8004638:	e7f4      	b.n	8004624 <_printf_float+0x1a0>
 800463a:	2301      	movs	r3, #1
 800463c:	e7f2      	b.n	8004624 <_printf_float+0x1a0>
 800463e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004644:	4299      	cmp	r1, r3
 8004646:	db05      	blt.n	8004654 <_printf_float+0x1d0>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	6121      	str	r1, [r4, #16]
 800464c:	07d8      	lsls	r0, r3, #31
 800464e:	d5ea      	bpl.n	8004626 <_printf_float+0x1a2>
 8004650:	1c4b      	adds	r3, r1, #1
 8004652:	e7e7      	b.n	8004624 <_printf_float+0x1a0>
 8004654:	2900      	cmp	r1, #0
 8004656:	bfd4      	ite	le
 8004658:	f1c1 0202 	rsble	r2, r1, #2
 800465c:	2201      	movgt	r2, #1
 800465e:	4413      	add	r3, r2
 8004660:	e7e0      	b.n	8004624 <_printf_float+0x1a0>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	055a      	lsls	r2, r3, #21
 8004666:	d407      	bmi.n	8004678 <_printf_float+0x1f4>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	4642      	mov	r2, r8
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	d12c      	bne.n	80046d0 <_printf_float+0x24c>
 8004676:	e764      	b.n	8004542 <_printf_float+0xbe>
 8004678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800467c:	f240 80e0 	bls.w	8004840 <_printf_float+0x3bc>
 8004680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	f7fc fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800468c:	2800      	cmp	r0, #0
 800468e:	d034      	beq.n	80046fa <_printf_float+0x276>
 8004690:	4a37      	ldr	r2, [pc, #220]	; (8004770 <_printf_float+0x2ec>)
 8004692:	2301      	movs	r3, #1
 8004694:	4631      	mov	r1, r6
 8004696:	4628      	mov	r0, r5
 8004698:	47b8      	blx	r7
 800469a:	3001      	adds	r0, #1
 800469c:	f43f af51 	beq.w	8004542 <_printf_float+0xbe>
 80046a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046a4:	429a      	cmp	r2, r3
 80046a6:	db02      	blt.n	80046ae <_printf_float+0x22a>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07d8      	lsls	r0, r3, #31
 80046ac:	d510      	bpl.n	80046d0 <_printf_float+0x24c>
 80046ae:	ee18 3a10 	vmov	r3, s16
 80046b2:	4652      	mov	r2, sl
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f af41 	beq.w	8004542 <_printf_float+0xbe>
 80046c0:	f04f 0800 	mov.w	r8, #0
 80046c4:	f104 091a 	add.w	r9, r4, #26
 80046c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	4543      	cmp	r3, r8
 80046ce:	dc09      	bgt.n	80046e4 <_printf_float+0x260>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	079b      	lsls	r3, r3, #30
 80046d4:	f100 8107 	bmi.w	80048e6 <_printf_float+0x462>
 80046d8:	68e0      	ldr	r0, [r4, #12]
 80046da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046dc:	4298      	cmp	r0, r3
 80046de:	bfb8      	it	lt
 80046e0:	4618      	movlt	r0, r3
 80046e2:	e730      	b.n	8004546 <_printf_float+0xc2>
 80046e4:	2301      	movs	r3, #1
 80046e6:	464a      	mov	r2, r9
 80046e8:	4631      	mov	r1, r6
 80046ea:	4628      	mov	r0, r5
 80046ec:	47b8      	blx	r7
 80046ee:	3001      	adds	r0, #1
 80046f0:	f43f af27 	beq.w	8004542 <_printf_float+0xbe>
 80046f4:	f108 0801 	add.w	r8, r8, #1
 80046f8:	e7e6      	b.n	80046c8 <_printf_float+0x244>
 80046fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dc39      	bgt.n	8004774 <_printf_float+0x2f0>
 8004700:	4a1b      	ldr	r2, [pc, #108]	; (8004770 <_printf_float+0x2ec>)
 8004702:	2301      	movs	r3, #1
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af19 	beq.w	8004542 <_printf_float+0xbe>
 8004710:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004714:	4313      	orrs	r3, r2
 8004716:	d102      	bne.n	800471e <_printf_float+0x29a>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	07d9      	lsls	r1, r3, #31
 800471c:	d5d8      	bpl.n	80046d0 <_printf_float+0x24c>
 800471e:	ee18 3a10 	vmov	r3, s16
 8004722:	4652      	mov	r2, sl
 8004724:	4631      	mov	r1, r6
 8004726:	4628      	mov	r0, r5
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	f43f af09 	beq.w	8004542 <_printf_float+0xbe>
 8004730:	f04f 0900 	mov.w	r9, #0
 8004734:	f104 0a1a 	add.w	sl, r4, #26
 8004738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473a:	425b      	negs	r3, r3
 800473c:	454b      	cmp	r3, r9
 800473e:	dc01      	bgt.n	8004744 <_printf_float+0x2c0>
 8004740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004742:	e792      	b.n	800466a <_printf_float+0x1e6>
 8004744:	2301      	movs	r3, #1
 8004746:	4652      	mov	r2, sl
 8004748:	4631      	mov	r1, r6
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	f43f aef7 	beq.w	8004542 <_printf_float+0xbe>
 8004754:	f109 0901 	add.w	r9, r9, #1
 8004758:	e7ee      	b.n	8004738 <_printf_float+0x2b4>
 800475a:	bf00      	nop
 800475c:	7fefffff 	.word	0x7fefffff
 8004760:	08008b94 	.word	0x08008b94
 8004764:	08008b98 	.word	0x08008b98
 8004768:	08008b9c 	.word	0x08008b9c
 800476c:	08008ba0 	.word	0x08008ba0
 8004770:	08008ba4 	.word	0x08008ba4
 8004774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004778:	429a      	cmp	r2, r3
 800477a:	bfa8      	it	ge
 800477c:	461a      	movge	r2, r3
 800477e:	2a00      	cmp	r2, #0
 8004780:	4691      	mov	r9, r2
 8004782:	dc37      	bgt.n	80047f4 <_printf_float+0x370>
 8004784:	f04f 0b00 	mov.w	fp, #0
 8004788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800478c:	f104 021a 	add.w	r2, r4, #26
 8004790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004792:	9305      	str	r3, [sp, #20]
 8004794:	eba3 0309 	sub.w	r3, r3, r9
 8004798:	455b      	cmp	r3, fp
 800479a:	dc33      	bgt.n	8004804 <_printf_float+0x380>
 800479c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047a0:	429a      	cmp	r2, r3
 80047a2:	db3b      	blt.n	800481c <_printf_float+0x398>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	07da      	lsls	r2, r3, #31
 80047a8:	d438      	bmi.n	800481c <_printf_float+0x398>
 80047aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80047ae:	eba2 0903 	sub.w	r9, r2, r3
 80047b2:	9b05      	ldr	r3, [sp, #20]
 80047b4:	1ad2      	subs	r2, r2, r3
 80047b6:	4591      	cmp	r9, r2
 80047b8:	bfa8      	it	ge
 80047ba:	4691      	movge	r9, r2
 80047bc:	f1b9 0f00 	cmp.w	r9, #0
 80047c0:	dc35      	bgt.n	800482e <_printf_float+0x3aa>
 80047c2:	f04f 0800 	mov.w	r8, #0
 80047c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047ca:	f104 0a1a 	add.w	sl, r4, #26
 80047ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	eba3 0309 	sub.w	r3, r3, r9
 80047d8:	4543      	cmp	r3, r8
 80047da:	f77f af79 	ble.w	80046d0 <_printf_float+0x24c>
 80047de:	2301      	movs	r3, #1
 80047e0:	4652      	mov	r2, sl
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f aeaa 	beq.w	8004542 <_printf_float+0xbe>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	e7ec      	b.n	80047ce <_printf_float+0x34a>
 80047f4:	4613      	mov	r3, r2
 80047f6:	4631      	mov	r1, r6
 80047f8:	4642      	mov	r2, r8
 80047fa:	4628      	mov	r0, r5
 80047fc:	47b8      	blx	r7
 80047fe:	3001      	adds	r0, #1
 8004800:	d1c0      	bne.n	8004784 <_printf_float+0x300>
 8004802:	e69e      	b.n	8004542 <_printf_float+0xbe>
 8004804:	2301      	movs	r3, #1
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	9205      	str	r2, [sp, #20]
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f ae97 	beq.w	8004542 <_printf_float+0xbe>
 8004814:	9a05      	ldr	r2, [sp, #20]
 8004816:	f10b 0b01 	add.w	fp, fp, #1
 800481a:	e7b9      	b.n	8004790 <_printf_float+0x30c>
 800481c:	ee18 3a10 	vmov	r3, s16
 8004820:	4652      	mov	r2, sl
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	d1be      	bne.n	80047aa <_printf_float+0x326>
 800482c:	e689      	b.n	8004542 <_printf_float+0xbe>
 800482e:	9a05      	ldr	r2, [sp, #20]
 8004830:	464b      	mov	r3, r9
 8004832:	4442      	add	r2, r8
 8004834:	4631      	mov	r1, r6
 8004836:	4628      	mov	r0, r5
 8004838:	47b8      	blx	r7
 800483a:	3001      	adds	r0, #1
 800483c:	d1c1      	bne.n	80047c2 <_printf_float+0x33e>
 800483e:	e680      	b.n	8004542 <_printf_float+0xbe>
 8004840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004842:	2a01      	cmp	r2, #1
 8004844:	dc01      	bgt.n	800484a <_printf_float+0x3c6>
 8004846:	07db      	lsls	r3, r3, #31
 8004848:	d53a      	bpl.n	80048c0 <_printf_float+0x43c>
 800484a:	2301      	movs	r3, #1
 800484c:	4642      	mov	r2, r8
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	f43f ae74 	beq.w	8004542 <_printf_float+0xbe>
 800485a:	ee18 3a10 	vmov	r3, s16
 800485e:	4652      	mov	r2, sl
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	f43f ae6b 	beq.w	8004542 <_printf_float+0xbe>
 800486c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004870:	2200      	movs	r2, #0
 8004872:	2300      	movs	r3, #0
 8004874:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004878:	f7fc f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800487c:	b9d8      	cbnz	r0, 80048b6 <_printf_float+0x432>
 800487e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004882:	f108 0201 	add.w	r2, r8, #1
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	d10e      	bne.n	80048ae <_printf_float+0x42a>
 8004890:	e657      	b.n	8004542 <_printf_float+0xbe>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4631      	mov	r1, r6
 8004898:	4628      	mov	r0, r5
 800489a:	47b8      	blx	r7
 800489c:	3001      	adds	r0, #1
 800489e:	f43f ae50 	beq.w	8004542 <_printf_float+0xbe>
 80048a2:	f108 0801 	add.w	r8, r8, #1
 80048a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048a8:	3b01      	subs	r3, #1
 80048aa:	4543      	cmp	r3, r8
 80048ac:	dcf1      	bgt.n	8004892 <_printf_float+0x40e>
 80048ae:	464b      	mov	r3, r9
 80048b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048b4:	e6da      	b.n	800466c <_printf_float+0x1e8>
 80048b6:	f04f 0800 	mov.w	r8, #0
 80048ba:	f104 0a1a 	add.w	sl, r4, #26
 80048be:	e7f2      	b.n	80048a6 <_printf_float+0x422>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4642      	mov	r2, r8
 80048c4:	e7df      	b.n	8004886 <_printf_float+0x402>
 80048c6:	2301      	movs	r3, #1
 80048c8:	464a      	mov	r2, r9
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	f43f ae36 	beq.w	8004542 <_printf_float+0xbe>
 80048d6:	f108 0801 	add.w	r8, r8, #1
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048de:	1a5b      	subs	r3, r3, r1
 80048e0:	4543      	cmp	r3, r8
 80048e2:	dcf0      	bgt.n	80048c6 <_printf_float+0x442>
 80048e4:	e6f8      	b.n	80046d8 <_printf_float+0x254>
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	f104 0919 	add.w	r9, r4, #25
 80048ee:	e7f4      	b.n	80048da <_printf_float+0x456>

080048f0 <_printf_common>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	4616      	mov	r6, r2
 80048f6:	4699      	mov	r9, r3
 80048f8:	688a      	ldr	r2, [r1, #8]
 80048fa:	690b      	ldr	r3, [r1, #16]
 80048fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004900:	4293      	cmp	r3, r2
 8004902:	bfb8      	it	lt
 8004904:	4613      	movlt	r3, r2
 8004906:	6033      	str	r3, [r6, #0]
 8004908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800490c:	4607      	mov	r7, r0
 800490e:	460c      	mov	r4, r1
 8004910:	b10a      	cbz	r2, 8004916 <_printf_common+0x26>
 8004912:	3301      	adds	r3, #1
 8004914:	6033      	str	r3, [r6, #0]
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	0699      	lsls	r1, r3, #26
 800491a:	bf42      	ittt	mi
 800491c:	6833      	ldrmi	r3, [r6, #0]
 800491e:	3302      	addmi	r3, #2
 8004920:	6033      	strmi	r3, [r6, #0]
 8004922:	6825      	ldr	r5, [r4, #0]
 8004924:	f015 0506 	ands.w	r5, r5, #6
 8004928:	d106      	bne.n	8004938 <_printf_common+0x48>
 800492a:	f104 0a19 	add.w	sl, r4, #25
 800492e:	68e3      	ldr	r3, [r4, #12]
 8004930:	6832      	ldr	r2, [r6, #0]
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	42ab      	cmp	r3, r5
 8004936:	dc26      	bgt.n	8004986 <_printf_common+0x96>
 8004938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800493c:	1e13      	subs	r3, r2, #0
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	bf18      	it	ne
 8004942:	2301      	movne	r3, #1
 8004944:	0692      	lsls	r2, r2, #26
 8004946:	d42b      	bmi.n	80049a0 <_printf_common+0xb0>
 8004948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800494c:	4649      	mov	r1, r9
 800494e:	4638      	mov	r0, r7
 8004950:	47c0      	blx	r8
 8004952:	3001      	adds	r0, #1
 8004954:	d01e      	beq.n	8004994 <_printf_common+0xa4>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	6922      	ldr	r2, [r4, #16]
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	2b04      	cmp	r3, #4
 8004960:	bf02      	ittt	eq
 8004962:	68e5      	ldreq	r5, [r4, #12]
 8004964:	6833      	ldreq	r3, [r6, #0]
 8004966:	1aed      	subeq	r5, r5, r3
 8004968:	68a3      	ldr	r3, [r4, #8]
 800496a:	bf0c      	ite	eq
 800496c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004970:	2500      	movne	r5, #0
 8004972:	4293      	cmp	r3, r2
 8004974:	bfc4      	itt	gt
 8004976:	1a9b      	subgt	r3, r3, r2
 8004978:	18ed      	addgt	r5, r5, r3
 800497a:	2600      	movs	r6, #0
 800497c:	341a      	adds	r4, #26
 800497e:	42b5      	cmp	r5, r6
 8004980:	d11a      	bne.n	80049b8 <_printf_common+0xc8>
 8004982:	2000      	movs	r0, #0
 8004984:	e008      	b.n	8004998 <_printf_common+0xa8>
 8004986:	2301      	movs	r3, #1
 8004988:	4652      	mov	r2, sl
 800498a:	4649      	mov	r1, r9
 800498c:	4638      	mov	r0, r7
 800498e:	47c0      	blx	r8
 8004990:	3001      	adds	r0, #1
 8004992:	d103      	bne.n	800499c <_printf_common+0xac>
 8004994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499c:	3501      	adds	r5, #1
 800499e:	e7c6      	b.n	800492e <_printf_common+0x3e>
 80049a0:	18e1      	adds	r1, r4, r3
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	2030      	movs	r0, #48	; 0x30
 80049a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049aa:	4422      	add	r2, r4
 80049ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b4:	3302      	adds	r3, #2
 80049b6:	e7c7      	b.n	8004948 <_printf_common+0x58>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4622      	mov	r2, r4
 80049bc:	4649      	mov	r1, r9
 80049be:	4638      	mov	r0, r7
 80049c0:	47c0      	blx	r8
 80049c2:	3001      	adds	r0, #1
 80049c4:	d0e6      	beq.n	8004994 <_printf_common+0xa4>
 80049c6:	3601      	adds	r6, #1
 80049c8:	e7d9      	b.n	800497e <_printf_common+0x8e>
	...

080049cc <_printf_i>:
 80049cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d0:	7e0f      	ldrb	r7, [r1, #24]
 80049d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d4:	2f78      	cmp	r7, #120	; 0x78
 80049d6:	4691      	mov	r9, r2
 80049d8:	4680      	mov	r8, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	469a      	mov	sl, r3
 80049de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049e2:	d807      	bhi.n	80049f4 <_printf_i+0x28>
 80049e4:	2f62      	cmp	r7, #98	; 0x62
 80049e6:	d80a      	bhi.n	80049fe <_printf_i+0x32>
 80049e8:	2f00      	cmp	r7, #0
 80049ea:	f000 80d4 	beq.w	8004b96 <_printf_i+0x1ca>
 80049ee:	2f58      	cmp	r7, #88	; 0x58
 80049f0:	f000 80c0 	beq.w	8004b74 <_printf_i+0x1a8>
 80049f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049fc:	e03a      	b.n	8004a74 <_printf_i+0xa8>
 80049fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a02:	2b15      	cmp	r3, #21
 8004a04:	d8f6      	bhi.n	80049f4 <_printf_i+0x28>
 8004a06:	a101      	add	r1, pc, #4	; (adr r1, 8004a0c <_printf_i+0x40>)
 8004a08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a0c:	08004a65 	.word	0x08004a65
 8004a10:	08004a79 	.word	0x08004a79
 8004a14:	080049f5 	.word	0x080049f5
 8004a18:	080049f5 	.word	0x080049f5
 8004a1c:	080049f5 	.word	0x080049f5
 8004a20:	080049f5 	.word	0x080049f5
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	080049f5 	.word	0x080049f5
 8004a2c:	080049f5 	.word	0x080049f5
 8004a30:	080049f5 	.word	0x080049f5
 8004a34:	080049f5 	.word	0x080049f5
 8004a38:	08004b7d 	.word	0x08004b7d
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004b37 	.word	0x08004b37
 8004a44:	080049f5 	.word	0x080049f5
 8004a48:	080049f5 	.word	0x080049f5
 8004a4c:	08004b9f 	.word	0x08004b9f
 8004a50:	080049f5 	.word	0x080049f5
 8004a54:	08004aa5 	.word	0x08004aa5
 8004a58:	080049f5 	.word	0x080049f5
 8004a5c:	080049f5 	.word	0x080049f5
 8004a60:	08004b3f 	.word	0x08004b3f
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	602a      	str	r2, [r5, #0]
 8004a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a74:	2301      	movs	r3, #1
 8004a76:	e09f      	b.n	8004bb8 <_printf_i+0x1ec>
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	0607      	lsls	r7, r0, #24
 8004a7e:	f103 0104 	add.w	r1, r3, #4
 8004a82:	6029      	str	r1, [r5, #0]
 8004a84:	d501      	bpl.n	8004a8a <_printf_i+0xbe>
 8004a86:	681e      	ldr	r6, [r3, #0]
 8004a88:	e003      	b.n	8004a92 <_printf_i+0xc6>
 8004a8a:	0646      	lsls	r6, r0, #25
 8004a8c:	d5fb      	bpl.n	8004a86 <_printf_i+0xba>
 8004a8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	da03      	bge.n	8004a9e <_printf_i+0xd2>
 8004a96:	232d      	movs	r3, #45	; 0x2d
 8004a98:	4276      	negs	r6, r6
 8004a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9e:	485a      	ldr	r0, [pc, #360]	; (8004c08 <_printf_i+0x23c>)
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	e012      	b.n	8004aca <_printf_i+0xfe>
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	1d19      	adds	r1, r3, #4
 8004aaa:	6029      	str	r1, [r5, #0]
 8004aac:	0605      	lsls	r5, r0, #24
 8004aae:	d501      	bpl.n	8004ab4 <_printf_i+0xe8>
 8004ab0:	681e      	ldr	r6, [r3, #0]
 8004ab2:	e002      	b.n	8004aba <_printf_i+0xee>
 8004ab4:	0641      	lsls	r1, r0, #25
 8004ab6:	d5fb      	bpl.n	8004ab0 <_printf_i+0xe4>
 8004ab8:	881e      	ldrh	r6, [r3, #0]
 8004aba:	4853      	ldr	r0, [pc, #332]	; (8004c08 <_printf_i+0x23c>)
 8004abc:	2f6f      	cmp	r7, #111	; 0x6f
 8004abe:	bf0c      	ite	eq
 8004ac0:	2308      	moveq	r3, #8
 8004ac2:	230a      	movne	r3, #10
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aca:	6865      	ldr	r5, [r4, #4]
 8004acc:	60a5      	str	r5, [r4, #8]
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	bfa2      	ittt	ge
 8004ad2:	6821      	ldrge	r1, [r4, #0]
 8004ad4:	f021 0104 	bicge.w	r1, r1, #4
 8004ad8:	6021      	strge	r1, [r4, #0]
 8004ada:	b90e      	cbnz	r6, 8004ae0 <_printf_i+0x114>
 8004adc:	2d00      	cmp	r5, #0
 8004ade:	d04b      	beq.n	8004b78 <_printf_i+0x1ac>
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8004aea:	5dc7      	ldrb	r7, [r0, r7]
 8004aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004af0:	4637      	mov	r7, r6
 8004af2:	42bb      	cmp	r3, r7
 8004af4:	460e      	mov	r6, r1
 8004af6:	d9f4      	bls.n	8004ae2 <_printf_i+0x116>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d10b      	bne.n	8004b14 <_printf_i+0x148>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	07de      	lsls	r6, r3, #31
 8004b00:	d508      	bpl.n	8004b14 <_printf_i+0x148>
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	6861      	ldr	r1, [r4, #4]
 8004b06:	4299      	cmp	r1, r3
 8004b08:	bfde      	ittt	le
 8004b0a:	2330      	movle	r3, #48	; 0x30
 8004b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b14:	1b52      	subs	r2, r2, r5
 8004b16:	6122      	str	r2, [r4, #16]
 8004b18:	f8cd a000 	str.w	sl, [sp]
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	aa03      	add	r2, sp, #12
 8004b20:	4621      	mov	r1, r4
 8004b22:	4640      	mov	r0, r8
 8004b24:	f7ff fee4 	bl	80048f0 <_printf_common>
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d14a      	bne.n	8004bc2 <_printf_i+0x1f6>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b30:	b004      	add	sp, #16
 8004b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	f043 0320 	orr.w	r3, r3, #32
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	4833      	ldr	r0, [pc, #204]	; (8004c0c <_printf_i+0x240>)
 8004b40:	2778      	movs	r7, #120	; 0x78
 8004b42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	6829      	ldr	r1, [r5, #0]
 8004b4a:	061f      	lsls	r7, r3, #24
 8004b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b50:	d402      	bmi.n	8004b58 <_printf_i+0x18c>
 8004b52:	065f      	lsls	r7, r3, #25
 8004b54:	bf48      	it	mi
 8004b56:	b2b6      	uxthmi	r6, r6
 8004b58:	07df      	lsls	r7, r3, #31
 8004b5a:	bf48      	it	mi
 8004b5c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b60:	6029      	str	r1, [r5, #0]
 8004b62:	bf48      	it	mi
 8004b64:	6023      	strmi	r3, [r4, #0]
 8004b66:	b91e      	cbnz	r6, 8004b70 <_printf_i+0x1a4>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f023 0320 	bic.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	2310      	movs	r3, #16
 8004b72:	e7a7      	b.n	8004ac4 <_printf_i+0xf8>
 8004b74:	4824      	ldr	r0, [pc, #144]	; (8004c08 <_printf_i+0x23c>)
 8004b76:	e7e4      	b.n	8004b42 <_printf_i+0x176>
 8004b78:	4615      	mov	r5, r2
 8004b7a:	e7bd      	b.n	8004af8 <_printf_i+0x12c>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	6826      	ldr	r6, [r4, #0]
 8004b80:	6961      	ldr	r1, [r4, #20]
 8004b82:	1d18      	adds	r0, r3, #4
 8004b84:	6028      	str	r0, [r5, #0]
 8004b86:	0635      	lsls	r5, r6, #24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	d501      	bpl.n	8004b90 <_printf_i+0x1c4>
 8004b8c:	6019      	str	r1, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <_printf_i+0x1ca>
 8004b90:	0670      	lsls	r0, r6, #25
 8004b92:	d5fb      	bpl.n	8004b8c <_printf_i+0x1c0>
 8004b94:	8019      	strh	r1, [r3, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	e7bc      	b.n	8004b18 <_printf_i+0x14c>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7fb fb10 	bl	80001d0 <memchr>
 8004bb0:	b108      	cbz	r0, 8004bb6 <_printf_i+0x1ea>
 8004bb2:	1b40      	subs	r0, r0, r5
 8004bb4:	6060      	str	r0, [r4, #4]
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	6123      	str	r3, [r4, #16]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc0:	e7aa      	b.n	8004b18 <_printf_i+0x14c>
 8004bc2:	6923      	ldr	r3, [r4, #16]
 8004bc4:	462a      	mov	r2, r5
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	47d0      	blx	sl
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d0ad      	beq.n	8004b2c <_printf_i+0x160>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	079b      	lsls	r3, r3, #30
 8004bd4:	d413      	bmi.n	8004bfe <_printf_i+0x232>
 8004bd6:	68e0      	ldr	r0, [r4, #12]
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	4298      	cmp	r0, r3
 8004bdc:	bfb8      	it	lt
 8004bde:	4618      	movlt	r0, r3
 8004be0:	e7a6      	b.n	8004b30 <_printf_i+0x164>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4632      	mov	r2, r6
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	47d0      	blx	sl
 8004bec:	3001      	adds	r0, #1
 8004bee:	d09d      	beq.n	8004b2c <_printf_i+0x160>
 8004bf0:	3501      	adds	r5, #1
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dcf2      	bgt.n	8004be2 <_printf_i+0x216>
 8004bfc:	e7eb      	b.n	8004bd6 <_printf_i+0x20a>
 8004bfe:	2500      	movs	r5, #0
 8004c00:	f104 0619 	add.w	r6, r4, #25
 8004c04:	e7f5      	b.n	8004bf2 <_printf_i+0x226>
 8004c06:	bf00      	nop
 8004c08:	08008ba6 	.word	0x08008ba6
 8004c0c:	08008bb7 	.word	0x08008bb7

08004c10 <_scanf_float>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	b087      	sub	sp, #28
 8004c16:	4617      	mov	r7, r2
 8004c18:	9303      	str	r3, [sp, #12]
 8004c1a:	688b      	ldr	r3, [r1, #8]
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c22:	bf83      	ittte	hi
 8004c24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c28:	195b      	addhi	r3, r3, r5
 8004c2a:	9302      	strhi	r3, [sp, #8]
 8004c2c:	2300      	movls	r3, #0
 8004c2e:	bf86      	itte	hi
 8004c30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c34:	608b      	strhi	r3, [r1, #8]
 8004c36:	9302      	strls	r3, [sp, #8]
 8004c38:	680b      	ldr	r3, [r1, #0]
 8004c3a:	468b      	mov	fp, r1
 8004c3c:	2500      	movs	r5, #0
 8004c3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c42:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004c4a:	4680      	mov	r8, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	465e      	mov	r6, fp
 8004c50:	46aa      	mov	sl, r5
 8004c52:	46a9      	mov	r9, r5
 8004c54:	9501      	str	r5, [sp, #4]
 8004c56:	68a2      	ldr	r2, [r4, #8]
 8004c58:	b152      	cbz	r2, 8004c70 <_scanf_float+0x60>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8004c60:	d864      	bhi.n	8004d2c <_scanf_float+0x11c>
 8004c62:	2b40      	cmp	r3, #64	; 0x40
 8004c64:	d83c      	bhi.n	8004ce0 <_scanf_float+0xd0>
 8004c66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004c6a:	b2c8      	uxtb	r0, r1
 8004c6c:	280e      	cmp	r0, #14
 8004c6e:	d93a      	bls.n	8004ce6 <_scanf_float+0xd6>
 8004c70:	f1b9 0f00 	cmp.w	r9, #0
 8004c74:	d003      	beq.n	8004c7e <_scanf_float+0x6e>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c82:	f1ba 0f01 	cmp.w	sl, #1
 8004c86:	f200 8113 	bhi.w	8004eb0 <_scanf_float+0x2a0>
 8004c8a:	455e      	cmp	r6, fp
 8004c8c:	f200 8105 	bhi.w	8004e9a <_scanf_float+0x28a>
 8004c90:	2501      	movs	r5, #1
 8004c92:	4628      	mov	r0, r5
 8004c94:	b007      	add	sp, #28
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c9e:	2a0d      	cmp	r2, #13
 8004ca0:	d8e6      	bhi.n	8004c70 <_scanf_float+0x60>
 8004ca2:	a101      	add	r1, pc, #4	; (adr r1, 8004ca8 <_scanf_float+0x98>)
 8004ca4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ca8:	08004de7 	.word	0x08004de7
 8004cac:	08004c71 	.word	0x08004c71
 8004cb0:	08004c71 	.word	0x08004c71
 8004cb4:	08004c71 	.word	0x08004c71
 8004cb8:	08004e47 	.word	0x08004e47
 8004cbc:	08004e1f 	.word	0x08004e1f
 8004cc0:	08004c71 	.word	0x08004c71
 8004cc4:	08004c71 	.word	0x08004c71
 8004cc8:	08004df5 	.word	0x08004df5
 8004ccc:	08004c71 	.word	0x08004c71
 8004cd0:	08004c71 	.word	0x08004c71
 8004cd4:	08004c71 	.word	0x08004c71
 8004cd8:	08004c71 	.word	0x08004c71
 8004cdc:	08004dad 	.word	0x08004dad
 8004ce0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004ce4:	e7db      	b.n	8004c9e <_scanf_float+0x8e>
 8004ce6:	290e      	cmp	r1, #14
 8004ce8:	d8c2      	bhi.n	8004c70 <_scanf_float+0x60>
 8004cea:	a001      	add	r0, pc, #4	; (adr r0, 8004cf0 <_scanf_float+0xe0>)
 8004cec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004cf0:	08004d9f 	.word	0x08004d9f
 8004cf4:	08004c71 	.word	0x08004c71
 8004cf8:	08004d9f 	.word	0x08004d9f
 8004cfc:	08004e33 	.word	0x08004e33
 8004d00:	08004c71 	.word	0x08004c71
 8004d04:	08004d4d 	.word	0x08004d4d
 8004d08:	08004d89 	.word	0x08004d89
 8004d0c:	08004d89 	.word	0x08004d89
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004d89 	.word	0x08004d89
 8004d18:	08004d89 	.word	0x08004d89
 8004d1c:	08004d89 	.word	0x08004d89
 8004d20:	08004d89 	.word	0x08004d89
 8004d24:	08004d89 	.word	0x08004d89
 8004d28:	08004d89 	.word	0x08004d89
 8004d2c:	2b6e      	cmp	r3, #110	; 0x6e
 8004d2e:	d809      	bhi.n	8004d44 <_scanf_float+0x134>
 8004d30:	2b60      	cmp	r3, #96	; 0x60
 8004d32:	d8b2      	bhi.n	8004c9a <_scanf_float+0x8a>
 8004d34:	2b54      	cmp	r3, #84	; 0x54
 8004d36:	d077      	beq.n	8004e28 <_scanf_float+0x218>
 8004d38:	2b59      	cmp	r3, #89	; 0x59
 8004d3a:	d199      	bne.n	8004c70 <_scanf_float+0x60>
 8004d3c:	2d07      	cmp	r5, #7
 8004d3e:	d197      	bne.n	8004c70 <_scanf_float+0x60>
 8004d40:	2508      	movs	r5, #8
 8004d42:	e029      	b.n	8004d98 <_scanf_float+0x188>
 8004d44:	2b74      	cmp	r3, #116	; 0x74
 8004d46:	d06f      	beq.n	8004e28 <_scanf_float+0x218>
 8004d48:	2b79      	cmp	r3, #121	; 0x79
 8004d4a:	e7f6      	b.n	8004d3a <_scanf_float+0x12a>
 8004d4c:	6821      	ldr	r1, [r4, #0]
 8004d4e:	05c8      	lsls	r0, r1, #23
 8004d50:	d51a      	bpl.n	8004d88 <_scanf_float+0x178>
 8004d52:	9b02      	ldr	r3, [sp, #8]
 8004d54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d58:	6021      	str	r1, [r4, #0]
 8004d5a:	f109 0901 	add.w	r9, r9, #1
 8004d5e:	b11b      	cbz	r3, 8004d68 <_scanf_float+0x158>
 8004d60:	3b01      	subs	r3, #1
 8004d62:	3201      	adds	r2, #1
 8004d64:	9302      	str	r3, [sp, #8]
 8004d66:	60a2      	str	r2, [r4, #8]
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	3301      	adds	r3, #1
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	607b      	str	r3, [r7, #4]
 8004d7c:	f340 8084 	ble.w	8004e88 <_scanf_float+0x278>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	e766      	b.n	8004c56 <_scanf_float+0x46>
 8004d88:	eb1a 0f05 	cmn.w	sl, r5
 8004d8c:	f47f af70 	bne.w	8004c70 <_scanf_float+0x60>
 8004d90:	6822      	ldr	r2, [r4, #0]
 8004d92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d96:	6022      	str	r2, [r4, #0]
 8004d98:	f806 3b01 	strb.w	r3, [r6], #1
 8004d9c:	e7e4      	b.n	8004d68 <_scanf_float+0x158>
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	0610      	lsls	r0, r2, #24
 8004da2:	f57f af65 	bpl.w	8004c70 <_scanf_float+0x60>
 8004da6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004daa:	e7f4      	b.n	8004d96 <_scanf_float+0x186>
 8004dac:	f1ba 0f00 	cmp.w	sl, #0
 8004db0:	d10e      	bne.n	8004dd0 <_scanf_float+0x1c0>
 8004db2:	f1b9 0f00 	cmp.w	r9, #0
 8004db6:	d10e      	bne.n	8004dd6 <_scanf_float+0x1c6>
 8004db8:	6822      	ldr	r2, [r4, #0]
 8004dba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004dbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004dc2:	d108      	bne.n	8004dd6 <_scanf_float+0x1c6>
 8004dc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	f04f 0a01 	mov.w	sl, #1
 8004dce:	e7e3      	b.n	8004d98 <_scanf_float+0x188>
 8004dd0:	f1ba 0f02 	cmp.w	sl, #2
 8004dd4:	d055      	beq.n	8004e82 <_scanf_float+0x272>
 8004dd6:	2d01      	cmp	r5, #1
 8004dd8:	d002      	beq.n	8004de0 <_scanf_float+0x1d0>
 8004dda:	2d04      	cmp	r5, #4
 8004ddc:	f47f af48 	bne.w	8004c70 <_scanf_float+0x60>
 8004de0:	3501      	adds	r5, #1
 8004de2:	b2ed      	uxtb	r5, r5
 8004de4:	e7d8      	b.n	8004d98 <_scanf_float+0x188>
 8004de6:	f1ba 0f01 	cmp.w	sl, #1
 8004dea:	f47f af41 	bne.w	8004c70 <_scanf_float+0x60>
 8004dee:	f04f 0a02 	mov.w	sl, #2
 8004df2:	e7d1      	b.n	8004d98 <_scanf_float+0x188>
 8004df4:	b97d      	cbnz	r5, 8004e16 <_scanf_float+0x206>
 8004df6:	f1b9 0f00 	cmp.w	r9, #0
 8004dfa:	f47f af3c 	bne.w	8004c76 <_scanf_float+0x66>
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e08:	f47f af39 	bne.w	8004c7e <_scanf_float+0x6e>
 8004e0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e10:	6022      	str	r2, [r4, #0]
 8004e12:	2501      	movs	r5, #1
 8004e14:	e7c0      	b.n	8004d98 <_scanf_float+0x188>
 8004e16:	2d03      	cmp	r5, #3
 8004e18:	d0e2      	beq.n	8004de0 <_scanf_float+0x1d0>
 8004e1a:	2d05      	cmp	r5, #5
 8004e1c:	e7de      	b.n	8004ddc <_scanf_float+0x1cc>
 8004e1e:	2d02      	cmp	r5, #2
 8004e20:	f47f af26 	bne.w	8004c70 <_scanf_float+0x60>
 8004e24:	2503      	movs	r5, #3
 8004e26:	e7b7      	b.n	8004d98 <_scanf_float+0x188>
 8004e28:	2d06      	cmp	r5, #6
 8004e2a:	f47f af21 	bne.w	8004c70 <_scanf_float+0x60>
 8004e2e:	2507      	movs	r5, #7
 8004e30:	e7b2      	b.n	8004d98 <_scanf_float+0x188>
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	0591      	lsls	r1, r2, #22
 8004e36:	f57f af1b 	bpl.w	8004c70 <_scanf_float+0x60>
 8004e3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e3e:	6022      	str	r2, [r4, #0]
 8004e40:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e44:	e7a8      	b.n	8004d98 <_scanf_float+0x188>
 8004e46:	6822      	ldr	r2, [r4, #0]
 8004e48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004e4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004e50:	d006      	beq.n	8004e60 <_scanf_float+0x250>
 8004e52:	0550      	lsls	r0, r2, #21
 8004e54:	f57f af0c 	bpl.w	8004c70 <_scanf_float+0x60>
 8004e58:	f1b9 0f00 	cmp.w	r9, #0
 8004e5c:	f43f af0f 	beq.w	8004c7e <_scanf_float+0x6e>
 8004e60:	0591      	lsls	r1, r2, #22
 8004e62:	bf58      	it	pl
 8004e64:	9901      	ldrpl	r1, [sp, #4]
 8004e66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e6a:	bf58      	it	pl
 8004e6c:	eba9 0101 	subpl.w	r1, r9, r1
 8004e70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004e74:	bf58      	it	pl
 8004e76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	f04f 0900 	mov.w	r9, #0
 8004e80:	e78a      	b.n	8004d98 <_scanf_float+0x188>
 8004e82:	f04f 0a03 	mov.w	sl, #3
 8004e86:	e787      	b.n	8004d98 <_scanf_float+0x188>
 8004e88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	4640      	mov	r0, r8
 8004e90:	4798      	blx	r3
 8004e92:	2800      	cmp	r0, #0
 8004e94:	f43f aedf 	beq.w	8004c56 <_scanf_float+0x46>
 8004e98:	e6ea      	b.n	8004c70 <_scanf_float+0x60>
 8004e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4798      	blx	r3
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	e6ec      	b.n	8004c8a <_scanf_float+0x7a>
 8004eb0:	1e6b      	subs	r3, r5, #1
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d825      	bhi.n	8004f02 <_scanf_float+0x2f2>
 8004eb6:	2d02      	cmp	r5, #2
 8004eb8:	d836      	bhi.n	8004f28 <_scanf_float+0x318>
 8004eba:	455e      	cmp	r6, fp
 8004ebc:	f67f aee8 	bls.w	8004c90 <_scanf_float+0x80>
 8004ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ec8:	463a      	mov	r2, r7
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4798      	blx	r3
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	e7f1      	b.n	8004eba <_scanf_float+0x2aa>
 8004ed6:	9802      	ldr	r0, [sp, #8]
 8004ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004edc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004ee0:	9002      	str	r0, [sp, #8]
 8004ee2:	463a      	mov	r2, r7
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	4798      	blx	r3
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ef2:	fa5f fa8a 	uxtb.w	sl, sl
 8004ef6:	f1ba 0f02 	cmp.w	sl, #2
 8004efa:	d1ec      	bne.n	8004ed6 <_scanf_float+0x2c6>
 8004efc:	3d03      	subs	r5, #3
 8004efe:	b2ed      	uxtb	r5, r5
 8004f00:	1b76      	subs	r6, r6, r5
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	05da      	lsls	r2, r3, #23
 8004f06:	d52f      	bpl.n	8004f68 <_scanf_float+0x358>
 8004f08:	055b      	lsls	r3, r3, #21
 8004f0a:	d510      	bpl.n	8004f2e <_scanf_float+0x31e>
 8004f0c:	455e      	cmp	r6, fp
 8004f0e:	f67f aebf 	bls.w	8004c90 <_scanf_float+0x80>
 8004f12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f1a:	463a      	mov	r2, r7
 8004f1c:	4640      	mov	r0, r8
 8004f1e:	4798      	blx	r3
 8004f20:	6923      	ldr	r3, [r4, #16]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	e7f1      	b.n	8004f0c <_scanf_float+0x2fc>
 8004f28:	46aa      	mov	sl, r5
 8004f2a:	9602      	str	r6, [sp, #8]
 8004f2c:	e7df      	b.n	8004eee <_scanf_float+0x2de>
 8004f2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	2965      	cmp	r1, #101	; 0x65
 8004f36:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004f3a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	d00c      	beq.n	8004f5c <_scanf_float+0x34c>
 8004f42:	2945      	cmp	r1, #69	; 0x45
 8004f44:	d00a      	beq.n	8004f5c <_scanf_float+0x34c>
 8004f46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f4a:	463a      	mov	r2, r7
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4798      	blx	r3
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	1eb5      	subs	r5, r6, #2
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f60:	463a      	mov	r2, r7
 8004f62:	4640      	mov	r0, r8
 8004f64:	4798      	blx	r3
 8004f66:	462e      	mov	r6, r5
 8004f68:	6825      	ldr	r5, [r4, #0]
 8004f6a:	f015 0510 	ands.w	r5, r5, #16
 8004f6e:	d158      	bne.n	8005022 <_scanf_float+0x412>
 8004f70:	7035      	strb	r5, [r6, #0]
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7c:	d11c      	bne.n	8004fb8 <_scanf_float+0x3a8>
 8004f7e:	9b01      	ldr	r3, [sp, #4]
 8004f80:	454b      	cmp	r3, r9
 8004f82:	eba3 0209 	sub.w	r2, r3, r9
 8004f86:	d124      	bne.n	8004fd2 <_scanf_float+0x3c2>
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4659      	mov	r1, fp
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	f002 fc4f 	bl	8007830 <_strtod_r>
 8004f92:	9b03      	ldr	r3, [sp, #12]
 8004f94:	6821      	ldr	r1, [r4, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f011 0f02 	tst.w	r1, #2
 8004f9c:	ec57 6b10 	vmov	r6, r7, d0
 8004fa0:	f103 0204 	add.w	r2, r3, #4
 8004fa4:	d020      	beq.n	8004fe8 <_scanf_float+0x3d8>
 8004fa6:	9903      	ldr	r1, [sp, #12]
 8004fa8:	600a      	str	r2, [r1, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	e9c3 6700 	strd	r6, r7, [r3]
 8004fb0:	68e3      	ldr	r3, [r4, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60e3      	str	r3, [r4, #12]
 8004fb6:	e66c      	b.n	8004c92 <_scanf_float+0x82>
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0e4      	beq.n	8004f88 <_scanf_float+0x378>
 8004fbe:	9905      	ldr	r1, [sp, #20]
 8004fc0:	230a      	movs	r3, #10
 8004fc2:	462a      	mov	r2, r5
 8004fc4:	3101      	adds	r1, #1
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f002 fcba 	bl	8007940 <_strtol_r>
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	9e05      	ldr	r6, [sp, #20]
 8004fd0:	1ac2      	subs	r2, r0, r3
 8004fd2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004fd6:	429e      	cmp	r6, r3
 8004fd8:	bf28      	it	cs
 8004fda:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004fde:	4912      	ldr	r1, [pc, #72]	; (8005028 <_scanf_float+0x418>)
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f000 f8e7 	bl	80051b4 <siprintf>
 8004fe6:	e7cf      	b.n	8004f88 <_scanf_float+0x378>
 8004fe8:	f011 0f04 	tst.w	r1, #4
 8004fec:	9903      	ldr	r1, [sp, #12]
 8004fee:	600a      	str	r2, [r1, #0]
 8004ff0:	d1db      	bne.n	8004faa <_scanf_float+0x39a>
 8004ff2:	f8d3 8000 	ldr.w	r8, [r3]
 8004ff6:	ee10 2a10 	vmov	r2, s0
 8004ffa:	ee10 0a10 	vmov	r0, s0
 8004ffe:	463b      	mov	r3, r7
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fd93 	bl	8000b2c <__aeabi_dcmpun>
 8005006:	b128      	cbz	r0, 8005014 <_scanf_float+0x404>
 8005008:	4808      	ldr	r0, [pc, #32]	; (800502c <_scanf_float+0x41c>)
 800500a:	f000 f9d7 	bl	80053bc <nanf>
 800500e:	ed88 0a00 	vstr	s0, [r8]
 8005012:	e7cd      	b.n	8004fb0 <_scanf_float+0x3a0>
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb fde6 	bl	8000be8 <__aeabi_d2f>
 800501c:	f8c8 0000 	str.w	r0, [r8]
 8005020:	e7c6      	b.n	8004fb0 <_scanf_float+0x3a0>
 8005022:	2500      	movs	r5, #0
 8005024:	e635      	b.n	8004c92 <_scanf_float+0x82>
 8005026:	bf00      	nop
 8005028:	08008bc8 	.word	0x08008bc8
 800502c:	08008f5d 	.word	0x08008f5d

08005030 <std>:
 8005030:	2300      	movs	r3, #0
 8005032:	b510      	push	{r4, lr}
 8005034:	4604      	mov	r4, r0
 8005036:	e9c0 3300 	strd	r3, r3, [r0]
 800503a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800503e:	6083      	str	r3, [r0, #8]
 8005040:	8181      	strh	r1, [r0, #12]
 8005042:	6643      	str	r3, [r0, #100]	; 0x64
 8005044:	81c2      	strh	r2, [r0, #14]
 8005046:	6183      	str	r3, [r0, #24]
 8005048:	4619      	mov	r1, r3
 800504a:	2208      	movs	r2, #8
 800504c:	305c      	adds	r0, #92	; 0x5c
 800504e:	f000 f935 	bl	80052bc <memset>
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <std+0x58>)
 8005054:	6263      	str	r3, [r4, #36]	; 0x24
 8005056:	4b0d      	ldr	r3, [pc, #52]	; (800508c <std+0x5c>)
 8005058:	62a3      	str	r3, [r4, #40]	; 0x28
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <std+0x60>)
 800505c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800505e:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <std+0x64>)
 8005060:	6323      	str	r3, [r4, #48]	; 0x30
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <std+0x68>)
 8005064:	6224      	str	r4, [r4, #32]
 8005066:	429c      	cmp	r4, r3
 8005068:	d006      	beq.n	8005078 <std+0x48>
 800506a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800506e:	4294      	cmp	r4, r2
 8005070:	d002      	beq.n	8005078 <std+0x48>
 8005072:	33d0      	adds	r3, #208	; 0xd0
 8005074:	429c      	cmp	r4, r3
 8005076:	d105      	bne.n	8005084 <std+0x54>
 8005078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800507c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005080:	f000 b998 	b.w	80053b4 <__retarget_lock_init_recursive>
 8005084:	bd10      	pop	{r4, pc}
 8005086:	bf00      	nop
 8005088:	080051f5 	.word	0x080051f5
 800508c:	08005217 	.word	0x08005217
 8005090:	0800524f 	.word	0x0800524f
 8005094:	08005273 	.word	0x08005273
 8005098:	200002fc 	.word	0x200002fc

0800509c <stdio_exit_handler>:
 800509c:	4a02      	ldr	r2, [pc, #8]	; (80050a8 <stdio_exit_handler+0xc>)
 800509e:	4903      	ldr	r1, [pc, #12]	; (80050ac <stdio_exit_handler+0x10>)
 80050a0:	4803      	ldr	r0, [pc, #12]	; (80050b0 <stdio_exit_handler+0x14>)
 80050a2:	f000 b869 	b.w	8005178 <_fwalk_sglue>
 80050a6:	bf00      	nop
 80050a8:	20000010 	.word	0x20000010
 80050ac:	08007d01 	.word	0x08007d01
 80050b0:	2000001c 	.word	0x2000001c

080050b4 <cleanup_stdio>:
 80050b4:	6841      	ldr	r1, [r0, #4]
 80050b6:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <cleanup_stdio+0x34>)
 80050b8:	4299      	cmp	r1, r3
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
 80050be:	d001      	beq.n	80050c4 <cleanup_stdio+0x10>
 80050c0:	f002 fe1e 	bl	8007d00 <_fflush_r>
 80050c4:	68a1      	ldr	r1, [r4, #8]
 80050c6:	4b09      	ldr	r3, [pc, #36]	; (80050ec <cleanup_stdio+0x38>)
 80050c8:	4299      	cmp	r1, r3
 80050ca:	d002      	beq.n	80050d2 <cleanup_stdio+0x1e>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f002 fe17 	bl	8007d00 <_fflush_r>
 80050d2:	68e1      	ldr	r1, [r4, #12]
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <cleanup_stdio+0x3c>)
 80050d6:	4299      	cmp	r1, r3
 80050d8:	d004      	beq.n	80050e4 <cleanup_stdio+0x30>
 80050da:	4620      	mov	r0, r4
 80050dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e0:	f002 be0e 	b.w	8007d00 <_fflush_r>
 80050e4:	bd10      	pop	{r4, pc}
 80050e6:	bf00      	nop
 80050e8:	200002fc 	.word	0x200002fc
 80050ec:	20000364 	.word	0x20000364
 80050f0:	200003cc 	.word	0x200003cc

080050f4 <global_stdio_init.part.0>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <global_stdio_init.part.0+0x30>)
 80050f8:	4c0b      	ldr	r4, [pc, #44]	; (8005128 <global_stdio_init.part.0+0x34>)
 80050fa:	4a0c      	ldr	r2, [pc, #48]	; (800512c <global_stdio_init.part.0+0x38>)
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	4620      	mov	r0, r4
 8005100:	2200      	movs	r2, #0
 8005102:	2104      	movs	r1, #4
 8005104:	f7ff ff94 	bl	8005030 <std>
 8005108:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800510c:	2201      	movs	r2, #1
 800510e:	2109      	movs	r1, #9
 8005110:	f7ff ff8e 	bl	8005030 <std>
 8005114:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005118:	2202      	movs	r2, #2
 800511a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800511e:	2112      	movs	r1, #18
 8005120:	f7ff bf86 	b.w	8005030 <std>
 8005124:	20000434 	.word	0x20000434
 8005128:	200002fc 	.word	0x200002fc
 800512c:	0800509d 	.word	0x0800509d

08005130 <__sfp_lock_acquire>:
 8005130:	4801      	ldr	r0, [pc, #4]	; (8005138 <__sfp_lock_acquire+0x8>)
 8005132:	f000 b940 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 8005136:	bf00      	nop
 8005138:	2000043d 	.word	0x2000043d

0800513c <__sfp_lock_release>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sfp_lock_release+0x8>)
 800513e:	f000 b93b 	b.w	80053b8 <__retarget_lock_release_recursive>
 8005142:	bf00      	nop
 8005144:	2000043d 	.word	0x2000043d

08005148 <__sinit>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4604      	mov	r4, r0
 800514c:	f7ff fff0 	bl	8005130 <__sfp_lock_acquire>
 8005150:	6a23      	ldr	r3, [r4, #32]
 8005152:	b11b      	cbz	r3, 800515c <__sinit+0x14>
 8005154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005158:	f7ff bff0 	b.w	800513c <__sfp_lock_release>
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <__sinit+0x28>)
 800515e:	6223      	str	r3, [r4, #32]
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <__sinit+0x2c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f5      	bne.n	8005154 <__sinit+0xc>
 8005168:	f7ff ffc4 	bl	80050f4 <global_stdio_init.part.0>
 800516c:	e7f2      	b.n	8005154 <__sinit+0xc>
 800516e:	bf00      	nop
 8005170:	080050b5 	.word	0x080050b5
 8005174:	20000434 	.word	0x20000434

08005178 <_fwalk_sglue>:
 8005178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800517c:	4607      	mov	r7, r0
 800517e:	4688      	mov	r8, r1
 8005180:	4614      	mov	r4, r2
 8005182:	2600      	movs	r6, #0
 8005184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005188:	f1b9 0901 	subs.w	r9, r9, #1
 800518c:	d505      	bpl.n	800519a <_fwalk_sglue+0x22>
 800518e:	6824      	ldr	r4, [r4, #0]
 8005190:	2c00      	cmp	r4, #0
 8005192:	d1f7      	bne.n	8005184 <_fwalk_sglue+0xc>
 8005194:	4630      	mov	r0, r6
 8005196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d907      	bls.n	80051b0 <_fwalk_sglue+0x38>
 80051a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051a4:	3301      	adds	r3, #1
 80051a6:	d003      	beq.n	80051b0 <_fwalk_sglue+0x38>
 80051a8:	4629      	mov	r1, r5
 80051aa:	4638      	mov	r0, r7
 80051ac:	47c0      	blx	r8
 80051ae:	4306      	orrs	r6, r0
 80051b0:	3568      	adds	r5, #104	; 0x68
 80051b2:	e7e9      	b.n	8005188 <_fwalk_sglue+0x10>

080051b4 <siprintf>:
 80051b4:	b40e      	push	{r1, r2, r3}
 80051b6:	b500      	push	{lr}
 80051b8:	b09c      	sub	sp, #112	; 0x70
 80051ba:	ab1d      	add	r3, sp, #116	; 0x74
 80051bc:	9002      	str	r0, [sp, #8]
 80051be:	9006      	str	r0, [sp, #24]
 80051c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051c4:	4809      	ldr	r0, [pc, #36]	; (80051ec <siprintf+0x38>)
 80051c6:	9107      	str	r1, [sp, #28]
 80051c8:	9104      	str	r1, [sp, #16]
 80051ca:	4909      	ldr	r1, [pc, #36]	; (80051f0 <siprintf+0x3c>)
 80051cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051d0:	9105      	str	r1, [sp, #20]
 80051d2:	6800      	ldr	r0, [r0, #0]
 80051d4:	9301      	str	r3, [sp, #4]
 80051d6:	a902      	add	r1, sp, #8
 80051d8:	f002 fc0e 	bl	80079f8 <_svfiprintf_r>
 80051dc:	9b02      	ldr	r3, [sp, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	b01c      	add	sp, #112	; 0x70
 80051e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051e8:	b003      	add	sp, #12
 80051ea:	4770      	bx	lr
 80051ec:	20000068 	.word	0x20000068
 80051f0:	ffff0208 	.word	0xffff0208

080051f4 <__sread>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	460c      	mov	r4, r1
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	f000 f88c 	bl	8005318 <_read_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	bfab      	itete	ge
 8005204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005206:	89a3      	ldrhlt	r3, [r4, #12]
 8005208:	181b      	addge	r3, r3, r0
 800520a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800520e:	bfac      	ite	ge
 8005210:	6563      	strge	r3, [r4, #84]	; 0x54
 8005212:	81a3      	strhlt	r3, [r4, #12]
 8005214:	bd10      	pop	{r4, pc}

08005216 <__swrite>:
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	461f      	mov	r7, r3
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4616      	mov	r6, r2
 8005226:	d505      	bpl.n	8005234 <__swrite+0x1e>
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2302      	movs	r3, #2
 800522e:	2200      	movs	r2, #0
 8005230:	f000 f860 	bl	80052f4 <_lseek_r>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800523a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	4632      	mov	r2, r6
 8005242:	463b      	mov	r3, r7
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	f000 b877 	b.w	800533c <_write_r>

0800524e <__sseek>:
 800524e:	b510      	push	{r4, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005256:	f000 f84d 	bl	80052f4 <_lseek_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	bf15      	itete	ne
 8005260:	6560      	strne	r0, [r4, #84]	; 0x54
 8005262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800526a:	81a3      	strheq	r3, [r4, #12]
 800526c:	bf18      	it	ne
 800526e:	81a3      	strhne	r3, [r4, #12]
 8005270:	bd10      	pop	{r4, pc}

08005272 <__sclose>:
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 b82d 	b.w	80052d4 <_close_r>
	...

0800527c <_vsiprintf_r>:
 800527c:	b500      	push	{lr}
 800527e:	b09b      	sub	sp, #108	; 0x6c
 8005280:	9100      	str	r1, [sp, #0]
 8005282:	9104      	str	r1, [sp, #16]
 8005284:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005288:	9105      	str	r1, [sp, #20]
 800528a:	9102      	str	r1, [sp, #8]
 800528c:	4905      	ldr	r1, [pc, #20]	; (80052a4 <_vsiprintf_r+0x28>)
 800528e:	9103      	str	r1, [sp, #12]
 8005290:	4669      	mov	r1, sp
 8005292:	f002 fbb1 	bl	80079f8 <_svfiprintf_r>
 8005296:	9b00      	ldr	r3, [sp, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	b01b      	add	sp, #108	; 0x6c
 800529e:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a2:	bf00      	nop
 80052a4:	ffff0208 	.word	0xffff0208

080052a8 <vsiprintf>:
 80052a8:	4613      	mov	r3, r2
 80052aa:	460a      	mov	r2, r1
 80052ac:	4601      	mov	r1, r0
 80052ae:	4802      	ldr	r0, [pc, #8]	; (80052b8 <vsiprintf+0x10>)
 80052b0:	6800      	ldr	r0, [r0, #0]
 80052b2:	f7ff bfe3 	b.w	800527c <_vsiprintf_r>
 80052b6:	bf00      	nop
 80052b8:	20000068 	.word	0x20000068

080052bc <memset>:
 80052bc:	4402      	add	r2, r0
 80052be:	4603      	mov	r3, r0
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d100      	bne.n	80052c6 <memset+0xa>
 80052c4:	4770      	bx	lr
 80052c6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ca:	e7f9      	b.n	80052c0 <memset+0x4>

080052cc <_localeconv_r>:
 80052cc:	4800      	ldr	r0, [pc, #0]	; (80052d0 <_localeconv_r+0x4>)
 80052ce:	4770      	bx	lr
 80052d0:	2000015c 	.word	0x2000015c

080052d4 <_close_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	; (80052f0 <_close_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fbbb 	bl	8001a5a <_close>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_close_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_close_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	20000438 	.word	0x20000438

080052f4 <_lseek_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	; (8005314 <_lseek_r+0x20>)
 80052f8:	4604      	mov	r4, r0
 80052fa:	4608      	mov	r0, r1
 80052fc:	4611      	mov	r1, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	602a      	str	r2, [r5, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f7fc fbd0 	bl	8001aa8 <_lseek>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_lseek_r+0x1e>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_lseek_r+0x1e>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20000438 	.word	0x20000438

08005318 <_read_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	; (8005338 <_read_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fc fb5e 	bl	80019e8 <_read>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_read_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_read_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20000438 	.word	0x20000438

0800533c <_write_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	; (800535c <_write_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fc fb69 	bl	8001a22 <_write>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_write_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_write_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000438 	.word	0x20000438

08005360 <__errno>:
 8005360:	4b01      	ldr	r3, [pc, #4]	; (8005368 <__errno+0x8>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000068 	.word	0x20000068

0800536c <__libc_init_array>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4d0d      	ldr	r5, [pc, #52]	; (80053a4 <__libc_init_array+0x38>)
 8005370:	4c0d      	ldr	r4, [pc, #52]	; (80053a8 <__libc_init_array+0x3c>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	2600      	movs	r6, #0
 8005378:	42a6      	cmp	r6, r4
 800537a:	d109      	bne.n	8005390 <__libc_init_array+0x24>
 800537c:	4d0b      	ldr	r5, [pc, #44]	; (80053ac <__libc_init_array+0x40>)
 800537e:	4c0c      	ldr	r4, [pc, #48]	; (80053b0 <__libc_init_array+0x44>)
 8005380:	f003 fbd6 	bl	8008b30 <_init>
 8005384:	1b64      	subs	r4, r4, r5
 8005386:	10a4      	asrs	r4, r4, #2
 8005388:	2600      	movs	r6, #0
 800538a:	42a6      	cmp	r6, r4
 800538c:	d105      	bne.n	800539a <__libc_init_array+0x2e>
 800538e:	bd70      	pop	{r4, r5, r6, pc}
 8005390:	f855 3b04 	ldr.w	r3, [r5], #4
 8005394:	4798      	blx	r3
 8005396:	3601      	adds	r6, #1
 8005398:	e7ee      	b.n	8005378 <__libc_init_array+0xc>
 800539a:	f855 3b04 	ldr.w	r3, [r5], #4
 800539e:	4798      	blx	r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	e7f2      	b.n	800538a <__libc_init_array+0x1e>
 80053a4:	08008fc8 	.word	0x08008fc8
 80053a8:	08008fc8 	.word	0x08008fc8
 80053ac:	08008fc8 	.word	0x08008fc8
 80053b0:	08008fcc 	.word	0x08008fcc

080053b4 <__retarget_lock_init_recursive>:
 80053b4:	4770      	bx	lr

080053b6 <__retarget_lock_acquire_recursive>:
 80053b6:	4770      	bx	lr

080053b8 <__retarget_lock_release_recursive>:
 80053b8:	4770      	bx	lr
	...

080053bc <nanf>:
 80053bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80053c4 <nanf+0x8>
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	7fc00000 	.word	0x7fc00000

080053c8 <quorem>:
 80053c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	6903      	ldr	r3, [r0, #16]
 80053ce:	690c      	ldr	r4, [r1, #16]
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	4607      	mov	r7, r0
 80053d4:	db7e      	blt.n	80054d4 <quorem+0x10c>
 80053d6:	3c01      	subs	r4, #1
 80053d8:	f101 0814 	add.w	r8, r1, #20
 80053dc:	f100 0514 	add.w	r5, r0, #20
 80053e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053ee:	3301      	adds	r3, #1
 80053f0:	429a      	cmp	r2, r3
 80053f2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053f6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053fa:	fbb2 f6f3 	udiv	r6, r2, r3
 80053fe:	d331      	bcc.n	8005464 <quorem+0x9c>
 8005400:	f04f 0e00 	mov.w	lr, #0
 8005404:	4640      	mov	r0, r8
 8005406:	46ac      	mov	ip, r5
 8005408:	46f2      	mov	sl, lr
 800540a:	f850 2b04 	ldr.w	r2, [r0], #4
 800540e:	b293      	uxth	r3, r2
 8005410:	fb06 e303 	mla	r3, r6, r3, lr
 8005414:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005418:	0c1a      	lsrs	r2, r3, #16
 800541a:	b29b      	uxth	r3, r3
 800541c:	ebaa 0303 	sub.w	r3, sl, r3
 8005420:	f8dc a000 	ldr.w	sl, [ip]
 8005424:	fa13 f38a 	uxtah	r3, r3, sl
 8005428:	fb06 220e 	mla	r2, r6, lr, r2
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	9b00      	ldr	r3, [sp, #0]
 8005430:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005434:	b292      	uxth	r2, r2
 8005436:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800543a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800543e:	f8bd 3000 	ldrh.w	r3, [sp]
 8005442:	4581      	cmp	r9, r0
 8005444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005448:	f84c 3b04 	str.w	r3, [ip], #4
 800544c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005450:	d2db      	bcs.n	800540a <quorem+0x42>
 8005452:	f855 300b 	ldr.w	r3, [r5, fp]
 8005456:	b92b      	cbnz	r3, 8005464 <quorem+0x9c>
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	3b04      	subs	r3, #4
 800545c:	429d      	cmp	r5, r3
 800545e:	461a      	mov	r2, r3
 8005460:	d32c      	bcc.n	80054bc <quorem+0xf4>
 8005462:	613c      	str	r4, [r7, #16]
 8005464:	4638      	mov	r0, r7
 8005466:	f001 f9ef 	bl	8006848 <__mcmp>
 800546a:	2800      	cmp	r0, #0
 800546c:	db22      	blt.n	80054b4 <quorem+0xec>
 800546e:	3601      	adds	r6, #1
 8005470:	4629      	mov	r1, r5
 8005472:	2000      	movs	r0, #0
 8005474:	f858 2b04 	ldr.w	r2, [r8], #4
 8005478:	f8d1 c000 	ldr.w	ip, [r1]
 800547c:	b293      	uxth	r3, r2
 800547e:	1ac3      	subs	r3, r0, r3
 8005480:	0c12      	lsrs	r2, r2, #16
 8005482:	fa13 f38c 	uxtah	r3, r3, ip
 8005486:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800548a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005494:	45c1      	cmp	r9, r8
 8005496:	f841 3b04 	str.w	r3, [r1], #4
 800549a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800549e:	d2e9      	bcs.n	8005474 <quorem+0xac>
 80054a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054a8:	b922      	cbnz	r2, 80054b4 <quorem+0xec>
 80054aa:	3b04      	subs	r3, #4
 80054ac:	429d      	cmp	r5, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	d30a      	bcc.n	80054c8 <quorem+0x100>
 80054b2:	613c      	str	r4, [r7, #16]
 80054b4:	4630      	mov	r0, r6
 80054b6:	b003      	add	sp, #12
 80054b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	3b04      	subs	r3, #4
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d1ce      	bne.n	8005462 <quorem+0x9a>
 80054c4:	3c01      	subs	r4, #1
 80054c6:	e7c9      	b.n	800545c <quorem+0x94>
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	3b04      	subs	r3, #4
 80054cc:	2a00      	cmp	r2, #0
 80054ce:	d1f0      	bne.n	80054b2 <quorem+0xea>
 80054d0:	3c01      	subs	r4, #1
 80054d2:	e7eb      	b.n	80054ac <quorem+0xe4>
 80054d4:	2000      	movs	r0, #0
 80054d6:	e7ee      	b.n	80054b6 <quorem+0xee>

080054d8 <_dtoa_r>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ed2d 8b04 	vpush	{d8-d9}
 80054e0:	69c5      	ldr	r5, [r0, #28]
 80054e2:	b093      	sub	sp, #76	; 0x4c
 80054e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80054e8:	ec57 6b10 	vmov	r6, r7, d0
 80054ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054f0:	9107      	str	r1, [sp, #28]
 80054f2:	4604      	mov	r4, r0
 80054f4:	920a      	str	r2, [sp, #40]	; 0x28
 80054f6:	930d      	str	r3, [sp, #52]	; 0x34
 80054f8:	b975      	cbnz	r5, 8005518 <_dtoa_r+0x40>
 80054fa:	2010      	movs	r0, #16
 80054fc:	f000 fe2a 	bl	8006154 <malloc>
 8005500:	4602      	mov	r2, r0
 8005502:	61e0      	str	r0, [r4, #28]
 8005504:	b920      	cbnz	r0, 8005510 <_dtoa_r+0x38>
 8005506:	4bae      	ldr	r3, [pc, #696]	; (80057c0 <_dtoa_r+0x2e8>)
 8005508:	21ef      	movs	r1, #239	; 0xef
 800550a:	48ae      	ldr	r0, [pc, #696]	; (80057c4 <_dtoa_r+0x2ec>)
 800550c:	f002 fc74 	bl	8007df8 <__assert_func>
 8005510:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005514:	6005      	str	r5, [r0, #0]
 8005516:	60c5      	str	r5, [r0, #12]
 8005518:	69e3      	ldr	r3, [r4, #28]
 800551a:	6819      	ldr	r1, [r3, #0]
 800551c:	b151      	cbz	r1, 8005534 <_dtoa_r+0x5c>
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	604a      	str	r2, [r1, #4]
 8005522:	2301      	movs	r3, #1
 8005524:	4093      	lsls	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 ff07 	bl	800633c <_Bfree>
 800552e:	69e3      	ldr	r3, [r4, #28]
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	1e3b      	subs	r3, r7, #0
 8005536:	bfbb      	ittet	lt
 8005538:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800553c:	9303      	strlt	r3, [sp, #12]
 800553e:	2300      	movge	r3, #0
 8005540:	2201      	movlt	r2, #1
 8005542:	bfac      	ite	ge
 8005544:	f8c8 3000 	strge.w	r3, [r8]
 8005548:	f8c8 2000 	strlt.w	r2, [r8]
 800554c:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <_dtoa_r+0x2f0>)
 800554e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005552:	ea33 0308 	bics.w	r3, r3, r8
 8005556:	d11b      	bne.n	8005590 <_dtoa_r+0xb8>
 8005558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800555a:	f242 730f 	movw	r3, #9999	; 0x270f
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005564:	4333      	orrs	r3, r6
 8005566:	f000 8593 	beq.w	8006090 <_dtoa_r+0xbb8>
 800556a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800556c:	b963      	cbnz	r3, 8005588 <_dtoa_r+0xb0>
 800556e:	4b97      	ldr	r3, [pc, #604]	; (80057cc <_dtoa_r+0x2f4>)
 8005570:	e027      	b.n	80055c2 <_dtoa_r+0xea>
 8005572:	4b97      	ldr	r3, [pc, #604]	; (80057d0 <_dtoa_r+0x2f8>)
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	9800      	ldr	r0, [sp, #0]
 800557e:	b013      	add	sp, #76	; 0x4c
 8005580:	ecbd 8b04 	vpop	{d8-d9}
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	4b90      	ldr	r3, [pc, #576]	; (80057cc <_dtoa_r+0x2f4>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	3303      	adds	r3, #3
 800558e:	e7f3      	b.n	8005578 <_dtoa_r+0xa0>
 8005590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005594:	2200      	movs	r2, #0
 8005596:	ec51 0b17 	vmov	r0, r1, d7
 800559a:	eeb0 8a47 	vmov.f32	s16, s14
 800559e:	eef0 8a67 	vmov.f32	s17, s15
 80055a2:	2300      	movs	r3, #0
 80055a4:	f7fb fa90 	bl	8000ac8 <__aeabi_dcmpeq>
 80055a8:	4681      	mov	r9, r0
 80055aa:	b160      	cbz	r0, 80055c6 <_dtoa_r+0xee>
 80055ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055ae:	2301      	movs	r3, #1
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8568 	beq.w	800608a <_dtoa_r+0xbb2>
 80055ba:	4b86      	ldr	r3, [pc, #536]	; (80057d4 <_dtoa_r+0x2fc>)
 80055bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	9300      	str	r3, [sp, #0]
 80055c4:	e7da      	b.n	800557c <_dtoa_r+0xa4>
 80055c6:	aa10      	add	r2, sp, #64	; 0x40
 80055c8:	a911      	add	r1, sp, #68	; 0x44
 80055ca:	4620      	mov	r0, r4
 80055cc:	eeb0 0a48 	vmov.f32	s0, s16
 80055d0:	eef0 0a68 	vmov.f32	s1, s17
 80055d4:	f001 fa4e 	bl	8006a74 <__d2b>
 80055d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80055dc:	4682      	mov	sl, r0
 80055de:	2d00      	cmp	r5, #0
 80055e0:	d07f      	beq.n	80056e2 <_dtoa_r+0x20a>
 80055e2:	ee18 3a90 	vmov	r3, s17
 80055e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80055ee:	ec51 0b18 	vmov	r0, r1, d8
 80055f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80055f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80055fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80055fe:	4619      	mov	r1, r3
 8005600:	2200      	movs	r2, #0
 8005602:	4b75      	ldr	r3, [pc, #468]	; (80057d8 <_dtoa_r+0x300>)
 8005604:	f7fa fe40 	bl	8000288 <__aeabi_dsub>
 8005608:	a367      	add	r3, pc, #412	; (adr r3, 80057a8 <_dtoa_r+0x2d0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fa fff3 	bl	80005f8 <__aeabi_dmul>
 8005612:	a367      	add	r3, pc, #412	; (adr r3, 80057b0 <_dtoa_r+0x2d8>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fe38 	bl	800028c <__adddf3>
 800561c:	4606      	mov	r6, r0
 800561e:	4628      	mov	r0, r5
 8005620:	460f      	mov	r7, r1
 8005622:	f7fa ff7f 	bl	8000524 <__aeabi_i2d>
 8005626:	a364      	add	r3, pc, #400	; (adr r3, 80057b8 <_dtoa_r+0x2e0>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_dmul>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fa fe28 	bl	800028c <__adddf3>
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	f7fb fa8a 	bl	8000b58 <__aeabi_d2iz>
 8005644:	2200      	movs	r2, #0
 8005646:	4683      	mov	fp, r0
 8005648:	2300      	movs	r3, #0
 800564a:	4630      	mov	r0, r6
 800564c:	4639      	mov	r1, r7
 800564e:	f7fb fa45 	bl	8000adc <__aeabi_dcmplt>
 8005652:	b148      	cbz	r0, 8005668 <_dtoa_r+0x190>
 8005654:	4658      	mov	r0, fp
 8005656:	f7fa ff65 	bl	8000524 <__aeabi_i2d>
 800565a:	4632      	mov	r2, r6
 800565c:	463b      	mov	r3, r7
 800565e:	f7fb fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8005662:	b908      	cbnz	r0, 8005668 <_dtoa_r+0x190>
 8005664:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005668:	f1bb 0f16 	cmp.w	fp, #22
 800566c:	d857      	bhi.n	800571e <_dtoa_r+0x246>
 800566e:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <_dtoa_r+0x304>)
 8005670:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	ec51 0b18 	vmov	r0, r1, d8
 800567c:	f7fb fa2e 	bl	8000adc <__aeabi_dcmplt>
 8005680:	2800      	cmp	r0, #0
 8005682:	d04e      	beq.n	8005722 <_dtoa_r+0x24a>
 8005684:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005688:	2300      	movs	r3, #0
 800568a:	930c      	str	r3, [sp, #48]	; 0x30
 800568c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800568e:	1b5b      	subs	r3, r3, r5
 8005690:	1e5a      	subs	r2, r3, #1
 8005692:	bf45      	ittet	mi
 8005694:	f1c3 0301 	rsbmi	r3, r3, #1
 8005698:	9305      	strmi	r3, [sp, #20]
 800569a:	2300      	movpl	r3, #0
 800569c:	2300      	movmi	r3, #0
 800569e:	9206      	str	r2, [sp, #24]
 80056a0:	bf54      	ite	pl
 80056a2:	9305      	strpl	r3, [sp, #20]
 80056a4:	9306      	strmi	r3, [sp, #24]
 80056a6:	f1bb 0f00 	cmp.w	fp, #0
 80056aa:	db3c      	blt.n	8005726 <_dtoa_r+0x24e>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80056b2:	445b      	add	r3, fp
 80056b4:	9306      	str	r3, [sp, #24]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9308      	str	r3, [sp, #32]
 80056ba:	9b07      	ldr	r3, [sp, #28]
 80056bc:	2b09      	cmp	r3, #9
 80056be:	d868      	bhi.n	8005792 <_dtoa_r+0x2ba>
 80056c0:	2b05      	cmp	r3, #5
 80056c2:	bfc4      	itt	gt
 80056c4:	3b04      	subgt	r3, #4
 80056c6:	9307      	strgt	r3, [sp, #28]
 80056c8:	9b07      	ldr	r3, [sp, #28]
 80056ca:	f1a3 0302 	sub.w	r3, r3, #2
 80056ce:	bfcc      	ite	gt
 80056d0:	2500      	movgt	r5, #0
 80056d2:	2501      	movle	r5, #1
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	f200 8085 	bhi.w	80057e4 <_dtoa_r+0x30c>
 80056da:	e8df f003 	tbb	[pc, r3]
 80056de:	3b2e      	.short	0x3b2e
 80056e0:	5839      	.short	0x5839
 80056e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80056e6:	441d      	add	r5, r3
 80056e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	bfc1      	itttt	gt
 80056f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80056f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80056fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005700:	bfd6      	itet	le
 8005702:	f1c3 0320 	rsble	r3, r3, #32
 8005706:	ea48 0003 	orrgt.w	r0, r8, r3
 800570a:	fa06 f003 	lslle.w	r0, r6, r3
 800570e:	f7fa fef9 	bl	8000504 <__aeabi_ui2d>
 8005712:	2201      	movs	r2, #1
 8005714:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005718:	3d01      	subs	r5, #1
 800571a:	920e      	str	r2, [sp, #56]	; 0x38
 800571c:	e76f      	b.n	80055fe <_dtoa_r+0x126>
 800571e:	2301      	movs	r3, #1
 8005720:	e7b3      	b.n	800568a <_dtoa_r+0x1b2>
 8005722:	900c      	str	r0, [sp, #48]	; 0x30
 8005724:	e7b2      	b.n	800568c <_dtoa_r+0x1b4>
 8005726:	9b05      	ldr	r3, [sp, #20]
 8005728:	eba3 030b 	sub.w	r3, r3, fp
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	f1cb 0300 	rsb	r3, fp, #0
 8005732:	9308      	str	r3, [sp, #32]
 8005734:	2300      	movs	r3, #0
 8005736:	930b      	str	r3, [sp, #44]	; 0x2c
 8005738:	e7bf      	b.n	80056ba <_dtoa_r+0x1e2>
 800573a:	2300      	movs	r3, #0
 800573c:	9309      	str	r3, [sp, #36]	; 0x24
 800573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005740:	2b00      	cmp	r3, #0
 8005742:	dc52      	bgt.n	80057ea <_dtoa_r+0x312>
 8005744:	2301      	movs	r3, #1
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	461a      	mov	r2, r3
 800574c:	920a      	str	r2, [sp, #40]	; 0x28
 800574e:	e00b      	b.n	8005768 <_dtoa_r+0x290>
 8005750:	2301      	movs	r3, #1
 8005752:	e7f3      	b.n	800573c <_dtoa_r+0x264>
 8005754:	2300      	movs	r3, #0
 8005756:	9309      	str	r3, [sp, #36]	; 0x24
 8005758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575a:	445b      	add	r3, fp
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	3301      	adds	r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	9304      	str	r3, [sp, #16]
 8005764:	bfb8      	it	lt
 8005766:	2301      	movlt	r3, #1
 8005768:	69e0      	ldr	r0, [r4, #28]
 800576a:	2100      	movs	r1, #0
 800576c:	2204      	movs	r2, #4
 800576e:	f102 0614 	add.w	r6, r2, #20
 8005772:	429e      	cmp	r6, r3
 8005774:	d93d      	bls.n	80057f2 <_dtoa_r+0x31a>
 8005776:	6041      	str	r1, [r0, #4]
 8005778:	4620      	mov	r0, r4
 800577a:	f000 fd9f 	bl	80062bc <_Balloc>
 800577e:	9000      	str	r0, [sp, #0]
 8005780:	2800      	cmp	r0, #0
 8005782:	d139      	bne.n	80057f8 <_dtoa_r+0x320>
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <_dtoa_r+0x308>)
 8005786:	4602      	mov	r2, r0
 8005788:	f240 11af 	movw	r1, #431	; 0x1af
 800578c:	e6bd      	b.n	800550a <_dtoa_r+0x32>
 800578e:	2301      	movs	r3, #1
 8005790:	e7e1      	b.n	8005756 <_dtoa_r+0x27e>
 8005792:	2501      	movs	r5, #1
 8005794:	2300      	movs	r3, #0
 8005796:	9307      	str	r3, [sp, #28]
 8005798:	9509      	str	r5, [sp, #36]	; 0x24
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	9304      	str	r3, [sp, #16]
 80057a2:	2200      	movs	r2, #0
 80057a4:	2312      	movs	r3, #18
 80057a6:	e7d1      	b.n	800574c <_dtoa_r+0x274>
 80057a8:	636f4361 	.word	0x636f4361
 80057ac:	3fd287a7 	.word	0x3fd287a7
 80057b0:	8b60c8b3 	.word	0x8b60c8b3
 80057b4:	3fc68a28 	.word	0x3fc68a28
 80057b8:	509f79fb 	.word	0x509f79fb
 80057bc:	3fd34413 	.word	0x3fd34413
 80057c0:	08008bda 	.word	0x08008bda
 80057c4:	08008bf1 	.word	0x08008bf1
 80057c8:	7ff00000 	.word	0x7ff00000
 80057cc:	08008bd6 	.word	0x08008bd6
 80057d0:	08008bcd 	.word	0x08008bcd
 80057d4:	08008ba5 	.word	0x08008ba5
 80057d8:	3ff80000 	.word	0x3ff80000
 80057dc:	08008ce0 	.word	0x08008ce0
 80057e0:	08008c49 	.word	0x08008c49
 80057e4:	2301      	movs	r3, #1
 80057e6:	9309      	str	r3, [sp, #36]	; 0x24
 80057e8:	e7d7      	b.n	800579a <_dtoa_r+0x2c2>
 80057ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	9304      	str	r3, [sp, #16]
 80057f0:	e7ba      	b.n	8005768 <_dtoa_r+0x290>
 80057f2:	3101      	adds	r1, #1
 80057f4:	0052      	lsls	r2, r2, #1
 80057f6:	e7ba      	b.n	800576e <_dtoa_r+0x296>
 80057f8:	69e3      	ldr	r3, [r4, #28]
 80057fa:	9a00      	ldr	r2, [sp, #0]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	9b04      	ldr	r3, [sp, #16]
 8005800:	2b0e      	cmp	r3, #14
 8005802:	f200 80a8 	bhi.w	8005956 <_dtoa_r+0x47e>
 8005806:	2d00      	cmp	r5, #0
 8005808:	f000 80a5 	beq.w	8005956 <_dtoa_r+0x47e>
 800580c:	f1bb 0f00 	cmp.w	fp, #0
 8005810:	dd38      	ble.n	8005884 <_dtoa_r+0x3ac>
 8005812:	4bc0      	ldr	r3, [pc, #768]	; (8005b14 <_dtoa_r+0x63c>)
 8005814:	f00b 020f 	and.w	r2, fp, #15
 8005818:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800581c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005820:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005824:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005828:	d019      	beq.n	800585e <_dtoa_r+0x386>
 800582a:	4bbb      	ldr	r3, [pc, #748]	; (8005b18 <_dtoa_r+0x640>)
 800582c:	ec51 0b18 	vmov	r0, r1, d8
 8005830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005834:	f7fb f80a 	bl	800084c <__aeabi_ddiv>
 8005838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583c:	f008 080f 	and.w	r8, r8, #15
 8005840:	2503      	movs	r5, #3
 8005842:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005b18 <_dtoa_r+0x640>
 8005846:	f1b8 0f00 	cmp.w	r8, #0
 800584a:	d10a      	bne.n	8005862 <_dtoa_r+0x38a>
 800584c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	f7fa fffa 	bl	800084c <__aeabi_ddiv>
 8005858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800585c:	e02b      	b.n	80058b6 <_dtoa_r+0x3de>
 800585e:	2502      	movs	r5, #2
 8005860:	e7ef      	b.n	8005842 <_dtoa_r+0x36a>
 8005862:	f018 0f01 	tst.w	r8, #1
 8005866:	d008      	beq.n	800587a <_dtoa_r+0x3a2>
 8005868:	4630      	mov	r0, r6
 800586a:	4639      	mov	r1, r7
 800586c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005870:	f7fa fec2 	bl	80005f8 <__aeabi_dmul>
 8005874:	3501      	adds	r5, #1
 8005876:	4606      	mov	r6, r0
 8005878:	460f      	mov	r7, r1
 800587a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800587e:	f109 0908 	add.w	r9, r9, #8
 8005882:	e7e0      	b.n	8005846 <_dtoa_r+0x36e>
 8005884:	f000 809f 	beq.w	80059c6 <_dtoa_r+0x4ee>
 8005888:	f1cb 0600 	rsb	r6, fp, #0
 800588c:	4ba1      	ldr	r3, [pc, #644]	; (8005b14 <_dtoa_r+0x63c>)
 800588e:	4fa2      	ldr	r7, [pc, #648]	; (8005b18 <_dtoa_r+0x640>)
 8005890:	f006 020f 	and.w	r2, r6, #15
 8005894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	ec51 0b18 	vmov	r0, r1, d8
 80058a0:	f7fa feaa 	bl	80005f8 <__aeabi_dmul>
 80058a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a8:	1136      	asrs	r6, r6, #4
 80058aa:	2300      	movs	r3, #0
 80058ac:	2502      	movs	r5, #2
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d17e      	bne.n	80059b0 <_dtoa_r+0x4d8>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1d0      	bne.n	8005858 <_dtoa_r+0x380>
 80058b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8084 	beq.w	80059ca <_dtoa_r+0x4f2>
 80058c2:	4b96      	ldr	r3, [pc, #600]	; (8005b1c <_dtoa_r+0x644>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	4640      	mov	r0, r8
 80058c8:	4649      	mov	r1, r9
 80058ca:	f7fb f907 	bl	8000adc <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d07b      	beq.n	80059ca <_dtoa_r+0x4f2>
 80058d2:	9b04      	ldr	r3, [sp, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d078      	beq.n	80059ca <_dtoa_r+0x4f2>
 80058d8:	9b01      	ldr	r3, [sp, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	dd39      	ble.n	8005952 <_dtoa_r+0x47a>
 80058de:	4b90      	ldr	r3, [pc, #576]	; (8005b20 <_dtoa_r+0x648>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f7fa fe87 	bl	80005f8 <__aeabi_dmul>
 80058ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ee:	9e01      	ldr	r6, [sp, #4]
 80058f0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80058f4:	3501      	adds	r5, #1
 80058f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7fa fe12 	bl	8000524 <__aeabi_i2d>
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	f7fa fe78 	bl	80005f8 <__aeabi_dmul>
 8005908:	4b86      	ldr	r3, [pc, #536]	; (8005b24 <_dtoa_r+0x64c>)
 800590a:	2200      	movs	r2, #0
 800590c:	f7fa fcbe 	bl	800028c <__adddf3>
 8005910:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005918:	9303      	str	r3, [sp, #12]
 800591a:	2e00      	cmp	r6, #0
 800591c:	d158      	bne.n	80059d0 <_dtoa_r+0x4f8>
 800591e:	4b82      	ldr	r3, [pc, #520]	; (8005b28 <_dtoa_r+0x650>)
 8005920:	2200      	movs	r2, #0
 8005922:	4640      	mov	r0, r8
 8005924:	4649      	mov	r1, r9
 8005926:	f7fa fcaf 	bl	8000288 <__aeabi_dsub>
 800592a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800592e:	4680      	mov	r8, r0
 8005930:	4689      	mov	r9, r1
 8005932:	f7fb f8f1 	bl	8000b18 <__aeabi_dcmpgt>
 8005936:	2800      	cmp	r0, #0
 8005938:	f040 8296 	bne.w	8005e68 <_dtoa_r+0x990>
 800593c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005940:	4640      	mov	r0, r8
 8005942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005946:	4649      	mov	r1, r9
 8005948:	f7fb f8c8 	bl	8000adc <__aeabi_dcmplt>
 800594c:	2800      	cmp	r0, #0
 800594e:	f040 8289 	bne.w	8005e64 <_dtoa_r+0x98c>
 8005952:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005958:	2b00      	cmp	r3, #0
 800595a:	f2c0 814e 	blt.w	8005bfa <_dtoa_r+0x722>
 800595e:	f1bb 0f0e 	cmp.w	fp, #14
 8005962:	f300 814a 	bgt.w	8005bfa <_dtoa_r+0x722>
 8005966:	4b6b      	ldr	r3, [pc, #428]	; (8005b14 <_dtoa_r+0x63c>)
 8005968:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800596c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	f280 80dc 	bge.w	8005b30 <_dtoa_r+0x658>
 8005978:	9b04      	ldr	r3, [sp, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f300 80d8 	bgt.w	8005b30 <_dtoa_r+0x658>
 8005980:	f040 826f 	bne.w	8005e62 <_dtoa_r+0x98a>
 8005984:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <_dtoa_r+0x650>)
 8005986:	2200      	movs	r2, #0
 8005988:	4640      	mov	r0, r8
 800598a:	4649      	mov	r1, r9
 800598c:	f7fa fe34 	bl	80005f8 <__aeabi_dmul>
 8005990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005994:	f7fb f8b6 	bl	8000b04 <__aeabi_dcmpge>
 8005998:	9e04      	ldr	r6, [sp, #16]
 800599a:	4637      	mov	r7, r6
 800599c:	2800      	cmp	r0, #0
 800599e:	f040 8245 	bne.w	8005e2c <_dtoa_r+0x954>
 80059a2:	9d00      	ldr	r5, [sp, #0]
 80059a4:	2331      	movs	r3, #49	; 0x31
 80059a6:	f805 3b01 	strb.w	r3, [r5], #1
 80059aa:	f10b 0b01 	add.w	fp, fp, #1
 80059ae:	e241      	b.n	8005e34 <_dtoa_r+0x95c>
 80059b0:	07f2      	lsls	r2, r6, #31
 80059b2:	d505      	bpl.n	80059c0 <_dtoa_r+0x4e8>
 80059b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b8:	f7fa fe1e 	bl	80005f8 <__aeabi_dmul>
 80059bc:	3501      	adds	r5, #1
 80059be:	2301      	movs	r3, #1
 80059c0:	1076      	asrs	r6, r6, #1
 80059c2:	3708      	adds	r7, #8
 80059c4:	e773      	b.n	80058ae <_dtoa_r+0x3d6>
 80059c6:	2502      	movs	r5, #2
 80059c8:	e775      	b.n	80058b6 <_dtoa_r+0x3de>
 80059ca:	9e04      	ldr	r6, [sp, #16]
 80059cc:	465f      	mov	r7, fp
 80059ce:	e792      	b.n	80058f6 <_dtoa_r+0x41e>
 80059d0:	9900      	ldr	r1, [sp, #0]
 80059d2:	4b50      	ldr	r3, [pc, #320]	; (8005b14 <_dtoa_r+0x63c>)
 80059d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059d8:	4431      	add	r1, r6
 80059da:	9102      	str	r1, [sp, #8]
 80059dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059de:	eeb0 9a47 	vmov.f32	s18, s14
 80059e2:	eef0 9a67 	vmov.f32	s19, s15
 80059e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d044      	beq.n	8005a7c <_dtoa_r+0x5a4>
 80059f2:	494e      	ldr	r1, [pc, #312]	; (8005b2c <_dtoa_r+0x654>)
 80059f4:	2000      	movs	r0, #0
 80059f6:	f7fa ff29 	bl	800084c <__aeabi_ddiv>
 80059fa:	ec53 2b19 	vmov	r2, r3, d9
 80059fe:	f7fa fc43 	bl	8000288 <__aeabi_dsub>
 8005a02:	9d00      	ldr	r5, [sp, #0]
 8005a04:	ec41 0b19 	vmov	d9, r0, r1
 8005a08:	4649      	mov	r1, r9
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f7fb f8a4 	bl	8000b58 <__aeabi_d2iz>
 8005a10:	4606      	mov	r6, r0
 8005a12:	f7fa fd87 	bl	8000524 <__aeabi_i2d>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	f7fa fc33 	bl	8000288 <__aeabi_dsub>
 8005a22:	3630      	adds	r6, #48	; 0x30
 8005a24:	f805 6b01 	strb.w	r6, [r5], #1
 8005a28:	ec53 2b19 	vmov	r2, r3, d9
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4689      	mov	r9, r1
 8005a30:	f7fb f854 	bl	8000adc <__aeabi_dcmplt>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d164      	bne.n	8005b02 <_dtoa_r+0x62a>
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	4937      	ldr	r1, [pc, #220]	; (8005b1c <_dtoa_r+0x644>)
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f7fa fc22 	bl	8000288 <__aeabi_dsub>
 8005a44:	ec53 2b19 	vmov	r2, r3, d9
 8005a48:	f7fb f848 	bl	8000adc <__aeabi_dcmplt>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f040 80b6 	bne.w	8005bbe <_dtoa_r+0x6e6>
 8005a52:	9b02      	ldr	r3, [sp, #8]
 8005a54:	429d      	cmp	r5, r3
 8005a56:	f43f af7c 	beq.w	8005952 <_dtoa_r+0x47a>
 8005a5a:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <_dtoa_r+0x648>)
 8005a5c:	ec51 0b19 	vmov	r0, r1, d9
 8005a60:	2200      	movs	r2, #0
 8005a62:	f7fa fdc9 	bl	80005f8 <__aeabi_dmul>
 8005a66:	4b2e      	ldr	r3, [pc, #184]	; (8005b20 <_dtoa_r+0x648>)
 8005a68:	ec41 0b19 	vmov	d9, r0, r1
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4640      	mov	r0, r8
 8005a70:	4649      	mov	r1, r9
 8005a72:	f7fa fdc1 	bl	80005f8 <__aeabi_dmul>
 8005a76:	4680      	mov	r8, r0
 8005a78:	4689      	mov	r9, r1
 8005a7a:	e7c5      	b.n	8005a08 <_dtoa_r+0x530>
 8005a7c:	ec51 0b17 	vmov	r0, r1, d7
 8005a80:	f7fa fdba 	bl	80005f8 <__aeabi_dmul>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	9d00      	ldr	r5, [sp, #0]
 8005a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a8a:	ec41 0b19 	vmov	d9, r0, r1
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4640      	mov	r0, r8
 8005a92:	f7fb f861 	bl	8000b58 <__aeabi_d2iz>
 8005a96:	4606      	mov	r6, r0
 8005a98:	f7fa fd44 	bl	8000524 <__aeabi_i2d>
 8005a9c:	3630      	adds	r6, #48	; 0x30
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	f7fa fbef 	bl	8000288 <__aeabi_dsub>
 8005aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8005aae:	9b02      	ldr	r3, [sp, #8]
 8005ab0:	429d      	cmp	r5, r3
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	4689      	mov	r9, r1
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	d124      	bne.n	8005b06 <_dtoa_r+0x62e>
 8005abc:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <_dtoa_r+0x654>)
 8005abe:	ec51 0b19 	vmov	r0, r1, d9
 8005ac2:	f7fa fbe3 	bl	800028c <__adddf3>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4640      	mov	r0, r8
 8005acc:	4649      	mov	r1, r9
 8005ace:	f7fb f823 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d173      	bne.n	8005bbe <_dtoa_r+0x6e6>
 8005ad6:	ec53 2b19 	vmov	r2, r3, d9
 8005ada:	4914      	ldr	r1, [pc, #80]	; (8005b2c <_dtoa_r+0x654>)
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fa fbd3 	bl	8000288 <__aeabi_dsub>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	f7fa fff7 	bl	8000adc <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f43f af2f 	beq.w	8005952 <_dtoa_r+0x47a>
 8005af4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005af6:	1e6b      	subs	r3, r5, #1
 8005af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005afa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005afe:	2b30      	cmp	r3, #48	; 0x30
 8005b00:	d0f8      	beq.n	8005af4 <_dtoa_r+0x61c>
 8005b02:	46bb      	mov	fp, r7
 8005b04:	e04a      	b.n	8005b9c <_dtoa_r+0x6c4>
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <_dtoa_r+0x648>)
 8005b08:	f7fa fd76 	bl	80005f8 <__aeabi_dmul>
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	4689      	mov	r9, r1
 8005b10:	e7bd      	b.n	8005a8e <_dtoa_r+0x5b6>
 8005b12:	bf00      	nop
 8005b14:	08008ce0 	.word	0x08008ce0
 8005b18:	08008cb8 	.word	0x08008cb8
 8005b1c:	3ff00000 	.word	0x3ff00000
 8005b20:	40240000 	.word	0x40240000
 8005b24:	401c0000 	.word	0x401c0000
 8005b28:	40140000 	.word	0x40140000
 8005b2c:	3fe00000 	.word	0x3fe00000
 8005b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b34:	9d00      	ldr	r5, [sp, #0]
 8005b36:	4642      	mov	r2, r8
 8005b38:	464b      	mov	r3, r9
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	f7fa fe85 	bl	800084c <__aeabi_ddiv>
 8005b42:	f7fb f809 	bl	8000b58 <__aeabi_d2iz>
 8005b46:	9001      	str	r0, [sp, #4]
 8005b48:	f7fa fcec 	bl	8000524 <__aeabi_i2d>
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	f7fa fd52 	bl	80005f8 <__aeabi_dmul>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa fb94 	bl	8000288 <__aeabi_dsub>
 8005b60:	9e01      	ldr	r6, [sp, #4]
 8005b62:	9f04      	ldr	r7, [sp, #16]
 8005b64:	3630      	adds	r6, #48	; 0x30
 8005b66:	f805 6b01 	strb.w	r6, [r5], #1
 8005b6a:	9e00      	ldr	r6, [sp, #0]
 8005b6c:	1bae      	subs	r6, r5, r6
 8005b6e:	42b7      	cmp	r7, r6
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	d134      	bne.n	8005be0 <_dtoa_r+0x708>
 8005b76:	f7fa fb89 	bl	800028c <__adddf3>
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	464b      	mov	r3, r9
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460f      	mov	r7, r1
 8005b82:	f7fa ffc9 	bl	8000b18 <__aeabi_dcmpgt>
 8005b86:	b9c8      	cbnz	r0, 8005bbc <_dtoa_r+0x6e4>
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4639      	mov	r1, r7
 8005b90:	f7fa ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b94:	b110      	cbz	r0, 8005b9c <_dtoa_r+0x6c4>
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	07db      	lsls	r3, r3, #31
 8005b9a:	d40f      	bmi.n	8005bbc <_dtoa_r+0x6e4>
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f000 fbcc 	bl	800633c <_Bfree>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ba8:	702b      	strb	r3, [r5, #0]
 8005baa:	f10b 0301 	add.w	r3, fp, #1
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f43f ace2 	beq.w	800557c <_dtoa_r+0xa4>
 8005bb8:	601d      	str	r5, [r3, #0]
 8005bba:	e4df      	b.n	800557c <_dtoa_r+0xa4>
 8005bbc:	465f      	mov	r7, fp
 8005bbe:	462b      	mov	r3, r5
 8005bc0:	461d      	mov	r5, r3
 8005bc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bc6:	2a39      	cmp	r2, #57	; 0x39
 8005bc8:	d106      	bne.n	8005bd8 <_dtoa_r+0x700>
 8005bca:	9a00      	ldr	r2, [sp, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d1f7      	bne.n	8005bc0 <_dtoa_r+0x6e8>
 8005bd0:	9900      	ldr	r1, [sp, #0]
 8005bd2:	2230      	movs	r2, #48	; 0x30
 8005bd4:	3701      	adds	r7, #1
 8005bd6:	700a      	strb	r2, [r1, #0]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	3201      	adds	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e790      	b.n	8005b02 <_dtoa_r+0x62a>
 8005be0:	4ba3      	ldr	r3, [pc, #652]	; (8005e70 <_dtoa_r+0x998>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	f7fa fd08 	bl	80005f8 <__aeabi_dmul>
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	4606      	mov	r6, r0
 8005bee:	460f      	mov	r7, r1
 8005bf0:	f7fa ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d09e      	beq.n	8005b36 <_dtoa_r+0x65e>
 8005bf8:	e7d0      	b.n	8005b9c <_dtoa_r+0x6c4>
 8005bfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	f000 80ca 	beq.w	8005d96 <_dtoa_r+0x8be>
 8005c02:	9a07      	ldr	r2, [sp, #28]
 8005c04:	2a01      	cmp	r2, #1
 8005c06:	f300 80ad 	bgt.w	8005d64 <_dtoa_r+0x88c>
 8005c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c0c:	2a00      	cmp	r2, #0
 8005c0e:	f000 80a5 	beq.w	8005d5c <_dtoa_r+0x884>
 8005c12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c16:	9e08      	ldr	r6, [sp, #32]
 8005c18:	9d05      	ldr	r5, [sp, #20]
 8005c1a:	9a05      	ldr	r2, [sp, #20]
 8005c1c:	441a      	add	r2, r3
 8005c1e:	9205      	str	r2, [sp, #20]
 8005c20:	9a06      	ldr	r2, [sp, #24]
 8005c22:	2101      	movs	r1, #1
 8005c24:	441a      	add	r2, r3
 8005c26:	4620      	mov	r0, r4
 8005c28:	9206      	str	r2, [sp, #24]
 8005c2a:	f000 fc87 	bl	800653c <__i2b>
 8005c2e:	4607      	mov	r7, r0
 8005c30:	b165      	cbz	r5, 8005c4c <_dtoa_r+0x774>
 8005c32:	9b06      	ldr	r3, [sp, #24]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	dd09      	ble.n	8005c4c <_dtoa_r+0x774>
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	9a05      	ldr	r2, [sp, #20]
 8005c3c:	bfa8      	it	ge
 8005c3e:	462b      	movge	r3, r5
 8005c40:	1ad2      	subs	r2, r2, r3
 8005c42:	9205      	str	r2, [sp, #20]
 8005c44:	9a06      	ldr	r2, [sp, #24]
 8005c46:	1aed      	subs	r5, r5, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	9306      	str	r3, [sp, #24]
 8005c4c:	9b08      	ldr	r3, [sp, #32]
 8005c4e:	b1f3      	cbz	r3, 8005c8e <_dtoa_r+0x7b6>
 8005c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80a3 	beq.w	8005d9e <_dtoa_r+0x8c6>
 8005c58:	2e00      	cmp	r6, #0
 8005c5a:	dd10      	ble.n	8005c7e <_dtoa_r+0x7a6>
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4632      	mov	r2, r6
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 fd2b 	bl	80066bc <__pow5mult>
 8005c66:	4652      	mov	r2, sl
 8005c68:	4601      	mov	r1, r0
 8005c6a:	4607      	mov	r7, r0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fc7b 	bl	8006568 <__multiply>
 8005c72:	4651      	mov	r1, sl
 8005c74:	4680      	mov	r8, r0
 8005c76:	4620      	mov	r0, r4
 8005c78:	f000 fb60 	bl	800633c <_Bfree>
 8005c7c:	46c2      	mov	sl, r8
 8005c7e:	9b08      	ldr	r3, [sp, #32]
 8005c80:	1b9a      	subs	r2, r3, r6
 8005c82:	d004      	beq.n	8005c8e <_dtoa_r+0x7b6>
 8005c84:	4651      	mov	r1, sl
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 fd18 	bl	80066bc <__pow5mult>
 8005c8c:	4682      	mov	sl, r0
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fc53 	bl	800653c <__i2b>
 8005c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	f340 8081 	ble.w	8005da2 <_dtoa_r+0x8ca>
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 fd09 	bl	80066bc <__pow5mult>
 8005caa:	9b07      	ldr	r3, [sp, #28]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	4606      	mov	r6, r0
 8005cb0:	dd7a      	ble.n	8005da8 <_dtoa_r+0x8d0>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	6933      	ldr	r3, [r6, #16]
 8005cb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cbc:	6918      	ldr	r0, [r3, #16]
 8005cbe:	f000 fbef 	bl	80064a0 <__hi0bits>
 8005cc2:	f1c0 0020 	rsb	r0, r0, #32
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	4418      	add	r0, r3
 8005cca:	f010 001f 	ands.w	r0, r0, #31
 8005cce:	f000 8094 	beq.w	8005dfa <_dtoa_r+0x922>
 8005cd2:	f1c0 0320 	rsb	r3, r0, #32
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	f340 8085 	ble.w	8005de6 <_dtoa_r+0x90e>
 8005cdc:	9b05      	ldr	r3, [sp, #20]
 8005cde:	f1c0 001c 	rsb	r0, r0, #28
 8005ce2:	4403      	add	r3, r0
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	4403      	add	r3, r0
 8005cea:	4405      	add	r5, r0
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	9b05      	ldr	r3, [sp, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dd05      	ble.n	8005d00 <_dtoa_r+0x828>
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f000 fd39 	bl	8006770 <__lshift>
 8005cfe:	4682      	mov	sl, r0
 8005d00:	9b06      	ldr	r3, [sp, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dd05      	ble.n	8005d12 <_dtoa_r+0x83a>
 8005d06:	4631      	mov	r1, r6
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 fd30 	bl	8006770 <__lshift>
 8005d10:	4606      	mov	r6, r0
 8005d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d072      	beq.n	8005dfe <_dtoa_r+0x926>
 8005d18:	4631      	mov	r1, r6
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	f000 fd94 	bl	8006848 <__mcmp>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	da6c      	bge.n	8005dfe <_dtoa_r+0x926>
 8005d24:	2300      	movs	r3, #0
 8005d26:	4651      	mov	r1, sl
 8005d28:	220a      	movs	r2, #10
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fb28 	bl	8006380 <__multadd>
 8005d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d36:	4682      	mov	sl, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 81b0 	beq.w	800609e <_dtoa_r+0xbc6>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4639      	mov	r1, r7
 8005d42:	220a      	movs	r2, #10
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fb1b 	bl	8006380 <__multadd>
 8005d4a:	9b01      	ldr	r3, [sp, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	4607      	mov	r7, r0
 8005d50:	f300 8096 	bgt.w	8005e80 <_dtoa_r+0x9a8>
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	dc59      	bgt.n	8005e0e <_dtoa_r+0x936>
 8005d5a:	e091      	b.n	8005e80 <_dtoa_r+0x9a8>
 8005d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d62:	e758      	b.n	8005c16 <_dtoa_r+0x73e>
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	1e5e      	subs	r6, r3, #1
 8005d68:	9b08      	ldr	r3, [sp, #32]
 8005d6a:	42b3      	cmp	r3, r6
 8005d6c:	bfbf      	itttt	lt
 8005d6e:	9b08      	ldrlt	r3, [sp, #32]
 8005d70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005d72:	9608      	strlt	r6, [sp, #32]
 8005d74:	1af3      	sublt	r3, r6, r3
 8005d76:	bfb4      	ite	lt
 8005d78:	18d2      	addlt	r2, r2, r3
 8005d7a:	1b9e      	subge	r6, r3, r6
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	bfbc      	itt	lt
 8005d80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005d82:	2600      	movlt	r6, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfb7      	itett	lt
 8005d88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005d8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005d90:	1a9d      	sublt	r5, r3, r2
 8005d92:	2300      	movlt	r3, #0
 8005d94:	e741      	b.n	8005c1a <_dtoa_r+0x742>
 8005d96:	9e08      	ldr	r6, [sp, #32]
 8005d98:	9d05      	ldr	r5, [sp, #20]
 8005d9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d9c:	e748      	b.n	8005c30 <_dtoa_r+0x758>
 8005d9e:	9a08      	ldr	r2, [sp, #32]
 8005da0:	e770      	b.n	8005c84 <_dtoa_r+0x7ac>
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	dc19      	bgt.n	8005ddc <_dtoa_r+0x904>
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	b9bb      	cbnz	r3, 8005ddc <_dtoa_r+0x904>
 8005dac:	9b03      	ldr	r3, [sp, #12]
 8005dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db2:	b99b      	cbnz	r3, 8005ddc <_dtoa_r+0x904>
 8005db4:	9b03      	ldr	r3, [sp, #12]
 8005db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	0d1b      	lsrs	r3, r3, #20
 8005dbc:	051b      	lsls	r3, r3, #20
 8005dbe:	b183      	cbz	r3, 8005de2 <_dtoa_r+0x90a>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	9b06      	ldr	r3, [sp, #24]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	9306      	str	r3, [sp, #24]
 8005dcc:	f04f 0801 	mov.w	r8, #1
 8005dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f47f af6f 	bne.w	8005cb6 <_dtoa_r+0x7de>
 8005dd8:	2001      	movs	r0, #1
 8005dda:	e774      	b.n	8005cc6 <_dtoa_r+0x7ee>
 8005ddc:	f04f 0800 	mov.w	r8, #0
 8005de0:	e7f6      	b.n	8005dd0 <_dtoa_r+0x8f8>
 8005de2:	4698      	mov	r8, r3
 8005de4:	e7f4      	b.n	8005dd0 <_dtoa_r+0x8f8>
 8005de6:	d082      	beq.n	8005cee <_dtoa_r+0x816>
 8005de8:	9a05      	ldr	r2, [sp, #20]
 8005dea:	331c      	adds	r3, #28
 8005dec:	441a      	add	r2, r3
 8005dee:	9205      	str	r2, [sp, #20]
 8005df0:	9a06      	ldr	r2, [sp, #24]
 8005df2:	441a      	add	r2, r3
 8005df4:	441d      	add	r5, r3
 8005df6:	9206      	str	r2, [sp, #24]
 8005df8:	e779      	b.n	8005cee <_dtoa_r+0x816>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	e7f4      	b.n	8005de8 <_dtoa_r+0x910>
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dc37      	bgt.n	8005e74 <_dtoa_r+0x99c>
 8005e04:	9b07      	ldr	r3, [sp, #28]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	dd34      	ble.n	8005e74 <_dtoa_r+0x99c>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	b963      	cbnz	r3, 8005e2c <_dtoa_r+0x954>
 8005e12:	4631      	mov	r1, r6
 8005e14:	2205      	movs	r2, #5
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 fab2 	bl	8006380 <__multadd>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	4606      	mov	r6, r0
 8005e20:	4650      	mov	r0, sl
 8005e22:	f000 fd11 	bl	8006848 <__mcmp>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	f73f adbb 	bgt.w	80059a2 <_dtoa_r+0x4ca>
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	9d00      	ldr	r5, [sp, #0]
 8005e30:	ea6f 0b03 	mvn.w	fp, r3
 8005e34:	f04f 0800 	mov.w	r8, #0
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fa7e 	bl	800633c <_Bfree>
 8005e40:	2f00      	cmp	r7, #0
 8005e42:	f43f aeab 	beq.w	8005b9c <_dtoa_r+0x6c4>
 8005e46:	f1b8 0f00 	cmp.w	r8, #0
 8005e4a:	d005      	beq.n	8005e58 <_dtoa_r+0x980>
 8005e4c:	45b8      	cmp	r8, r7
 8005e4e:	d003      	beq.n	8005e58 <_dtoa_r+0x980>
 8005e50:	4641      	mov	r1, r8
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fa72 	bl	800633c <_Bfree>
 8005e58:	4639      	mov	r1, r7
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 fa6e 	bl	800633c <_Bfree>
 8005e60:	e69c      	b.n	8005b9c <_dtoa_r+0x6c4>
 8005e62:	2600      	movs	r6, #0
 8005e64:	4637      	mov	r7, r6
 8005e66:	e7e1      	b.n	8005e2c <_dtoa_r+0x954>
 8005e68:	46bb      	mov	fp, r7
 8005e6a:	4637      	mov	r7, r6
 8005e6c:	e599      	b.n	80059a2 <_dtoa_r+0x4ca>
 8005e6e:	bf00      	nop
 8005e70:	40240000 	.word	0x40240000
 8005e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 80c8 	beq.w	800600c <_dtoa_r+0xb34>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	dd05      	ble.n	8005e90 <_dtoa_r+0x9b8>
 8005e84:	4639      	mov	r1, r7
 8005e86:	462a      	mov	r2, r5
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fc71 	bl	8006770 <__lshift>
 8005e8e:	4607      	mov	r7, r0
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	d05b      	beq.n	8005f4e <_dtoa_r+0xa76>
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 fa0f 	bl	80062bc <_Balloc>
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	b928      	cbnz	r0, 8005eae <_dtoa_r+0x9d6>
 8005ea2:	4b83      	ldr	r3, [pc, #524]	; (80060b0 <_dtoa_r+0xbd8>)
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005eaa:	f7ff bb2e 	b.w	800550a <_dtoa_r+0x32>
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	3202      	adds	r2, #2
 8005eb2:	0092      	lsls	r2, r2, #2
 8005eb4:	f107 010c 	add.w	r1, r7, #12
 8005eb8:	300c      	adds	r0, #12
 8005eba:	f001 ff85 	bl	8007dc8 <memcpy>
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fc54 	bl	8006770 <__lshift>
 8005ec8:	9b00      	ldr	r3, [sp, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	9308      	str	r3, [sp, #32]
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	46b8      	mov	r8, r7
 8005ede:	9306      	str	r3, [sp, #24]
 8005ee0:	4607      	mov	r7, r0
 8005ee2:	9b04      	ldr	r3, [sp, #16]
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	4650      	mov	r0, sl
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f7ff fa6c 	bl	80053c8 <quorem>
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	9002      	str	r0, [sp, #8]
 8005ef4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ef8:	4650      	mov	r0, sl
 8005efa:	f000 fca5 	bl	8006848 <__mcmp>
 8005efe:	463a      	mov	r2, r7
 8005f00:	9005      	str	r0, [sp, #20]
 8005f02:	4631      	mov	r1, r6
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fcbb 	bl	8006880 <__mdiff>
 8005f0a:	68c2      	ldr	r2, [r0, #12]
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	bb02      	cbnz	r2, 8005f52 <_dtoa_r+0xa7a>
 8005f10:	4601      	mov	r1, r0
 8005f12:	4650      	mov	r0, sl
 8005f14:	f000 fc98 	bl	8006848 <__mcmp>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f20:	f000 fa0c 	bl	800633c <_Bfree>
 8005f24:	9b07      	ldr	r3, [sp, #28]
 8005f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f28:	9d04      	ldr	r5, [sp, #16]
 8005f2a:	ea43 0102 	orr.w	r1, r3, r2
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	4319      	orrs	r1, r3
 8005f32:	d110      	bne.n	8005f56 <_dtoa_r+0xa7e>
 8005f34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f38:	d029      	beq.n	8005f8e <_dtoa_r+0xab6>
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd02      	ble.n	8005f46 <_dtoa_r+0xa6e>
 8005f40:	9b02      	ldr	r3, [sp, #8]
 8005f42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	f883 9000 	strb.w	r9, [r3]
 8005f4c:	e774      	b.n	8005e38 <_dtoa_r+0x960>
 8005f4e:	4638      	mov	r0, r7
 8005f50:	e7ba      	b.n	8005ec8 <_dtoa_r+0x9f0>
 8005f52:	2201      	movs	r2, #1
 8005f54:	e7e1      	b.n	8005f1a <_dtoa_r+0xa42>
 8005f56:	9b05      	ldr	r3, [sp, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	db04      	blt.n	8005f66 <_dtoa_r+0xa8e>
 8005f5c:	9907      	ldr	r1, [sp, #28]
 8005f5e:	430b      	orrs	r3, r1
 8005f60:	9906      	ldr	r1, [sp, #24]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	d120      	bne.n	8005fa8 <_dtoa_r+0xad0>
 8005f66:	2a00      	cmp	r2, #0
 8005f68:	dded      	ble.n	8005f46 <_dtoa_r+0xa6e>
 8005f6a:	4651      	mov	r1, sl
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f000 fbfe 	bl	8006770 <__lshift>
 8005f74:	4631      	mov	r1, r6
 8005f76:	4682      	mov	sl, r0
 8005f78:	f000 fc66 	bl	8006848 <__mcmp>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	dc03      	bgt.n	8005f88 <_dtoa_r+0xab0>
 8005f80:	d1e1      	bne.n	8005f46 <_dtoa_r+0xa6e>
 8005f82:	f019 0f01 	tst.w	r9, #1
 8005f86:	d0de      	beq.n	8005f46 <_dtoa_r+0xa6e>
 8005f88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f8c:	d1d8      	bne.n	8005f40 <_dtoa_r+0xa68>
 8005f8e:	9a01      	ldr	r2, [sp, #4]
 8005f90:	2339      	movs	r3, #57	; 0x39
 8005f92:	7013      	strb	r3, [r2, #0]
 8005f94:	462b      	mov	r3, r5
 8005f96:	461d      	mov	r5, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f9e:	2a39      	cmp	r2, #57	; 0x39
 8005fa0:	d06c      	beq.n	800607c <_dtoa_r+0xba4>
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e747      	b.n	8005e38 <_dtoa_r+0x960>
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	dd07      	ble.n	8005fbc <_dtoa_r+0xae4>
 8005fac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fb0:	d0ed      	beq.n	8005f8e <_dtoa_r+0xab6>
 8005fb2:	9a01      	ldr	r2, [sp, #4]
 8005fb4:	f109 0301 	add.w	r3, r9, #1
 8005fb8:	7013      	strb	r3, [r2, #0]
 8005fba:	e73d      	b.n	8005e38 <_dtoa_r+0x960>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	9a08      	ldr	r2, [sp, #32]
 8005fc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d043      	beq.n	8006050 <_dtoa_r+0xb78>
 8005fc8:	4651      	mov	r1, sl
 8005fca:	2300      	movs	r3, #0
 8005fcc:	220a      	movs	r2, #10
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 f9d6 	bl	8006380 <__multadd>
 8005fd4:	45b8      	cmp	r8, r7
 8005fd6:	4682      	mov	sl, r0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	f04f 020a 	mov.w	r2, #10
 8005fe0:	4641      	mov	r1, r8
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	d107      	bne.n	8005ff6 <_dtoa_r+0xb1e>
 8005fe6:	f000 f9cb 	bl	8006380 <__multadd>
 8005fea:	4680      	mov	r8, r0
 8005fec:	4607      	mov	r7, r0
 8005fee:	9b04      	ldr	r3, [sp, #16]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	9304      	str	r3, [sp, #16]
 8005ff4:	e775      	b.n	8005ee2 <_dtoa_r+0xa0a>
 8005ff6:	f000 f9c3 	bl	8006380 <__multadd>
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	2300      	movs	r3, #0
 8006000:	220a      	movs	r2, #10
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f9bc 	bl	8006380 <__multadd>
 8006008:	4607      	mov	r7, r0
 800600a:	e7f0      	b.n	8005fee <_dtoa_r+0xb16>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	9d00      	ldr	r5, [sp, #0]
 8006012:	4631      	mov	r1, r6
 8006014:	4650      	mov	r0, sl
 8006016:	f7ff f9d7 	bl	80053c8 <quorem>
 800601a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	f805 9b01 	strb.w	r9, [r5], #1
 8006024:	1aea      	subs	r2, r5, r3
 8006026:	9b01      	ldr	r3, [sp, #4]
 8006028:	4293      	cmp	r3, r2
 800602a:	dd07      	ble.n	800603c <_dtoa_r+0xb64>
 800602c:	4651      	mov	r1, sl
 800602e:	2300      	movs	r3, #0
 8006030:	220a      	movs	r2, #10
 8006032:	4620      	mov	r0, r4
 8006034:	f000 f9a4 	bl	8006380 <__multadd>
 8006038:	4682      	mov	sl, r0
 800603a:	e7ea      	b.n	8006012 <_dtoa_r+0xb3a>
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	bfc8      	it	gt
 8006042:	461d      	movgt	r5, r3
 8006044:	9b00      	ldr	r3, [sp, #0]
 8006046:	bfd8      	it	le
 8006048:	2501      	movle	r5, #1
 800604a:	441d      	add	r5, r3
 800604c:	f04f 0800 	mov.w	r8, #0
 8006050:	4651      	mov	r1, sl
 8006052:	2201      	movs	r2, #1
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fb8b 	bl	8006770 <__lshift>
 800605a:	4631      	mov	r1, r6
 800605c:	4682      	mov	sl, r0
 800605e:	f000 fbf3 	bl	8006848 <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	dc96      	bgt.n	8005f94 <_dtoa_r+0xabc>
 8006066:	d102      	bne.n	800606e <_dtoa_r+0xb96>
 8006068:	f019 0f01 	tst.w	r9, #1
 800606c:	d192      	bne.n	8005f94 <_dtoa_r+0xabc>
 800606e:	462b      	mov	r3, r5
 8006070:	461d      	mov	r5, r3
 8006072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006076:	2a30      	cmp	r2, #48	; 0x30
 8006078:	d0fa      	beq.n	8006070 <_dtoa_r+0xb98>
 800607a:	e6dd      	b.n	8005e38 <_dtoa_r+0x960>
 800607c:	9a00      	ldr	r2, [sp, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d189      	bne.n	8005f96 <_dtoa_r+0xabe>
 8006082:	f10b 0b01 	add.w	fp, fp, #1
 8006086:	2331      	movs	r3, #49	; 0x31
 8006088:	e796      	b.n	8005fb8 <_dtoa_r+0xae0>
 800608a:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <_dtoa_r+0xbdc>)
 800608c:	f7ff ba99 	b.w	80055c2 <_dtoa_r+0xea>
 8006090:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f aa6d 	bne.w	8005572 <_dtoa_r+0x9a>
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <_dtoa_r+0xbe0>)
 800609a:	f7ff ba92 	b.w	80055c2 <_dtoa_r+0xea>
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	dcb5      	bgt.n	8006010 <_dtoa_r+0xb38>
 80060a4:	9b07      	ldr	r3, [sp, #28]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	f73f aeb1 	bgt.w	8005e0e <_dtoa_r+0x936>
 80060ac:	e7b0      	b.n	8006010 <_dtoa_r+0xb38>
 80060ae:	bf00      	nop
 80060b0:	08008c49 	.word	0x08008c49
 80060b4:	08008ba4 	.word	0x08008ba4
 80060b8:	08008bcd 	.word	0x08008bcd

080060bc <_free_r>:
 80060bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060be:	2900      	cmp	r1, #0
 80060c0:	d044      	beq.n	800614c <_free_r+0x90>
 80060c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c6:	9001      	str	r0, [sp, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f1a1 0404 	sub.w	r4, r1, #4
 80060ce:	bfb8      	it	lt
 80060d0:	18e4      	addlt	r4, r4, r3
 80060d2:	f000 f8e7 	bl	80062a4 <__malloc_lock>
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <_free_r+0x94>)
 80060d8:	9801      	ldr	r0, [sp, #4]
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	b933      	cbnz	r3, 80060ec <_free_r+0x30>
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	6014      	str	r4, [r2, #0]
 80060e2:	b003      	add	sp, #12
 80060e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e8:	f000 b8e2 	b.w	80062b0 <__malloc_unlock>
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d908      	bls.n	8006102 <_free_r+0x46>
 80060f0:	6825      	ldr	r5, [r4, #0]
 80060f2:	1961      	adds	r1, r4, r5
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf01      	itttt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	1949      	addeq	r1, r1, r5
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	e7ed      	b.n	80060de <_free_r+0x22>
 8006102:	461a      	mov	r2, r3
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	b10b      	cbz	r3, 800610c <_free_r+0x50>
 8006108:	42a3      	cmp	r3, r4
 800610a:	d9fa      	bls.n	8006102 <_free_r+0x46>
 800610c:	6811      	ldr	r1, [r2, #0]
 800610e:	1855      	adds	r5, r2, r1
 8006110:	42a5      	cmp	r5, r4
 8006112:	d10b      	bne.n	800612c <_free_r+0x70>
 8006114:	6824      	ldr	r4, [r4, #0]
 8006116:	4421      	add	r1, r4
 8006118:	1854      	adds	r4, r2, r1
 800611a:	42a3      	cmp	r3, r4
 800611c:	6011      	str	r1, [r2, #0]
 800611e:	d1e0      	bne.n	80060e2 <_free_r+0x26>
 8006120:	681c      	ldr	r4, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	6053      	str	r3, [r2, #4]
 8006126:	440c      	add	r4, r1
 8006128:	6014      	str	r4, [r2, #0]
 800612a:	e7da      	b.n	80060e2 <_free_r+0x26>
 800612c:	d902      	bls.n	8006134 <_free_r+0x78>
 800612e:	230c      	movs	r3, #12
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	e7d6      	b.n	80060e2 <_free_r+0x26>
 8006134:	6825      	ldr	r5, [r4, #0]
 8006136:	1961      	adds	r1, r4, r5
 8006138:	428b      	cmp	r3, r1
 800613a:	bf04      	itt	eq
 800613c:	6819      	ldreq	r1, [r3, #0]
 800613e:	685b      	ldreq	r3, [r3, #4]
 8006140:	6063      	str	r3, [r4, #4]
 8006142:	bf04      	itt	eq
 8006144:	1949      	addeq	r1, r1, r5
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	6054      	str	r4, [r2, #4]
 800614a:	e7ca      	b.n	80060e2 <_free_r+0x26>
 800614c:	b003      	add	sp, #12
 800614e:	bd30      	pop	{r4, r5, pc}
 8006150:	20000440 	.word	0x20000440

08006154 <malloc>:
 8006154:	4b02      	ldr	r3, [pc, #8]	; (8006160 <malloc+0xc>)
 8006156:	4601      	mov	r1, r0
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	f000 b823 	b.w	80061a4 <_malloc_r>
 800615e:	bf00      	nop
 8006160:	20000068 	.word	0x20000068

08006164 <sbrk_aligned>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4e0e      	ldr	r6, [pc, #56]	; (80061a0 <sbrk_aligned+0x3c>)
 8006168:	460c      	mov	r4, r1
 800616a:	6831      	ldr	r1, [r6, #0]
 800616c:	4605      	mov	r5, r0
 800616e:	b911      	cbnz	r1, 8006176 <sbrk_aligned+0x12>
 8006170:	f001 fe1a 	bl	8007da8 <_sbrk_r>
 8006174:	6030      	str	r0, [r6, #0]
 8006176:	4621      	mov	r1, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f001 fe15 	bl	8007da8 <_sbrk_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d00a      	beq.n	8006198 <sbrk_aligned+0x34>
 8006182:	1cc4      	adds	r4, r0, #3
 8006184:	f024 0403 	bic.w	r4, r4, #3
 8006188:	42a0      	cmp	r0, r4
 800618a:	d007      	beq.n	800619c <sbrk_aligned+0x38>
 800618c:	1a21      	subs	r1, r4, r0
 800618e:	4628      	mov	r0, r5
 8006190:	f001 fe0a 	bl	8007da8 <_sbrk_r>
 8006194:	3001      	adds	r0, #1
 8006196:	d101      	bne.n	800619c <sbrk_aligned+0x38>
 8006198:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800619c:	4620      	mov	r0, r4
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	20000444 	.word	0x20000444

080061a4 <_malloc_r>:
 80061a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a8:	1ccd      	adds	r5, r1, #3
 80061aa:	f025 0503 	bic.w	r5, r5, #3
 80061ae:	3508      	adds	r5, #8
 80061b0:	2d0c      	cmp	r5, #12
 80061b2:	bf38      	it	cc
 80061b4:	250c      	movcc	r5, #12
 80061b6:	2d00      	cmp	r5, #0
 80061b8:	4607      	mov	r7, r0
 80061ba:	db01      	blt.n	80061c0 <_malloc_r+0x1c>
 80061bc:	42a9      	cmp	r1, r5
 80061be:	d905      	bls.n	80061cc <_malloc_r+0x28>
 80061c0:	230c      	movs	r3, #12
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	2600      	movs	r6, #0
 80061c6:	4630      	mov	r0, r6
 80061c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062a0 <_malloc_r+0xfc>
 80061d0:	f000 f868 	bl	80062a4 <__malloc_lock>
 80061d4:	f8d8 3000 	ldr.w	r3, [r8]
 80061d8:	461c      	mov	r4, r3
 80061da:	bb5c      	cbnz	r4, 8006234 <_malloc_r+0x90>
 80061dc:	4629      	mov	r1, r5
 80061de:	4638      	mov	r0, r7
 80061e0:	f7ff ffc0 	bl	8006164 <sbrk_aligned>
 80061e4:	1c43      	adds	r3, r0, #1
 80061e6:	4604      	mov	r4, r0
 80061e8:	d155      	bne.n	8006296 <_malloc_r+0xf2>
 80061ea:	f8d8 4000 	ldr.w	r4, [r8]
 80061ee:	4626      	mov	r6, r4
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	d145      	bne.n	8006280 <_malloc_r+0xdc>
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d048      	beq.n	800628a <_malloc_r+0xe6>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	4631      	mov	r1, r6
 80061fc:	4638      	mov	r0, r7
 80061fe:	eb04 0903 	add.w	r9, r4, r3
 8006202:	f001 fdd1 	bl	8007da8 <_sbrk_r>
 8006206:	4581      	cmp	r9, r0
 8006208:	d13f      	bne.n	800628a <_malloc_r+0xe6>
 800620a:	6821      	ldr	r1, [r4, #0]
 800620c:	1a6d      	subs	r5, r5, r1
 800620e:	4629      	mov	r1, r5
 8006210:	4638      	mov	r0, r7
 8006212:	f7ff ffa7 	bl	8006164 <sbrk_aligned>
 8006216:	3001      	adds	r0, #1
 8006218:	d037      	beq.n	800628a <_malloc_r+0xe6>
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	442b      	add	r3, r5
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	f8d8 3000 	ldr.w	r3, [r8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d038      	beq.n	800629a <_malloc_r+0xf6>
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	42a2      	cmp	r2, r4
 800622c:	d12b      	bne.n	8006286 <_malloc_r+0xe2>
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	e00f      	b.n	8006254 <_malloc_r+0xb0>
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	1b52      	subs	r2, r2, r5
 8006238:	d41f      	bmi.n	800627a <_malloc_r+0xd6>
 800623a:	2a0b      	cmp	r2, #11
 800623c:	d917      	bls.n	800626e <_malloc_r+0xca>
 800623e:	1961      	adds	r1, r4, r5
 8006240:	42a3      	cmp	r3, r4
 8006242:	6025      	str	r5, [r4, #0]
 8006244:	bf18      	it	ne
 8006246:	6059      	strne	r1, [r3, #4]
 8006248:	6863      	ldr	r3, [r4, #4]
 800624a:	bf08      	it	eq
 800624c:	f8c8 1000 	streq.w	r1, [r8]
 8006250:	5162      	str	r2, [r4, r5]
 8006252:	604b      	str	r3, [r1, #4]
 8006254:	4638      	mov	r0, r7
 8006256:	f104 060b 	add.w	r6, r4, #11
 800625a:	f000 f829 	bl	80062b0 <__malloc_unlock>
 800625e:	f026 0607 	bic.w	r6, r6, #7
 8006262:	1d23      	adds	r3, r4, #4
 8006264:	1af2      	subs	r2, r6, r3
 8006266:	d0ae      	beq.n	80061c6 <_malloc_r+0x22>
 8006268:	1b9b      	subs	r3, r3, r6
 800626a:	50a3      	str	r3, [r4, r2]
 800626c:	e7ab      	b.n	80061c6 <_malloc_r+0x22>
 800626e:	42a3      	cmp	r3, r4
 8006270:	6862      	ldr	r2, [r4, #4]
 8006272:	d1dd      	bne.n	8006230 <_malloc_r+0x8c>
 8006274:	f8c8 2000 	str.w	r2, [r8]
 8006278:	e7ec      	b.n	8006254 <_malloc_r+0xb0>
 800627a:	4623      	mov	r3, r4
 800627c:	6864      	ldr	r4, [r4, #4]
 800627e:	e7ac      	b.n	80061da <_malloc_r+0x36>
 8006280:	4634      	mov	r4, r6
 8006282:	6876      	ldr	r6, [r6, #4]
 8006284:	e7b4      	b.n	80061f0 <_malloc_r+0x4c>
 8006286:	4613      	mov	r3, r2
 8006288:	e7cc      	b.n	8006224 <_malloc_r+0x80>
 800628a:	230c      	movs	r3, #12
 800628c:	603b      	str	r3, [r7, #0]
 800628e:	4638      	mov	r0, r7
 8006290:	f000 f80e 	bl	80062b0 <__malloc_unlock>
 8006294:	e797      	b.n	80061c6 <_malloc_r+0x22>
 8006296:	6025      	str	r5, [r4, #0]
 8006298:	e7dc      	b.n	8006254 <_malloc_r+0xb0>
 800629a:	605b      	str	r3, [r3, #4]
 800629c:	deff      	udf	#255	; 0xff
 800629e:	bf00      	nop
 80062a0:	20000440 	.word	0x20000440

080062a4 <__malloc_lock>:
 80062a4:	4801      	ldr	r0, [pc, #4]	; (80062ac <__malloc_lock+0x8>)
 80062a6:	f7ff b886 	b.w	80053b6 <__retarget_lock_acquire_recursive>
 80062aa:	bf00      	nop
 80062ac:	2000043c 	.word	0x2000043c

080062b0 <__malloc_unlock>:
 80062b0:	4801      	ldr	r0, [pc, #4]	; (80062b8 <__malloc_unlock+0x8>)
 80062b2:	f7ff b881 	b.w	80053b8 <__retarget_lock_release_recursive>
 80062b6:	bf00      	nop
 80062b8:	2000043c 	.word	0x2000043c

080062bc <_Balloc>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	69c6      	ldr	r6, [r0, #28]
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	b976      	cbnz	r6, 80062e4 <_Balloc+0x28>
 80062c6:	2010      	movs	r0, #16
 80062c8:	f7ff ff44 	bl	8006154 <malloc>
 80062cc:	4602      	mov	r2, r0
 80062ce:	61e0      	str	r0, [r4, #28]
 80062d0:	b920      	cbnz	r0, 80062dc <_Balloc+0x20>
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <_Balloc+0x78>)
 80062d4:	4818      	ldr	r0, [pc, #96]	; (8006338 <_Balloc+0x7c>)
 80062d6:	216b      	movs	r1, #107	; 0x6b
 80062d8:	f001 fd8e 	bl	8007df8 <__assert_func>
 80062dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062e0:	6006      	str	r6, [r0, #0]
 80062e2:	60c6      	str	r6, [r0, #12]
 80062e4:	69e6      	ldr	r6, [r4, #28]
 80062e6:	68f3      	ldr	r3, [r6, #12]
 80062e8:	b183      	cbz	r3, 800630c <_Balloc+0x50>
 80062ea:	69e3      	ldr	r3, [r4, #28]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062f2:	b9b8      	cbnz	r0, 8006324 <_Balloc+0x68>
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f605 	lsl.w	r6, r1, r5
 80062fa:	1d72      	adds	r2, r6, #5
 80062fc:	0092      	lsls	r2, r2, #2
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 fd98 	bl	8007e34 <_calloc_r>
 8006304:	b160      	cbz	r0, 8006320 <_Balloc+0x64>
 8006306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800630a:	e00e      	b.n	800632a <_Balloc+0x6e>
 800630c:	2221      	movs	r2, #33	; 0x21
 800630e:	2104      	movs	r1, #4
 8006310:	4620      	mov	r0, r4
 8006312:	f001 fd8f 	bl	8007e34 <_calloc_r>
 8006316:	69e3      	ldr	r3, [r4, #28]
 8006318:	60f0      	str	r0, [r6, #12]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <_Balloc+0x2e>
 8006320:	2000      	movs	r0, #0
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	6802      	ldr	r2, [r0, #0]
 8006326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800632a:	2300      	movs	r3, #0
 800632c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006330:	e7f7      	b.n	8006322 <_Balloc+0x66>
 8006332:	bf00      	nop
 8006334:	08008bda 	.word	0x08008bda
 8006338:	08008c5a 	.word	0x08008c5a

0800633c <_Bfree>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	69c6      	ldr	r6, [r0, #28]
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b976      	cbnz	r6, 8006364 <_Bfree+0x28>
 8006346:	2010      	movs	r0, #16
 8006348:	f7ff ff04 	bl	8006154 <malloc>
 800634c:	4602      	mov	r2, r0
 800634e:	61e8      	str	r0, [r5, #28]
 8006350:	b920      	cbnz	r0, 800635c <_Bfree+0x20>
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_Bfree+0x3c>)
 8006354:	4809      	ldr	r0, [pc, #36]	; (800637c <_Bfree+0x40>)
 8006356:	218f      	movs	r1, #143	; 0x8f
 8006358:	f001 fd4e 	bl	8007df8 <__assert_func>
 800635c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006360:	6006      	str	r6, [r0, #0]
 8006362:	60c6      	str	r6, [r0, #12]
 8006364:	b13c      	cbz	r4, 8006376 <_Bfree+0x3a>
 8006366:	69eb      	ldr	r3, [r5, #28]
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006370:	6021      	str	r1, [r4, #0]
 8006372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	08008bda 	.word	0x08008bda
 800637c:	08008c5a 	.word	0x08008c5a

08006380 <__multadd>:
 8006380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006384:	690d      	ldr	r5, [r1, #16]
 8006386:	4607      	mov	r7, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461e      	mov	r6, r3
 800638c:	f101 0c14 	add.w	ip, r1, #20
 8006390:	2000      	movs	r0, #0
 8006392:	f8dc 3000 	ldr.w	r3, [ip]
 8006396:	b299      	uxth	r1, r3
 8006398:	fb02 6101 	mla	r1, r2, r1, r6
 800639c:	0c1e      	lsrs	r6, r3, #16
 800639e:	0c0b      	lsrs	r3, r1, #16
 80063a0:	fb02 3306 	mla	r3, r2, r6, r3
 80063a4:	b289      	uxth	r1, r1
 80063a6:	3001      	adds	r0, #1
 80063a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80063ac:	4285      	cmp	r5, r0
 80063ae:	f84c 1b04 	str.w	r1, [ip], #4
 80063b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80063b6:	dcec      	bgt.n	8006392 <__multadd+0x12>
 80063b8:	b30e      	cbz	r6, 80063fe <__multadd+0x7e>
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	42ab      	cmp	r3, r5
 80063be:	dc19      	bgt.n	80063f4 <__multadd+0x74>
 80063c0:	6861      	ldr	r1, [r4, #4]
 80063c2:	4638      	mov	r0, r7
 80063c4:	3101      	adds	r1, #1
 80063c6:	f7ff ff79 	bl	80062bc <_Balloc>
 80063ca:	4680      	mov	r8, r0
 80063cc:	b928      	cbnz	r0, 80063da <__multadd+0x5a>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b0c      	ldr	r3, [pc, #48]	; (8006404 <__multadd+0x84>)
 80063d2:	480d      	ldr	r0, [pc, #52]	; (8006408 <__multadd+0x88>)
 80063d4:	21ba      	movs	r1, #186	; 0xba
 80063d6:	f001 fd0f 	bl	8007df8 <__assert_func>
 80063da:	6922      	ldr	r2, [r4, #16]
 80063dc:	3202      	adds	r2, #2
 80063de:	f104 010c 	add.w	r1, r4, #12
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	300c      	adds	r0, #12
 80063e6:	f001 fcef 	bl	8007dc8 <memcpy>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4638      	mov	r0, r7
 80063ee:	f7ff ffa5 	bl	800633c <_Bfree>
 80063f2:	4644      	mov	r4, r8
 80063f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063f8:	3501      	adds	r5, #1
 80063fa:	615e      	str	r6, [r3, #20]
 80063fc:	6125      	str	r5, [r4, #16]
 80063fe:	4620      	mov	r0, r4
 8006400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006404:	08008c49 	.word	0x08008c49
 8006408:	08008c5a 	.word	0x08008c5a

0800640c <__s2b>:
 800640c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006410:	460c      	mov	r4, r1
 8006412:	4615      	mov	r5, r2
 8006414:	461f      	mov	r7, r3
 8006416:	2209      	movs	r2, #9
 8006418:	3308      	adds	r3, #8
 800641a:	4606      	mov	r6, r0
 800641c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006420:	2100      	movs	r1, #0
 8006422:	2201      	movs	r2, #1
 8006424:	429a      	cmp	r2, r3
 8006426:	db09      	blt.n	800643c <__s2b+0x30>
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff ff47 	bl	80062bc <_Balloc>
 800642e:	b940      	cbnz	r0, 8006442 <__s2b+0x36>
 8006430:	4602      	mov	r2, r0
 8006432:	4b19      	ldr	r3, [pc, #100]	; (8006498 <__s2b+0x8c>)
 8006434:	4819      	ldr	r0, [pc, #100]	; (800649c <__s2b+0x90>)
 8006436:	21d3      	movs	r1, #211	; 0xd3
 8006438:	f001 fcde 	bl	8007df8 <__assert_func>
 800643c:	0052      	lsls	r2, r2, #1
 800643e:	3101      	adds	r1, #1
 8006440:	e7f0      	b.n	8006424 <__s2b+0x18>
 8006442:	9b08      	ldr	r3, [sp, #32]
 8006444:	6143      	str	r3, [r0, #20]
 8006446:	2d09      	cmp	r5, #9
 8006448:	f04f 0301 	mov.w	r3, #1
 800644c:	6103      	str	r3, [r0, #16]
 800644e:	dd16      	ble.n	800647e <__s2b+0x72>
 8006450:	f104 0909 	add.w	r9, r4, #9
 8006454:	46c8      	mov	r8, r9
 8006456:	442c      	add	r4, r5
 8006458:	f818 3b01 	ldrb.w	r3, [r8], #1
 800645c:	4601      	mov	r1, r0
 800645e:	3b30      	subs	r3, #48	; 0x30
 8006460:	220a      	movs	r2, #10
 8006462:	4630      	mov	r0, r6
 8006464:	f7ff ff8c 	bl	8006380 <__multadd>
 8006468:	45a0      	cmp	r8, r4
 800646a:	d1f5      	bne.n	8006458 <__s2b+0x4c>
 800646c:	f1a5 0408 	sub.w	r4, r5, #8
 8006470:	444c      	add	r4, r9
 8006472:	1b2d      	subs	r5, r5, r4
 8006474:	1963      	adds	r3, r4, r5
 8006476:	42bb      	cmp	r3, r7
 8006478:	db04      	blt.n	8006484 <__s2b+0x78>
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	340a      	adds	r4, #10
 8006480:	2509      	movs	r5, #9
 8006482:	e7f6      	b.n	8006472 <__s2b+0x66>
 8006484:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006488:	4601      	mov	r1, r0
 800648a:	3b30      	subs	r3, #48	; 0x30
 800648c:	220a      	movs	r2, #10
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ff76 	bl	8006380 <__multadd>
 8006494:	e7ee      	b.n	8006474 <__s2b+0x68>
 8006496:	bf00      	nop
 8006498:	08008c49 	.word	0x08008c49
 800649c:	08008c5a 	.word	0x08008c5a

080064a0 <__hi0bits>:
 80064a0:	0c03      	lsrs	r3, r0, #16
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	b9d3      	cbnz	r3, 80064dc <__hi0bits+0x3c>
 80064a6:	0400      	lsls	r0, r0, #16
 80064a8:	2310      	movs	r3, #16
 80064aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064ae:	bf04      	itt	eq
 80064b0:	0200      	lsleq	r0, r0, #8
 80064b2:	3308      	addeq	r3, #8
 80064b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064b8:	bf04      	itt	eq
 80064ba:	0100      	lsleq	r0, r0, #4
 80064bc:	3304      	addeq	r3, #4
 80064be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064c2:	bf04      	itt	eq
 80064c4:	0080      	lsleq	r0, r0, #2
 80064c6:	3302      	addeq	r3, #2
 80064c8:	2800      	cmp	r0, #0
 80064ca:	db05      	blt.n	80064d8 <__hi0bits+0x38>
 80064cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064d0:	f103 0301 	add.w	r3, r3, #1
 80064d4:	bf08      	it	eq
 80064d6:	2320      	moveq	r3, #32
 80064d8:	4618      	mov	r0, r3
 80064da:	4770      	bx	lr
 80064dc:	2300      	movs	r3, #0
 80064de:	e7e4      	b.n	80064aa <__hi0bits+0xa>

080064e0 <__lo0bits>:
 80064e0:	6803      	ldr	r3, [r0, #0]
 80064e2:	f013 0207 	ands.w	r2, r3, #7
 80064e6:	d00c      	beq.n	8006502 <__lo0bits+0x22>
 80064e8:	07d9      	lsls	r1, r3, #31
 80064ea:	d422      	bmi.n	8006532 <__lo0bits+0x52>
 80064ec:	079a      	lsls	r2, r3, #30
 80064ee:	bf49      	itett	mi
 80064f0:	085b      	lsrmi	r3, r3, #1
 80064f2:	089b      	lsrpl	r3, r3, #2
 80064f4:	6003      	strmi	r3, [r0, #0]
 80064f6:	2201      	movmi	r2, #1
 80064f8:	bf5c      	itt	pl
 80064fa:	6003      	strpl	r3, [r0, #0]
 80064fc:	2202      	movpl	r2, #2
 80064fe:	4610      	mov	r0, r2
 8006500:	4770      	bx	lr
 8006502:	b299      	uxth	r1, r3
 8006504:	b909      	cbnz	r1, 800650a <__lo0bits+0x2a>
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	2210      	movs	r2, #16
 800650a:	b2d9      	uxtb	r1, r3
 800650c:	b909      	cbnz	r1, 8006512 <__lo0bits+0x32>
 800650e:	3208      	adds	r2, #8
 8006510:	0a1b      	lsrs	r3, r3, #8
 8006512:	0719      	lsls	r1, r3, #28
 8006514:	bf04      	itt	eq
 8006516:	091b      	lsreq	r3, r3, #4
 8006518:	3204      	addeq	r2, #4
 800651a:	0799      	lsls	r1, r3, #30
 800651c:	bf04      	itt	eq
 800651e:	089b      	lsreq	r3, r3, #2
 8006520:	3202      	addeq	r2, #2
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	d403      	bmi.n	800652e <__lo0bits+0x4e>
 8006526:	085b      	lsrs	r3, r3, #1
 8006528:	f102 0201 	add.w	r2, r2, #1
 800652c:	d003      	beq.n	8006536 <__lo0bits+0x56>
 800652e:	6003      	str	r3, [r0, #0]
 8006530:	e7e5      	b.n	80064fe <__lo0bits+0x1e>
 8006532:	2200      	movs	r2, #0
 8006534:	e7e3      	b.n	80064fe <__lo0bits+0x1e>
 8006536:	2220      	movs	r2, #32
 8006538:	e7e1      	b.n	80064fe <__lo0bits+0x1e>
	...

0800653c <__i2b>:
 800653c:	b510      	push	{r4, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	2101      	movs	r1, #1
 8006542:	f7ff febb 	bl	80062bc <_Balloc>
 8006546:	4602      	mov	r2, r0
 8006548:	b928      	cbnz	r0, 8006556 <__i2b+0x1a>
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <__i2b+0x24>)
 800654c:	4805      	ldr	r0, [pc, #20]	; (8006564 <__i2b+0x28>)
 800654e:	f240 1145 	movw	r1, #325	; 0x145
 8006552:	f001 fc51 	bl	8007df8 <__assert_func>
 8006556:	2301      	movs	r3, #1
 8006558:	6144      	str	r4, [r0, #20]
 800655a:	6103      	str	r3, [r0, #16]
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	08008c49 	.word	0x08008c49
 8006564:	08008c5a 	.word	0x08008c5a

08006568 <__multiply>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	4691      	mov	r9, r2
 800656e:	690a      	ldr	r2, [r1, #16]
 8006570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	bfb8      	it	lt
 8006578:	460b      	movlt	r3, r1
 800657a:	460c      	mov	r4, r1
 800657c:	bfbc      	itt	lt
 800657e:	464c      	movlt	r4, r9
 8006580:	4699      	movlt	r9, r3
 8006582:	6927      	ldr	r7, [r4, #16]
 8006584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	6861      	ldr	r1, [r4, #4]
 800658c:	eb07 060a 	add.w	r6, r7, sl
 8006590:	42b3      	cmp	r3, r6
 8006592:	b085      	sub	sp, #20
 8006594:	bfb8      	it	lt
 8006596:	3101      	addlt	r1, #1
 8006598:	f7ff fe90 	bl	80062bc <_Balloc>
 800659c:	b930      	cbnz	r0, 80065ac <__multiply+0x44>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b44      	ldr	r3, [pc, #272]	; (80066b4 <__multiply+0x14c>)
 80065a2:	4845      	ldr	r0, [pc, #276]	; (80066b8 <__multiply+0x150>)
 80065a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80065a8:	f001 fc26 	bl	8007df8 <__assert_func>
 80065ac:	f100 0514 	add.w	r5, r0, #20
 80065b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065b4:	462b      	mov	r3, r5
 80065b6:	2200      	movs	r2, #0
 80065b8:	4543      	cmp	r3, r8
 80065ba:	d321      	bcc.n	8006600 <__multiply+0x98>
 80065bc:	f104 0314 	add.w	r3, r4, #20
 80065c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065c4:	f109 0314 	add.w	r3, r9, #20
 80065c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065cc:	9202      	str	r2, [sp, #8]
 80065ce:	1b3a      	subs	r2, r7, r4
 80065d0:	3a15      	subs	r2, #21
 80065d2:	f022 0203 	bic.w	r2, r2, #3
 80065d6:	3204      	adds	r2, #4
 80065d8:	f104 0115 	add.w	r1, r4, #21
 80065dc:	428f      	cmp	r7, r1
 80065de:	bf38      	it	cc
 80065e0:	2204      	movcc	r2, #4
 80065e2:	9201      	str	r2, [sp, #4]
 80065e4:	9a02      	ldr	r2, [sp, #8]
 80065e6:	9303      	str	r3, [sp, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d80c      	bhi.n	8006606 <__multiply+0x9e>
 80065ec:	2e00      	cmp	r6, #0
 80065ee:	dd03      	ble.n	80065f8 <__multiply+0x90>
 80065f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d05b      	beq.n	80066b0 <__multiply+0x148>
 80065f8:	6106      	str	r6, [r0, #16]
 80065fa:	b005      	add	sp, #20
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006600:	f843 2b04 	str.w	r2, [r3], #4
 8006604:	e7d8      	b.n	80065b8 <__multiply+0x50>
 8006606:	f8b3 a000 	ldrh.w	sl, [r3]
 800660a:	f1ba 0f00 	cmp.w	sl, #0
 800660e:	d024      	beq.n	800665a <__multiply+0xf2>
 8006610:	f104 0e14 	add.w	lr, r4, #20
 8006614:	46a9      	mov	r9, r5
 8006616:	f04f 0c00 	mov.w	ip, #0
 800661a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800661e:	f8d9 1000 	ldr.w	r1, [r9]
 8006622:	fa1f fb82 	uxth.w	fp, r2
 8006626:	b289      	uxth	r1, r1
 8006628:	fb0a 110b 	mla	r1, sl, fp, r1
 800662c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006630:	f8d9 2000 	ldr.w	r2, [r9]
 8006634:	4461      	add	r1, ip
 8006636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800663a:	fb0a c20b 	mla	r2, sl, fp, ip
 800663e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006642:	b289      	uxth	r1, r1
 8006644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006648:	4577      	cmp	r7, lr
 800664a:	f849 1b04 	str.w	r1, [r9], #4
 800664e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006652:	d8e2      	bhi.n	800661a <__multiply+0xb2>
 8006654:	9a01      	ldr	r2, [sp, #4]
 8006656:	f845 c002 	str.w	ip, [r5, r2]
 800665a:	9a03      	ldr	r2, [sp, #12]
 800665c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006660:	3304      	adds	r3, #4
 8006662:	f1b9 0f00 	cmp.w	r9, #0
 8006666:	d021      	beq.n	80066ac <__multiply+0x144>
 8006668:	6829      	ldr	r1, [r5, #0]
 800666a:	f104 0c14 	add.w	ip, r4, #20
 800666e:	46ae      	mov	lr, r5
 8006670:	f04f 0a00 	mov.w	sl, #0
 8006674:	f8bc b000 	ldrh.w	fp, [ip]
 8006678:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800667c:	fb09 220b 	mla	r2, r9, fp, r2
 8006680:	4452      	add	r2, sl
 8006682:	b289      	uxth	r1, r1
 8006684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006688:	f84e 1b04 	str.w	r1, [lr], #4
 800668c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006694:	f8be 1000 	ldrh.w	r1, [lr]
 8006698:	fb09 110a 	mla	r1, r9, sl, r1
 800669c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80066a0:	4567      	cmp	r7, ip
 80066a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066a6:	d8e5      	bhi.n	8006674 <__multiply+0x10c>
 80066a8:	9a01      	ldr	r2, [sp, #4]
 80066aa:	50a9      	str	r1, [r5, r2]
 80066ac:	3504      	adds	r5, #4
 80066ae:	e799      	b.n	80065e4 <__multiply+0x7c>
 80066b0:	3e01      	subs	r6, #1
 80066b2:	e79b      	b.n	80065ec <__multiply+0x84>
 80066b4:	08008c49 	.word	0x08008c49
 80066b8:	08008c5a 	.word	0x08008c5a

080066bc <__pow5mult>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	4615      	mov	r5, r2
 80066c2:	f012 0203 	ands.w	r2, r2, #3
 80066c6:	4606      	mov	r6, r0
 80066c8:	460f      	mov	r7, r1
 80066ca:	d007      	beq.n	80066dc <__pow5mult+0x20>
 80066cc:	4c25      	ldr	r4, [pc, #148]	; (8006764 <__pow5mult+0xa8>)
 80066ce:	3a01      	subs	r2, #1
 80066d0:	2300      	movs	r3, #0
 80066d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066d6:	f7ff fe53 	bl	8006380 <__multadd>
 80066da:	4607      	mov	r7, r0
 80066dc:	10ad      	asrs	r5, r5, #2
 80066de:	d03d      	beq.n	800675c <__pow5mult+0xa0>
 80066e0:	69f4      	ldr	r4, [r6, #28]
 80066e2:	b97c      	cbnz	r4, 8006704 <__pow5mult+0x48>
 80066e4:	2010      	movs	r0, #16
 80066e6:	f7ff fd35 	bl	8006154 <malloc>
 80066ea:	4602      	mov	r2, r0
 80066ec:	61f0      	str	r0, [r6, #28]
 80066ee:	b928      	cbnz	r0, 80066fc <__pow5mult+0x40>
 80066f0:	4b1d      	ldr	r3, [pc, #116]	; (8006768 <__pow5mult+0xac>)
 80066f2:	481e      	ldr	r0, [pc, #120]	; (800676c <__pow5mult+0xb0>)
 80066f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80066f8:	f001 fb7e 	bl	8007df8 <__assert_func>
 80066fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006700:	6004      	str	r4, [r0, #0]
 8006702:	60c4      	str	r4, [r0, #12]
 8006704:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800670c:	b94c      	cbnz	r4, 8006722 <__pow5mult+0x66>
 800670e:	f240 2171 	movw	r1, #625	; 0x271
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ff12 	bl	800653c <__i2b>
 8006718:	2300      	movs	r3, #0
 800671a:	f8c8 0008 	str.w	r0, [r8, #8]
 800671e:	4604      	mov	r4, r0
 8006720:	6003      	str	r3, [r0, #0]
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	07eb      	lsls	r3, r5, #31
 8006728:	d50a      	bpl.n	8006740 <__pow5mult+0x84>
 800672a:	4639      	mov	r1, r7
 800672c:	4622      	mov	r2, r4
 800672e:	4630      	mov	r0, r6
 8006730:	f7ff ff1a 	bl	8006568 <__multiply>
 8006734:	4639      	mov	r1, r7
 8006736:	4680      	mov	r8, r0
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff fdff 	bl	800633c <_Bfree>
 800673e:	4647      	mov	r7, r8
 8006740:	106d      	asrs	r5, r5, #1
 8006742:	d00b      	beq.n	800675c <__pow5mult+0xa0>
 8006744:	6820      	ldr	r0, [r4, #0]
 8006746:	b938      	cbnz	r0, 8006758 <__pow5mult+0x9c>
 8006748:	4622      	mov	r2, r4
 800674a:	4621      	mov	r1, r4
 800674c:	4630      	mov	r0, r6
 800674e:	f7ff ff0b 	bl	8006568 <__multiply>
 8006752:	6020      	str	r0, [r4, #0]
 8006754:	f8c0 9000 	str.w	r9, [r0]
 8006758:	4604      	mov	r4, r0
 800675a:	e7e4      	b.n	8006726 <__pow5mult+0x6a>
 800675c:	4638      	mov	r0, r7
 800675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006762:	bf00      	nop
 8006764:	08008da8 	.word	0x08008da8
 8006768:	08008bda 	.word	0x08008bda
 800676c:	08008c5a 	.word	0x08008c5a

08006770 <__lshift>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	460c      	mov	r4, r1
 8006776:	6849      	ldr	r1, [r1, #4]
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	4607      	mov	r7, r0
 8006782:	4691      	mov	r9, r2
 8006784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006788:	f108 0601 	add.w	r6, r8, #1
 800678c:	42b3      	cmp	r3, r6
 800678e:	db0b      	blt.n	80067a8 <__lshift+0x38>
 8006790:	4638      	mov	r0, r7
 8006792:	f7ff fd93 	bl	80062bc <_Balloc>
 8006796:	4605      	mov	r5, r0
 8006798:	b948      	cbnz	r0, 80067ae <__lshift+0x3e>
 800679a:	4602      	mov	r2, r0
 800679c:	4b28      	ldr	r3, [pc, #160]	; (8006840 <__lshift+0xd0>)
 800679e:	4829      	ldr	r0, [pc, #164]	; (8006844 <__lshift+0xd4>)
 80067a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80067a4:	f001 fb28 	bl	8007df8 <__assert_func>
 80067a8:	3101      	adds	r1, #1
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	e7ee      	b.n	800678c <__lshift+0x1c>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f100 0114 	add.w	r1, r0, #20
 80067b4:	f100 0210 	add.w	r2, r0, #16
 80067b8:	4618      	mov	r0, r3
 80067ba:	4553      	cmp	r3, sl
 80067bc:	db33      	blt.n	8006826 <__lshift+0xb6>
 80067be:	6920      	ldr	r0, [r4, #16]
 80067c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067c4:	f104 0314 	add.w	r3, r4, #20
 80067c8:	f019 091f 	ands.w	r9, r9, #31
 80067cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067d4:	d02b      	beq.n	800682e <__lshift+0xbe>
 80067d6:	f1c9 0e20 	rsb	lr, r9, #32
 80067da:	468a      	mov	sl, r1
 80067dc:	2200      	movs	r2, #0
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	fa00 f009 	lsl.w	r0, r0, r9
 80067e4:	4310      	orrs	r0, r2
 80067e6:	f84a 0b04 	str.w	r0, [sl], #4
 80067ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ee:	459c      	cmp	ip, r3
 80067f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80067f4:	d8f3      	bhi.n	80067de <__lshift+0x6e>
 80067f6:	ebac 0304 	sub.w	r3, ip, r4
 80067fa:	3b15      	subs	r3, #21
 80067fc:	f023 0303 	bic.w	r3, r3, #3
 8006800:	3304      	adds	r3, #4
 8006802:	f104 0015 	add.w	r0, r4, #21
 8006806:	4584      	cmp	ip, r0
 8006808:	bf38      	it	cc
 800680a:	2304      	movcc	r3, #4
 800680c:	50ca      	str	r2, [r1, r3]
 800680e:	b10a      	cbz	r2, 8006814 <__lshift+0xa4>
 8006810:	f108 0602 	add.w	r6, r8, #2
 8006814:	3e01      	subs	r6, #1
 8006816:	4638      	mov	r0, r7
 8006818:	612e      	str	r6, [r5, #16]
 800681a:	4621      	mov	r1, r4
 800681c:	f7ff fd8e 	bl	800633c <_Bfree>
 8006820:	4628      	mov	r0, r5
 8006822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006826:	f842 0f04 	str.w	r0, [r2, #4]!
 800682a:	3301      	adds	r3, #1
 800682c:	e7c5      	b.n	80067ba <__lshift+0x4a>
 800682e:	3904      	subs	r1, #4
 8006830:	f853 2b04 	ldr.w	r2, [r3], #4
 8006834:	f841 2f04 	str.w	r2, [r1, #4]!
 8006838:	459c      	cmp	ip, r3
 800683a:	d8f9      	bhi.n	8006830 <__lshift+0xc0>
 800683c:	e7ea      	b.n	8006814 <__lshift+0xa4>
 800683e:	bf00      	nop
 8006840:	08008c49 	.word	0x08008c49
 8006844:	08008c5a 	.word	0x08008c5a

08006848 <__mcmp>:
 8006848:	b530      	push	{r4, r5, lr}
 800684a:	6902      	ldr	r2, [r0, #16]
 800684c:	690c      	ldr	r4, [r1, #16]
 800684e:	1b12      	subs	r2, r2, r4
 8006850:	d10e      	bne.n	8006870 <__mcmp+0x28>
 8006852:	f100 0314 	add.w	r3, r0, #20
 8006856:	3114      	adds	r1, #20
 8006858:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800685c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006860:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006864:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006868:	42a5      	cmp	r5, r4
 800686a:	d003      	beq.n	8006874 <__mcmp+0x2c>
 800686c:	d305      	bcc.n	800687a <__mcmp+0x32>
 800686e:	2201      	movs	r2, #1
 8006870:	4610      	mov	r0, r2
 8006872:	bd30      	pop	{r4, r5, pc}
 8006874:	4283      	cmp	r3, r0
 8006876:	d3f3      	bcc.n	8006860 <__mcmp+0x18>
 8006878:	e7fa      	b.n	8006870 <__mcmp+0x28>
 800687a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800687e:	e7f7      	b.n	8006870 <__mcmp+0x28>

08006880 <__mdiff>:
 8006880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	4606      	mov	r6, r0
 8006888:	4611      	mov	r1, r2
 800688a:	4620      	mov	r0, r4
 800688c:	4690      	mov	r8, r2
 800688e:	f7ff ffdb 	bl	8006848 <__mcmp>
 8006892:	1e05      	subs	r5, r0, #0
 8006894:	d110      	bne.n	80068b8 <__mdiff+0x38>
 8006896:	4629      	mov	r1, r5
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff fd0f 	bl	80062bc <_Balloc>
 800689e:	b930      	cbnz	r0, 80068ae <__mdiff+0x2e>
 80068a0:	4b3a      	ldr	r3, [pc, #232]	; (800698c <__mdiff+0x10c>)
 80068a2:	4602      	mov	r2, r0
 80068a4:	f240 2137 	movw	r1, #567	; 0x237
 80068a8:	4839      	ldr	r0, [pc, #228]	; (8006990 <__mdiff+0x110>)
 80068aa:	f001 faa5 	bl	8007df8 <__assert_func>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b8:	bfa4      	itt	ge
 80068ba:	4643      	movge	r3, r8
 80068bc:	46a0      	movge	r8, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068c4:	bfa6      	itte	ge
 80068c6:	461c      	movge	r4, r3
 80068c8:	2500      	movge	r5, #0
 80068ca:	2501      	movlt	r5, #1
 80068cc:	f7ff fcf6 	bl	80062bc <_Balloc>
 80068d0:	b920      	cbnz	r0, 80068dc <__mdiff+0x5c>
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <__mdiff+0x10c>)
 80068d4:	4602      	mov	r2, r0
 80068d6:	f240 2145 	movw	r1, #581	; 0x245
 80068da:	e7e5      	b.n	80068a8 <__mdiff+0x28>
 80068dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068e0:	6926      	ldr	r6, [r4, #16]
 80068e2:	60c5      	str	r5, [r0, #12]
 80068e4:	f104 0914 	add.w	r9, r4, #20
 80068e8:	f108 0514 	add.w	r5, r8, #20
 80068ec:	f100 0e14 	add.w	lr, r0, #20
 80068f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068f8:	f108 0210 	add.w	r2, r8, #16
 80068fc:	46f2      	mov	sl, lr
 80068fe:	2100      	movs	r1, #0
 8006900:	f859 3b04 	ldr.w	r3, [r9], #4
 8006904:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006908:	fa11 f88b 	uxtah	r8, r1, fp
 800690c:	b299      	uxth	r1, r3
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	eba8 0801 	sub.w	r8, r8, r1
 8006914:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006918:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800691c:	fa1f f888 	uxth.w	r8, r8
 8006920:	1419      	asrs	r1, r3, #16
 8006922:	454e      	cmp	r6, r9
 8006924:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006928:	f84a 3b04 	str.w	r3, [sl], #4
 800692c:	d8e8      	bhi.n	8006900 <__mdiff+0x80>
 800692e:	1b33      	subs	r3, r6, r4
 8006930:	3b15      	subs	r3, #21
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	3304      	adds	r3, #4
 8006938:	3415      	adds	r4, #21
 800693a:	42a6      	cmp	r6, r4
 800693c:	bf38      	it	cc
 800693e:	2304      	movcc	r3, #4
 8006940:	441d      	add	r5, r3
 8006942:	4473      	add	r3, lr
 8006944:	469e      	mov	lr, r3
 8006946:	462e      	mov	r6, r5
 8006948:	4566      	cmp	r6, ip
 800694a:	d30e      	bcc.n	800696a <__mdiff+0xea>
 800694c:	f10c 0203 	add.w	r2, ip, #3
 8006950:	1b52      	subs	r2, r2, r5
 8006952:	f022 0203 	bic.w	r2, r2, #3
 8006956:	3d03      	subs	r5, #3
 8006958:	45ac      	cmp	ip, r5
 800695a:	bf38      	it	cc
 800695c:	2200      	movcc	r2, #0
 800695e:	4413      	add	r3, r2
 8006960:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006964:	b17a      	cbz	r2, 8006986 <__mdiff+0x106>
 8006966:	6107      	str	r7, [r0, #16]
 8006968:	e7a4      	b.n	80068b4 <__mdiff+0x34>
 800696a:	f856 8b04 	ldr.w	r8, [r6], #4
 800696e:	fa11 f288 	uxtah	r2, r1, r8
 8006972:	1414      	asrs	r4, r2, #16
 8006974:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006978:	b292      	uxth	r2, r2
 800697a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800697e:	f84e 2b04 	str.w	r2, [lr], #4
 8006982:	1421      	asrs	r1, r4, #16
 8006984:	e7e0      	b.n	8006948 <__mdiff+0xc8>
 8006986:	3f01      	subs	r7, #1
 8006988:	e7ea      	b.n	8006960 <__mdiff+0xe0>
 800698a:	bf00      	nop
 800698c:	08008c49 	.word	0x08008c49
 8006990:	08008c5a 	.word	0x08008c5a

08006994 <__ulp>:
 8006994:	b082      	sub	sp, #8
 8006996:	ed8d 0b00 	vstr	d0, [sp]
 800699a:	9a01      	ldr	r2, [sp, #4]
 800699c:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <__ulp+0x48>)
 800699e:	4013      	ands	r3, r2
 80069a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	dc08      	bgt.n	80069ba <__ulp+0x26>
 80069a8:	425b      	negs	r3, r3
 80069aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80069ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80069b2:	da04      	bge.n	80069be <__ulp+0x2a>
 80069b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069b8:	4113      	asrs	r3, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	e008      	b.n	80069d0 <__ulp+0x3c>
 80069be:	f1a2 0314 	sub.w	r3, r2, #20
 80069c2:	2b1e      	cmp	r3, #30
 80069c4:	bfda      	itte	le
 80069c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80069ca:	40da      	lsrle	r2, r3
 80069cc:	2201      	movgt	r2, #1
 80069ce:	2300      	movs	r3, #0
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	ec41 0b10 	vmov	d0, r0, r1
 80069d8:	b002      	add	sp, #8
 80069da:	4770      	bx	lr
 80069dc:	7ff00000 	.word	0x7ff00000

080069e0 <__b2d>:
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	6906      	ldr	r6, [r0, #16]
 80069e6:	f100 0814 	add.w	r8, r0, #20
 80069ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80069ee:	1f37      	subs	r7, r6, #4
 80069f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7ff fd53 	bl	80064a0 <__hi0bits>
 80069fa:	f1c0 0320 	rsb	r3, r0, #32
 80069fe:	280a      	cmp	r0, #10
 8006a00:	600b      	str	r3, [r1, #0]
 8006a02:	491b      	ldr	r1, [pc, #108]	; (8006a70 <__b2d+0x90>)
 8006a04:	dc15      	bgt.n	8006a32 <__b2d+0x52>
 8006a06:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a0a:	fa22 f30c 	lsr.w	r3, r2, ip
 8006a0e:	45b8      	cmp	r8, r7
 8006a10:	ea43 0501 	orr.w	r5, r3, r1
 8006a14:	bf34      	ite	cc
 8006a16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006a1a:	2300      	movcs	r3, #0
 8006a1c:	3015      	adds	r0, #21
 8006a1e:	fa02 f000 	lsl.w	r0, r2, r0
 8006a22:	fa23 f30c 	lsr.w	r3, r3, ip
 8006a26:	4303      	orrs	r3, r0
 8006a28:	461c      	mov	r4, r3
 8006a2a:	ec45 4b10 	vmov	d0, r4, r5
 8006a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a32:	45b8      	cmp	r8, r7
 8006a34:	bf3a      	itte	cc
 8006a36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006a3a:	f1a6 0708 	subcc.w	r7, r6, #8
 8006a3e:	2300      	movcs	r3, #0
 8006a40:	380b      	subs	r0, #11
 8006a42:	d012      	beq.n	8006a6a <__b2d+0x8a>
 8006a44:	f1c0 0120 	rsb	r1, r0, #32
 8006a48:	fa23 f401 	lsr.w	r4, r3, r1
 8006a4c:	4082      	lsls	r2, r0
 8006a4e:	4322      	orrs	r2, r4
 8006a50:	4547      	cmp	r7, r8
 8006a52:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006a56:	bf8c      	ite	hi
 8006a58:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006a5c:	2200      	movls	r2, #0
 8006a5e:	4083      	lsls	r3, r0
 8006a60:	40ca      	lsrs	r2, r1
 8006a62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a66:	4313      	orrs	r3, r2
 8006a68:	e7de      	b.n	8006a28 <__b2d+0x48>
 8006a6a:	ea42 0501 	orr.w	r5, r2, r1
 8006a6e:	e7db      	b.n	8006a28 <__b2d+0x48>
 8006a70:	3ff00000 	.word	0x3ff00000

08006a74 <__d2b>:
 8006a74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a78:	460f      	mov	r7, r1
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	ec59 8b10 	vmov	r8, r9, d0
 8006a80:	4616      	mov	r6, r2
 8006a82:	f7ff fc1b 	bl	80062bc <_Balloc>
 8006a86:	4604      	mov	r4, r0
 8006a88:	b930      	cbnz	r0, 8006a98 <__d2b+0x24>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <__d2b+0xac>)
 8006a8e:	4825      	ldr	r0, [pc, #148]	; (8006b24 <__d2b+0xb0>)
 8006a90:	f240 310f 	movw	r1, #783	; 0x30f
 8006a94:	f001 f9b0 	bl	8007df8 <__assert_func>
 8006a98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aa0:	bb2d      	cbnz	r5, 8006aee <__d2b+0x7a>
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	f1b8 0300 	subs.w	r3, r8, #0
 8006aa8:	d026      	beq.n	8006af8 <__d2b+0x84>
 8006aaa:	4668      	mov	r0, sp
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	f7ff fd17 	bl	80064e0 <__lo0bits>
 8006ab2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ab6:	b1e8      	cbz	r0, 8006af4 <__d2b+0x80>
 8006ab8:	f1c0 0320 	rsb	r3, r0, #32
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	40c2      	lsrs	r2, r0
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9201      	str	r2, [sp, #4]
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	61a3      	str	r3, [r4, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2202      	movne	r2, #2
 8006ad2:	2201      	moveq	r2, #1
 8006ad4:	6122      	str	r2, [r4, #16]
 8006ad6:	b1bd      	cbz	r5, 8006b08 <__d2b+0x94>
 8006ad8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006adc:	4405      	add	r5, r0
 8006ade:	603d      	str	r5, [r7, #0]
 8006ae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae4:	6030      	str	r0, [r6, #0]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	b003      	add	sp, #12
 8006aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af2:	e7d6      	b.n	8006aa2 <__d2b+0x2e>
 8006af4:	6161      	str	r1, [r4, #20]
 8006af6:	e7e7      	b.n	8006ac8 <__d2b+0x54>
 8006af8:	a801      	add	r0, sp, #4
 8006afa:	f7ff fcf1 	bl	80064e0 <__lo0bits>
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	3020      	adds	r0, #32
 8006b04:	2201      	movs	r2, #1
 8006b06:	e7e5      	b.n	8006ad4 <__d2b+0x60>
 8006b08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b10:	6038      	str	r0, [r7, #0]
 8006b12:	6918      	ldr	r0, [r3, #16]
 8006b14:	f7ff fcc4 	bl	80064a0 <__hi0bits>
 8006b18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b1c:	e7e2      	b.n	8006ae4 <__d2b+0x70>
 8006b1e:	bf00      	nop
 8006b20:	08008c49 	.word	0x08008c49
 8006b24:	08008c5a 	.word	0x08008c5a

08006b28 <__ratio>:
 8006b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	4688      	mov	r8, r1
 8006b2e:	4669      	mov	r1, sp
 8006b30:	4681      	mov	r9, r0
 8006b32:	f7ff ff55 	bl	80069e0 <__b2d>
 8006b36:	a901      	add	r1, sp, #4
 8006b38:	4640      	mov	r0, r8
 8006b3a:	ec55 4b10 	vmov	r4, r5, d0
 8006b3e:	f7ff ff4f 	bl	80069e0 <__b2d>
 8006b42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b4a:	eba3 0c02 	sub.w	ip, r3, r2
 8006b4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b58:	ec51 0b10 	vmov	r0, r1, d0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bfd6      	itet	le
 8006b60:	460a      	movle	r2, r1
 8006b62:	462a      	movgt	r2, r5
 8006b64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b68:	468b      	mov	fp, r1
 8006b6a:	462f      	mov	r7, r5
 8006b6c:	bfd4      	ite	le
 8006b6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006b72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b76:	4620      	mov	r0, r4
 8006b78:	ee10 2a10 	vmov	r2, s0
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f7f9 fe64 	bl	800084c <__aeabi_ddiv>
 8006b84:	ec41 0b10 	vmov	d0, r0, r1
 8006b88:	b003      	add	sp, #12
 8006b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b8e <__copybits>:
 8006b8e:	3901      	subs	r1, #1
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	1149      	asrs	r1, r1, #5
 8006b94:	6914      	ldr	r4, [r2, #16]
 8006b96:	3101      	adds	r1, #1
 8006b98:	f102 0314 	add.w	r3, r2, #20
 8006b9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ba0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006ba4:	1f05      	subs	r5, r0, #4
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d30c      	bcc.n	8006bc4 <__copybits+0x36>
 8006baa:	1aa3      	subs	r3, r4, r2
 8006bac:	3b11      	subs	r3, #17
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	3211      	adds	r2, #17
 8006bb4:	42a2      	cmp	r2, r4
 8006bb6:	bf88      	it	hi
 8006bb8:	2300      	movhi	r3, #0
 8006bba:	4418      	add	r0, r3
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4288      	cmp	r0, r1
 8006bc0:	d305      	bcc.n	8006bce <__copybits+0x40>
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}
 8006bc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8006bc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8006bcc:	e7eb      	b.n	8006ba6 <__copybits+0x18>
 8006bce:	f840 3b04 	str.w	r3, [r0], #4
 8006bd2:	e7f4      	b.n	8006bbe <__copybits+0x30>

08006bd4 <__any_on>:
 8006bd4:	f100 0214 	add.w	r2, r0, #20
 8006bd8:	6900      	ldr	r0, [r0, #16]
 8006bda:	114b      	asrs	r3, r1, #5
 8006bdc:	4298      	cmp	r0, r3
 8006bde:	b510      	push	{r4, lr}
 8006be0:	db11      	blt.n	8006c06 <__any_on+0x32>
 8006be2:	dd0a      	ble.n	8006bfa <__any_on+0x26>
 8006be4:	f011 011f 	ands.w	r1, r1, #31
 8006be8:	d007      	beq.n	8006bfa <__any_on+0x26>
 8006bea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006bee:	fa24 f001 	lsr.w	r0, r4, r1
 8006bf2:	fa00 f101 	lsl.w	r1, r0, r1
 8006bf6:	428c      	cmp	r4, r1
 8006bf8:	d10b      	bne.n	8006c12 <__any_on+0x3e>
 8006bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d803      	bhi.n	8006c0a <__any_on+0x36>
 8006c02:	2000      	movs	r0, #0
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	4603      	mov	r3, r0
 8006c08:	e7f7      	b.n	8006bfa <__any_on+0x26>
 8006c0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d0f5      	beq.n	8006bfe <__any_on+0x2a>
 8006c12:	2001      	movs	r0, #1
 8006c14:	e7f6      	b.n	8006c04 <__any_on+0x30>

08006c16 <sulp>:
 8006c16:	b570      	push	{r4, r5, r6, lr}
 8006c18:	4604      	mov	r4, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	ec45 4b10 	vmov	d0, r4, r5
 8006c20:	4616      	mov	r6, r2
 8006c22:	f7ff feb7 	bl	8006994 <__ulp>
 8006c26:	ec51 0b10 	vmov	r0, r1, d0
 8006c2a:	b17e      	cbz	r6, 8006c4c <sulp+0x36>
 8006c2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd09      	ble.n	8006c4c <sulp+0x36>
 8006c38:	051b      	lsls	r3, r3, #20
 8006c3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c3e:	2400      	movs	r4, #0
 8006c40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c44:	4622      	mov	r2, r4
 8006c46:	462b      	mov	r3, r5
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c50 <_strtod_l>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	ed2d 8b02 	vpush	{d8}
 8006c58:	b09b      	sub	sp, #108	; 0x6c
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006c5e:	2200      	movs	r2, #0
 8006c60:	9216      	str	r2, [sp, #88]	; 0x58
 8006c62:	460d      	mov	r5, r1
 8006c64:	f04f 0800 	mov.w	r8, #0
 8006c68:	f04f 0900 	mov.w	r9, #0
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	9215      	str	r2, [sp, #84]	; 0x54
 8006c70:	7811      	ldrb	r1, [r2, #0]
 8006c72:	292b      	cmp	r1, #43	; 0x2b
 8006c74:	d04c      	beq.n	8006d10 <_strtod_l+0xc0>
 8006c76:	d83a      	bhi.n	8006cee <_strtod_l+0x9e>
 8006c78:	290d      	cmp	r1, #13
 8006c7a:	d834      	bhi.n	8006ce6 <_strtod_l+0x96>
 8006c7c:	2908      	cmp	r1, #8
 8006c7e:	d834      	bhi.n	8006cea <_strtod_l+0x9a>
 8006c80:	2900      	cmp	r1, #0
 8006c82:	d03d      	beq.n	8006d00 <_strtod_l+0xb0>
 8006c84:	2200      	movs	r2, #0
 8006c86:	920a      	str	r2, [sp, #40]	; 0x28
 8006c88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006c8a:	7832      	ldrb	r2, [r6, #0]
 8006c8c:	2a30      	cmp	r2, #48	; 0x30
 8006c8e:	f040 80b4 	bne.w	8006dfa <_strtod_l+0x1aa>
 8006c92:	7872      	ldrb	r2, [r6, #1]
 8006c94:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006c98:	2a58      	cmp	r2, #88	; 0x58
 8006c9a:	d170      	bne.n	8006d7e <_strtod_l+0x12e>
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	ab16      	add	r3, sp, #88	; 0x58
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4a8e      	ldr	r2, [pc, #568]	; (8006ee0 <_strtod_l+0x290>)
 8006ca8:	ab17      	add	r3, sp, #92	; 0x5c
 8006caa:	a915      	add	r1, sp, #84	; 0x54
 8006cac:	4620      	mov	r0, r4
 8006cae:	f001 f93f 	bl	8007f30 <__gethex>
 8006cb2:	f010 070f 	ands.w	r7, r0, #15
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	d005      	beq.n	8006cc6 <_strtod_l+0x76>
 8006cba:	2f06      	cmp	r7, #6
 8006cbc:	d12a      	bne.n	8006d14 <_strtod_l+0xc4>
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	9615      	str	r6, [sp, #84]	; 0x54
 8006cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 857f 	bne.w	80077cc <_strtod_l+0xb7c>
 8006cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd0:	b1db      	cbz	r3, 8006d0a <_strtod_l+0xba>
 8006cd2:	4642      	mov	r2, r8
 8006cd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cd8:	ec43 2b10 	vmov	d0, r2, r3
 8006cdc:	b01b      	add	sp, #108	; 0x6c
 8006cde:	ecbd 8b02 	vpop	{d8}
 8006ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce6:	2920      	cmp	r1, #32
 8006ce8:	d1cc      	bne.n	8006c84 <_strtod_l+0x34>
 8006cea:	3201      	adds	r2, #1
 8006cec:	e7bf      	b.n	8006c6e <_strtod_l+0x1e>
 8006cee:	292d      	cmp	r1, #45	; 0x2d
 8006cf0:	d1c8      	bne.n	8006c84 <_strtod_l+0x34>
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	910a      	str	r1, [sp, #40]	; 0x28
 8006cf6:	1c51      	adds	r1, r2, #1
 8006cf8:	9115      	str	r1, [sp, #84]	; 0x54
 8006cfa:	7852      	ldrb	r2, [r2, #1]
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	d1c3      	bne.n	8006c88 <_strtod_l+0x38>
 8006d00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d02:	9515      	str	r5, [sp, #84]	; 0x54
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f040 855f 	bne.w	80077c8 <_strtod_l+0xb78>
 8006d0a:	4642      	mov	r2, r8
 8006d0c:	464b      	mov	r3, r9
 8006d0e:	e7e3      	b.n	8006cd8 <_strtod_l+0x88>
 8006d10:	2100      	movs	r1, #0
 8006d12:	e7ef      	b.n	8006cf4 <_strtod_l+0xa4>
 8006d14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d16:	b13a      	cbz	r2, 8006d28 <_strtod_l+0xd8>
 8006d18:	2135      	movs	r1, #53	; 0x35
 8006d1a:	a818      	add	r0, sp, #96	; 0x60
 8006d1c:	f7ff ff37 	bl	8006b8e <__copybits>
 8006d20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d22:	4620      	mov	r0, r4
 8006d24:	f7ff fb0a 	bl	800633c <_Bfree>
 8006d28:	3f01      	subs	r7, #1
 8006d2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d2c:	2f04      	cmp	r7, #4
 8006d2e:	d806      	bhi.n	8006d3e <_strtod_l+0xee>
 8006d30:	e8df f007 	tbb	[pc, r7]
 8006d34:	201d0314 	.word	0x201d0314
 8006d38:	14          	.byte	0x14
 8006d39:	00          	.byte	0x00
 8006d3a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006d3e:	05e9      	lsls	r1, r5, #23
 8006d40:	bf48      	it	mi
 8006d42:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d4a:	0d1b      	lsrs	r3, r3, #20
 8006d4c:	051b      	lsls	r3, r3, #20
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1b9      	bne.n	8006cc6 <_strtod_l+0x76>
 8006d52:	f7fe fb05 	bl	8005360 <__errno>
 8006d56:	2322      	movs	r3, #34	; 0x22
 8006d58:	6003      	str	r3, [r0, #0]
 8006d5a:	e7b4      	b.n	8006cc6 <_strtod_l+0x76>
 8006d5c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006d60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006d6c:	e7e7      	b.n	8006d3e <_strtod_l+0xee>
 8006d6e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006ee8 <_strtod_l+0x298>
 8006d72:	e7e4      	b.n	8006d3e <_strtod_l+0xee>
 8006d74:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006d78:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8006d7c:	e7df      	b.n	8006d3e <_strtod_l+0xee>
 8006d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	9215      	str	r2, [sp, #84]	; 0x54
 8006d84:	785b      	ldrb	r3, [r3, #1]
 8006d86:	2b30      	cmp	r3, #48	; 0x30
 8006d88:	d0f9      	beq.n	8006d7e <_strtod_l+0x12e>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d09b      	beq.n	8006cc6 <_strtod_l+0x76>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f04f 0a00 	mov.w	sl, #0
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006d9e:	46d3      	mov	fp, sl
 8006da0:	220a      	movs	r2, #10
 8006da2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006da4:	7806      	ldrb	r6, [r0, #0]
 8006da6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006daa:	b2d9      	uxtb	r1, r3
 8006dac:	2909      	cmp	r1, #9
 8006dae:	d926      	bls.n	8006dfe <_strtod_l+0x1ae>
 8006db0:	494c      	ldr	r1, [pc, #304]	; (8006ee4 <_strtod_l+0x294>)
 8006db2:	2201      	movs	r2, #1
 8006db4:	f000 ffe6 	bl	8007d84 <strncmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d030      	beq.n	8006e1e <_strtod_l+0x1ce>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	9005      	str	r0, [sp, #20]
 8006dc2:	465e      	mov	r6, fp
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2a65      	cmp	r2, #101	; 0x65
 8006dc8:	d001      	beq.n	8006dce <_strtod_l+0x17e>
 8006dca:	2a45      	cmp	r2, #69	; 0x45
 8006dcc:	d113      	bne.n	8006df6 <_strtod_l+0x1a6>
 8006dce:	b91e      	cbnz	r6, 8006dd8 <_strtod_l+0x188>
 8006dd0:	9a04      	ldr	r2, [sp, #16]
 8006dd2:	4302      	orrs	r2, r0
 8006dd4:	d094      	beq.n	8006d00 <_strtod_l+0xb0>
 8006dd6:	2600      	movs	r6, #0
 8006dd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006dda:	1c6a      	adds	r2, r5, #1
 8006ddc:	9215      	str	r2, [sp, #84]	; 0x54
 8006dde:	786a      	ldrb	r2, [r5, #1]
 8006de0:	2a2b      	cmp	r2, #43	; 0x2b
 8006de2:	d074      	beq.n	8006ece <_strtod_l+0x27e>
 8006de4:	2a2d      	cmp	r2, #45	; 0x2d
 8006de6:	d078      	beq.n	8006eda <_strtod_l+0x28a>
 8006de8:	f04f 0c00 	mov.w	ip, #0
 8006dec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006df0:	2909      	cmp	r1, #9
 8006df2:	d97f      	bls.n	8006ef4 <_strtod_l+0x2a4>
 8006df4:	9515      	str	r5, [sp, #84]	; 0x54
 8006df6:	2700      	movs	r7, #0
 8006df8:	e09e      	b.n	8006f38 <_strtod_l+0x2e8>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e7c8      	b.n	8006d90 <_strtod_l+0x140>
 8006dfe:	f1bb 0f08 	cmp.w	fp, #8
 8006e02:	bfd8      	it	le
 8006e04:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006e06:	f100 0001 	add.w	r0, r0, #1
 8006e0a:	bfda      	itte	le
 8006e0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e10:	9309      	strle	r3, [sp, #36]	; 0x24
 8006e12:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006e16:	f10b 0b01 	add.w	fp, fp, #1
 8006e1a:	9015      	str	r0, [sp, #84]	; 0x54
 8006e1c:	e7c1      	b.n	8006da2 <_strtod_l+0x152>
 8006e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	9215      	str	r2, [sp, #84]	; 0x54
 8006e24:	785a      	ldrb	r2, [r3, #1]
 8006e26:	f1bb 0f00 	cmp.w	fp, #0
 8006e2a:	d037      	beq.n	8006e9c <_strtod_l+0x24c>
 8006e2c:	9005      	str	r0, [sp, #20]
 8006e2e:	465e      	mov	r6, fp
 8006e30:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006e34:	2b09      	cmp	r3, #9
 8006e36:	d912      	bls.n	8006e5e <_strtod_l+0x20e>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e7c4      	b.n	8006dc6 <_strtod_l+0x176>
 8006e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	9215      	str	r2, [sp, #84]	; 0x54
 8006e42:	785a      	ldrb	r2, [r3, #1]
 8006e44:	3001      	adds	r0, #1
 8006e46:	2a30      	cmp	r2, #48	; 0x30
 8006e48:	d0f8      	beq.n	8006e3c <_strtod_l+0x1ec>
 8006e4a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	f200 84c1 	bhi.w	80077d6 <_strtod_l+0xb86>
 8006e54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e56:	9005      	str	r0, [sp, #20]
 8006e58:	2000      	movs	r0, #0
 8006e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	3a30      	subs	r2, #48	; 0x30
 8006e60:	f100 0301 	add.w	r3, r0, #1
 8006e64:	d014      	beq.n	8006e90 <_strtod_l+0x240>
 8006e66:	9905      	ldr	r1, [sp, #20]
 8006e68:	4419      	add	r1, r3
 8006e6a:	9105      	str	r1, [sp, #20]
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	eb00 0c06 	add.w	ip, r0, r6
 8006e72:	210a      	movs	r1, #10
 8006e74:	4563      	cmp	r3, ip
 8006e76:	d113      	bne.n	8006ea0 <_strtod_l+0x250>
 8006e78:	1833      	adds	r3, r6, r0
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	f106 0601 	add.w	r6, r6, #1
 8006e80:	4406      	add	r6, r0
 8006e82:	dc1a      	bgt.n	8006eba <_strtod_l+0x26a>
 8006e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e86:	230a      	movs	r3, #10
 8006e88:	fb03 2301 	mla	r3, r3, r1, r2
 8006e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e92:	1c51      	adds	r1, r2, #1
 8006e94:	9115      	str	r1, [sp, #84]	; 0x54
 8006e96:	7852      	ldrb	r2, [r2, #1]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	e7c9      	b.n	8006e30 <_strtod_l+0x1e0>
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	e7d2      	b.n	8006e46 <_strtod_l+0x1f6>
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	f103 0301 	add.w	r3, r3, #1
 8006ea6:	dc03      	bgt.n	8006eb0 <_strtod_l+0x260>
 8006ea8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006eaa:	434f      	muls	r7, r1
 8006eac:	9709      	str	r7, [sp, #36]	; 0x24
 8006eae:	e7e1      	b.n	8006e74 <_strtod_l+0x224>
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	bfd8      	it	le
 8006eb4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006eb8:	e7dc      	b.n	8006e74 <_strtod_l+0x224>
 8006eba:	2e10      	cmp	r6, #16
 8006ebc:	bfdc      	itt	le
 8006ebe:	230a      	movle	r3, #10
 8006ec0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006ec4:	e7e3      	b.n	8006e8e <_strtod_l+0x23e>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9305      	str	r3, [sp, #20]
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e780      	b.n	8006dd0 <_strtod_l+0x180>
 8006ece:	f04f 0c00 	mov.w	ip, #0
 8006ed2:	1caa      	adds	r2, r5, #2
 8006ed4:	9215      	str	r2, [sp, #84]	; 0x54
 8006ed6:	78aa      	ldrb	r2, [r5, #2]
 8006ed8:	e788      	b.n	8006dec <_strtod_l+0x19c>
 8006eda:	f04f 0c01 	mov.w	ip, #1
 8006ede:	e7f8      	b.n	8006ed2 <_strtod_l+0x282>
 8006ee0:	08008db8 	.word	0x08008db8
 8006ee4:	08008db4 	.word	0x08008db4
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006eee:	1c51      	adds	r1, r2, #1
 8006ef0:	9115      	str	r1, [sp, #84]	; 0x54
 8006ef2:	7852      	ldrb	r2, [r2, #1]
 8006ef4:	2a30      	cmp	r2, #48	; 0x30
 8006ef6:	d0f9      	beq.n	8006eec <_strtod_l+0x29c>
 8006ef8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006efc:	2908      	cmp	r1, #8
 8006efe:	f63f af7a 	bhi.w	8006df6 <_strtod_l+0x1a6>
 8006f02:	3a30      	subs	r2, #48	; 0x30
 8006f04:	9208      	str	r2, [sp, #32]
 8006f06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f08:	920c      	str	r2, [sp, #48]	; 0x30
 8006f0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f0c:	1c57      	adds	r7, r2, #1
 8006f0e:	9715      	str	r7, [sp, #84]	; 0x54
 8006f10:	7852      	ldrb	r2, [r2, #1]
 8006f12:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006f16:	f1be 0f09 	cmp.w	lr, #9
 8006f1a:	d938      	bls.n	8006f8e <_strtod_l+0x33e>
 8006f1c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f1e:	1a7f      	subs	r7, r7, r1
 8006f20:	2f08      	cmp	r7, #8
 8006f22:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006f26:	dc03      	bgt.n	8006f30 <_strtod_l+0x2e0>
 8006f28:	9908      	ldr	r1, [sp, #32]
 8006f2a:	428f      	cmp	r7, r1
 8006f2c:	bfa8      	it	ge
 8006f2e:	460f      	movge	r7, r1
 8006f30:	f1bc 0f00 	cmp.w	ip, #0
 8006f34:	d000      	beq.n	8006f38 <_strtod_l+0x2e8>
 8006f36:	427f      	negs	r7, r7
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	d14f      	bne.n	8006fdc <_strtod_l+0x38c>
 8006f3c:	9904      	ldr	r1, [sp, #16]
 8006f3e:	4301      	orrs	r1, r0
 8006f40:	f47f aec1 	bne.w	8006cc6 <_strtod_l+0x76>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aedb 	bne.w	8006d00 <_strtod_l+0xb0>
 8006f4a:	2a69      	cmp	r2, #105	; 0x69
 8006f4c:	d029      	beq.n	8006fa2 <_strtod_l+0x352>
 8006f4e:	dc26      	bgt.n	8006f9e <_strtod_l+0x34e>
 8006f50:	2a49      	cmp	r2, #73	; 0x49
 8006f52:	d026      	beq.n	8006fa2 <_strtod_l+0x352>
 8006f54:	2a4e      	cmp	r2, #78	; 0x4e
 8006f56:	f47f aed3 	bne.w	8006d00 <_strtod_l+0xb0>
 8006f5a:	499b      	ldr	r1, [pc, #620]	; (80071c8 <_strtod_l+0x578>)
 8006f5c:	a815      	add	r0, sp, #84	; 0x54
 8006f5e:	f001 fa27 	bl	80083b0 <__match>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f43f aecc 	beq.w	8006d00 <_strtod_l+0xb0>
 8006f68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b28      	cmp	r3, #40	; 0x28
 8006f6e:	d12f      	bne.n	8006fd0 <_strtod_l+0x380>
 8006f70:	4996      	ldr	r1, [pc, #600]	; (80071cc <_strtod_l+0x57c>)
 8006f72:	aa18      	add	r2, sp, #96	; 0x60
 8006f74:	a815      	add	r0, sp, #84	; 0x54
 8006f76:	f001 fa2f 	bl	80083d8 <__hexnan>
 8006f7a:	2805      	cmp	r0, #5
 8006f7c:	d128      	bne.n	8006fd0 <_strtod_l+0x380>
 8006f7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f84:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006f88:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006f8c:	e69b      	b.n	8006cc6 <_strtod_l+0x76>
 8006f8e:	9f08      	ldr	r7, [sp, #32]
 8006f90:	210a      	movs	r1, #10
 8006f92:	fb01 2107 	mla	r1, r1, r7, r2
 8006f96:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006f9a:	9208      	str	r2, [sp, #32]
 8006f9c:	e7b5      	b.n	8006f0a <_strtod_l+0x2ba>
 8006f9e:	2a6e      	cmp	r2, #110	; 0x6e
 8006fa0:	e7d9      	b.n	8006f56 <_strtod_l+0x306>
 8006fa2:	498b      	ldr	r1, [pc, #556]	; (80071d0 <_strtod_l+0x580>)
 8006fa4:	a815      	add	r0, sp, #84	; 0x54
 8006fa6:	f001 fa03 	bl	80083b0 <__match>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f43f aea8 	beq.w	8006d00 <_strtod_l+0xb0>
 8006fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fb2:	4988      	ldr	r1, [pc, #544]	; (80071d4 <_strtod_l+0x584>)
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	a815      	add	r0, sp, #84	; 0x54
 8006fb8:	9315      	str	r3, [sp, #84]	; 0x54
 8006fba:	f001 f9f9 	bl	80083b0 <__match>
 8006fbe:	b910      	cbnz	r0, 8006fc6 <_strtod_l+0x376>
 8006fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	9315      	str	r3, [sp, #84]	; 0x54
 8006fc6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80071e4 <_strtod_l+0x594>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	e67a      	b.n	8006cc6 <_strtod_l+0x76>
 8006fd0:	4881      	ldr	r0, [pc, #516]	; (80071d8 <_strtod_l+0x588>)
 8006fd2:	f000 ff09 	bl	8007de8 <nan>
 8006fd6:	ec59 8b10 	vmov	r8, r9, d0
 8006fda:	e674      	b.n	8006cc6 <_strtod_l+0x76>
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe0:	1afb      	subs	r3, r7, r3
 8006fe2:	f1bb 0f00 	cmp.w	fp, #0
 8006fe6:	bf08      	it	eq
 8006fe8:	46b3      	moveq	fp, r6
 8006fea:	2e10      	cmp	r6, #16
 8006fec:	9308      	str	r3, [sp, #32]
 8006fee:	4635      	mov	r5, r6
 8006ff0:	bfa8      	it	ge
 8006ff2:	2510      	movge	r5, #16
 8006ff4:	f7f9 fa86 	bl	8000504 <__aeabi_ui2d>
 8006ff8:	2e09      	cmp	r6, #9
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	dd13      	ble.n	8007028 <_strtod_l+0x3d8>
 8007000:	4b76      	ldr	r3, [pc, #472]	; (80071dc <_strtod_l+0x58c>)
 8007002:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007006:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800700a:	f7f9 faf5 	bl	80005f8 <__aeabi_dmul>
 800700e:	4680      	mov	r8, r0
 8007010:	4650      	mov	r0, sl
 8007012:	4689      	mov	r9, r1
 8007014:	f7f9 fa76 	bl	8000504 <__aeabi_ui2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 f934 	bl	800028c <__adddf3>
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	2e0f      	cmp	r6, #15
 800702a:	dc38      	bgt.n	800709e <_strtod_l+0x44e>
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	2b00      	cmp	r3, #0
 8007030:	f43f ae49 	beq.w	8006cc6 <_strtod_l+0x76>
 8007034:	dd24      	ble.n	8007080 <_strtod_l+0x430>
 8007036:	2b16      	cmp	r3, #22
 8007038:	dc0b      	bgt.n	8007052 <_strtod_l+0x402>
 800703a:	4968      	ldr	r1, [pc, #416]	; (80071dc <_strtod_l+0x58c>)
 800703c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	4680      	mov	r8, r0
 800704e:	4689      	mov	r9, r1
 8007050:	e639      	b.n	8006cc6 <_strtod_l+0x76>
 8007052:	9a08      	ldr	r2, [sp, #32]
 8007054:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007058:	4293      	cmp	r3, r2
 800705a:	db20      	blt.n	800709e <_strtod_l+0x44e>
 800705c:	4c5f      	ldr	r4, [pc, #380]	; (80071dc <_strtod_l+0x58c>)
 800705e:	f1c6 060f 	rsb	r6, r6, #15
 8007062:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	1b9e      	subs	r6, r3, r6
 8007076:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800707a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800707e:	e7e3      	b.n	8007048 <_strtod_l+0x3f8>
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	3316      	adds	r3, #22
 8007084:	db0b      	blt.n	800709e <_strtod_l+0x44e>
 8007086:	9b05      	ldr	r3, [sp, #20]
 8007088:	1bdf      	subs	r7, r3, r7
 800708a:	4b54      	ldr	r3, [pc, #336]	; (80071dc <_strtod_l+0x58c>)
 800708c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007094:	4640      	mov	r0, r8
 8007096:	4649      	mov	r1, r9
 8007098:	f7f9 fbd8 	bl	800084c <__aeabi_ddiv>
 800709c:	e7d6      	b.n	800704c <_strtod_l+0x3fc>
 800709e:	9b08      	ldr	r3, [sp, #32]
 80070a0:	1b75      	subs	r5, r6, r5
 80070a2:	441d      	add	r5, r3
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	dd70      	ble.n	800718a <_strtod_l+0x53a>
 80070a8:	f015 030f 	ands.w	r3, r5, #15
 80070ac:	d00a      	beq.n	80070c4 <_strtod_l+0x474>
 80070ae:	494b      	ldr	r1, [pc, #300]	; (80071dc <_strtod_l+0x58c>)
 80070b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070bc:	f7f9 fa9c 	bl	80005f8 <__aeabi_dmul>
 80070c0:	4680      	mov	r8, r0
 80070c2:	4689      	mov	r9, r1
 80070c4:	f035 050f 	bics.w	r5, r5, #15
 80070c8:	d04d      	beq.n	8007166 <_strtod_l+0x516>
 80070ca:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80070ce:	dd22      	ble.n	8007116 <_strtod_l+0x4c6>
 80070d0:	2500      	movs	r5, #0
 80070d2:	46ab      	mov	fp, r5
 80070d4:	9509      	str	r5, [sp, #36]	; 0x24
 80070d6:	9505      	str	r5, [sp, #20]
 80070d8:	2322      	movs	r3, #34	; 0x22
 80070da:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80071e4 <_strtod_l+0x594>
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	f04f 0800 	mov.w	r8, #0
 80070e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f43f aded 	beq.w	8006cc6 <_strtod_l+0x76>
 80070ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7ff f924 	bl	800633c <_Bfree>
 80070f4:	9905      	ldr	r1, [sp, #20]
 80070f6:	4620      	mov	r0, r4
 80070f8:	f7ff f920 	bl	800633c <_Bfree>
 80070fc:	4659      	mov	r1, fp
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff f91c 	bl	800633c <_Bfree>
 8007104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007106:	4620      	mov	r0, r4
 8007108:	f7ff f918 	bl	800633c <_Bfree>
 800710c:	4629      	mov	r1, r5
 800710e:	4620      	mov	r0, r4
 8007110:	f7ff f914 	bl	800633c <_Bfree>
 8007114:	e5d7      	b.n	8006cc6 <_strtod_l+0x76>
 8007116:	4b32      	ldr	r3, [pc, #200]	; (80071e0 <_strtod_l+0x590>)
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	2300      	movs	r3, #0
 800711c:	112d      	asrs	r5, r5, #4
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	469a      	mov	sl, r3
 8007124:	2d01      	cmp	r5, #1
 8007126:	dc21      	bgt.n	800716c <_strtod_l+0x51c>
 8007128:	b10b      	cbz	r3, 800712e <_strtod_l+0x4de>
 800712a:	4680      	mov	r8, r0
 800712c:	4689      	mov	r9, r1
 800712e:	492c      	ldr	r1, [pc, #176]	; (80071e0 <_strtod_l+0x590>)
 8007130:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007134:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007138:	4642      	mov	r2, r8
 800713a:	464b      	mov	r3, r9
 800713c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007140:	f7f9 fa5a 	bl	80005f8 <__aeabi_dmul>
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <_strtod_l+0x594>)
 8007146:	460a      	mov	r2, r1
 8007148:	400b      	ands	r3, r1
 800714a:	4927      	ldr	r1, [pc, #156]	; (80071e8 <_strtod_l+0x598>)
 800714c:	428b      	cmp	r3, r1
 800714e:	4680      	mov	r8, r0
 8007150:	d8be      	bhi.n	80070d0 <_strtod_l+0x480>
 8007152:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007156:	428b      	cmp	r3, r1
 8007158:	bf86      	itte	hi
 800715a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80071ec <_strtod_l+0x59c>
 800715e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007162:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007166:	2300      	movs	r3, #0
 8007168:	9304      	str	r3, [sp, #16]
 800716a:	e07b      	b.n	8007264 <_strtod_l+0x614>
 800716c:	07ea      	lsls	r2, r5, #31
 800716e:	d505      	bpl.n	800717c <_strtod_l+0x52c>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 fa3f 	bl	80005f8 <__aeabi_dmul>
 800717a:	2301      	movs	r3, #1
 800717c:	9a04      	ldr	r2, [sp, #16]
 800717e:	3208      	adds	r2, #8
 8007180:	f10a 0a01 	add.w	sl, sl, #1
 8007184:	106d      	asrs	r5, r5, #1
 8007186:	9204      	str	r2, [sp, #16]
 8007188:	e7cc      	b.n	8007124 <_strtod_l+0x4d4>
 800718a:	d0ec      	beq.n	8007166 <_strtod_l+0x516>
 800718c:	426d      	negs	r5, r5
 800718e:	f015 020f 	ands.w	r2, r5, #15
 8007192:	d00a      	beq.n	80071aa <_strtod_l+0x55a>
 8007194:	4b11      	ldr	r3, [pc, #68]	; (80071dc <_strtod_l+0x58c>)
 8007196:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800719a:	4640      	mov	r0, r8
 800719c:	4649      	mov	r1, r9
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 fb53 	bl	800084c <__aeabi_ddiv>
 80071a6:	4680      	mov	r8, r0
 80071a8:	4689      	mov	r9, r1
 80071aa:	112d      	asrs	r5, r5, #4
 80071ac:	d0db      	beq.n	8007166 <_strtod_l+0x516>
 80071ae:	2d1f      	cmp	r5, #31
 80071b0:	dd1e      	ble.n	80071f0 <_strtod_l+0x5a0>
 80071b2:	2500      	movs	r5, #0
 80071b4:	46ab      	mov	fp, r5
 80071b6:	9509      	str	r5, [sp, #36]	; 0x24
 80071b8:	9505      	str	r5, [sp, #20]
 80071ba:	2322      	movs	r3, #34	; 0x22
 80071bc:	f04f 0800 	mov.w	r8, #0
 80071c0:	f04f 0900 	mov.w	r9, #0
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	e78d      	b.n	80070e4 <_strtod_l+0x494>
 80071c8:	08008ba1 	.word	0x08008ba1
 80071cc:	08008dcc 	.word	0x08008dcc
 80071d0:	08008b99 	.word	0x08008b99
 80071d4:	08008bd0 	.word	0x08008bd0
 80071d8:	08008f5d 	.word	0x08008f5d
 80071dc:	08008ce0 	.word	0x08008ce0
 80071e0:	08008cb8 	.word	0x08008cb8
 80071e4:	7ff00000 	.word	0x7ff00000
 80071e8:	7ca00000 	.word	0x7ca00000
 80071ec:	7fefffff 	.word	0x7fefffff
 80071f0:	f015 0310 	ands.w	r3, r5, #16
 80071f4:	bf18      	it	ne
 80071f6:	236a      	movne	r3, #106	; 0x6a
 80071f8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800759c <_strtod_l+0x94c>
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	2300      	movs	r3, #0
 8007204:	07ea      	lsls	r2, r5, #31
 8007206:	d504      	bpl.n	8007212 <_strtod_l+0x5c2>
 8007208:	e9da 2300 	ldrd	r2, r3, [sl]
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	2301      	movs	r3, #1
 8007212:	106d      	asrs	r5, r5, #1
 8007214:	f10a 0a08 	add.w	sl, sl, #8
 8007218:	d1f4      	bne.n	8007204 <_strtod_l+0x5b4>
 800721a:	b10b      	cbz	r3, 8007220 <_strtod_l+0x5d0>
 800721c:	4680      	mov	r8, r0
 800721e:	4689      	mov	r9, r1
 8007220:	9b04      	ldr	r3, [sp, #16]
 8007222:	b1bb      	cbz	r3, 8007254 <_strtod_l+0x604>
 8007224:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007228:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800722c:	2b00      	cmp	r3, #0
 800722e:	4649      	mov	r1, r9
 8007230:	dd10      	ble.n	8007254 <_strtod_l+0x604>
 8007232:	2b1f      	cmp	r3, #31
 8007234:	f340 811e 	ble.w	8007474 <_strtod_l+0x824>
 8007238:	2b34      	cmp	r3, #52	; 0x34
 800723a:	bfde      	ittt	le
 800723c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007240:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007244:	4093      	lslle	r3, r2
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	bfcc      	ite	gt
 800724c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007250:	ea03 0901 	andle.w	r9, r3, r1
 8007254:	2200      	movs	r2, #0
 8007256:	2300      	movs	r3, #0
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	f7f9 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007260:	2800      	cmp	r0, #0
 8007262:	d1a6      	bne.n	80071b2 <_strtod_l+0x562>
 8007264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800726a:	4633      	mov	r3, r6
 800726c:	465a      	mov	r2, fp
 800726e:	4620      	mov	r0, r4
 8007270:	f7ff f8cc 	bl	800640c <__s2b>
 8007274:	9009      	str	r0, [sp, #36]	; 0x24
 8007276:	2800      	cmp	r0, #0
 8007278:	f43f af2a 	beq.w	80070d0 <_strtod_l+0x480>
 800727c:	9a08      	ldr	r2, [sp, #32]
 800727e:	9b05      	ldr	r3, [sp, #20]
 8007280:	2a00      	cmp	r2, #0
 8007282:	eba3 0307 	sub.w	r3, r3, r7
 8007286:	bfa8      	it	ge
 8007288:	2300      	movge	r3, #0
 800728a:	930c      	str	r3, [sp, #48]	; 0x30
 800728c:	2500      	movs	r5, #0
 800728e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007292:	9312      	str	r3, [sp, #72]	; 0x48
 8007294:	46ab      	mov	fp, r5
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	4620      	mov	r0, r4
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	f7ff f80e 	bl	80062bc <_Balloc>
 80072a0:	9005      	str	r0, [sp, #20]
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f43f af18 	beq.w	80070d8 <_strtod_l+0x488>
 80072a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	3202      	adds	r2, #2
 80072ae:	f103 010c 	add.w	r1, r3, #12
 80072b2:	0092      	lsls	r2, r2, #2
 80072b4:	300c      	adds	r0, #12
 80072b6:	f000 fd87 	bl	8007dc8 <memcpy>
 80072ba:	ec49 8b10 	vmov	d0, r8, r9
 80072be:	aa18      	add	r2, sp, #96	; 0x60
 80072c0:	a917      	add	r1, sp, #92	; 0x5c
 80072c2:	4620      	mov	r0, r4
 80072c4:	f7ff fbd6 	bl	8006a74 <__d2b>
 80072c8:	ec49 8b18 	vmov	d8, r8, r9
 80072cc:	9016      	str	r0, [sp, #88]	; 0x58
 80072ce:	2800      	cmp	r0, #0
 80072d0:	f43f af02 	beq.w	80070d8 <_strtod_l+0x488>
 80072d4:	2101      	movs	r1, #1
 80072d6:	4620      	mov	r0, r4
 80072d8:	f7ff f930 	bl	800653c <__i2b>
 80072dc:	4683      	mov	fp, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	f43f aefa 	beq.w	80070d8 <_strtod_l+0x488>
 80072e4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80072e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	bfab      	itete	ge
 80072ec:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80072ee:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80072f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80072f2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80072f6:	bfac      	ite	ge
 80072f8:	eb06 0a03 	addge.w	sl, r6, r3
 80072fc:	1b9f      	sublt	r7, r3, r6
 80072fe:	9b04      	ldr	r3, [sp, #16]
 8007300:	1af6      	subs	r6, r6, r3
 8007302:	4416      	add	r6, r2
 8007304:	4ba0      	ldr	r3, [pc, #640]	; (8007588 <_strtod_l+0x938>)
 8007306:	3e01      	subs	r6, #1
 8007308:	429e      	cmp	r6, r3
 800730a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800730e:	f280 80c4 	bge.w	800749a <_strtod_l+0x84a>
 8007312:	1b9b      	subs	r3, r3, r6
 8007314:	2b1f      	cmp	r3, #31
 8007316:	eba2 0203 	sub.w	r2, r2, r3
 800731a:	f04f 0101 	mov.w	r1, #1
 800731e:	f300 80b0 	bgt.w	8007482 <_strtod_l+0x832>
 8007322:	fa01 f303 	lsl.w	r3, r1, r3
 8007326:	930e      	str	r3, [sp, #56]	; 0x38
 8007328:	2300      	movs	r3, #0
 800732a:	930d      	str	r3, [sp, #52]	; 0x34
 800732c:	eb0a 0602 	add.w	r6, sl, r2
 8007330:	9b04      	ldr	r3, [sp, #16]
 8007332:	45b2      	cmp	sl, r6
 8007334:	4417      	add	r7, r2
 8007336:	441f      	add	r7, r3
 8007338:	4653      	mov	r3, sl
 800733a:	bfa8      	it	ge
 800733c:	4633      	movge	r3, r6
 800733e:	42bb      	cmp	r3, r7
 8007340:	bfa8      	it	ge
 8007342:	463b      	movge	r3, r7
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfc2      	ittt	gt
 8007348:	1af6      	subgt	r6, r6, r3
 800734a:	1aff      	subgt	r7, r7, r3
 800734c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd17      	ble.n	8007386 <_strtod_l+0x736>
 8007356:	4659      	mov	r1, fp
 8007358:	461a      	mov	r2, r3
 800735a:	4620      	mov	r0, r4
 800735c:	f7ff f9ae 	bl	80066bc <__pow5mult>
 8007360:	4683      	mov	fp, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f aeb8 	beq.w	80070d8 <_strtod_l+0x488>
 8007368:	4601      	mov	r1, r0
 800736a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800736c:	4620      	mov	r0, r4
 800736e:	f7ff f8fb 	bl	8006568 <__multiply>
 8007372:	900b      	str	r0, [sp, #44]	; 0x2c
 8007374:	2800      	cmp	r0, #0
 8007376:	f43f aeaf 	beq.w	80070d8 <_strtod_l+0x488>
 800737a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800737c:	4620      	mov	r0, r4
 800737e:	f7fe ffdd 	bl	800633c <_Bfree>
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	9316      	str	r3, [sp, #88]	; 0x58
 8007386:	2e00      	cmp	r6, #0
 8007388:	f300 808c 	bgt.w	80074a4 <_strtod_l+0x854>
 800738c:	9b08      	ldr	r3, [sp, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	dd08      	ble.n	80073a4 <_strtod_l+0x754>
 8007392:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007394:	9905      	ldr	r1, [sp, #20]
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff f990 	bl	80066bc <__pow5mult>
 800739c:	9005      	str	r0, [sp, #20]
 800739e:	2800      	cmp	r0, #0
 80073a0:	f43f ae9a 	beq.w	80070d8 <_strtod_l+0x488>
 80073a4:	2f00      	cmp	r7, #0
 80073a6:	dd08      	ble.n	80073ba <_strtod_l+0x76a>
 80073a8:	9905      	ldr	r1, [sp, #20]
 80073aa:	463a      	mov	r2, r7
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff f9df 	bl	8006770 <__lshift>
 80073b2:	9005      	str	r0, [sp, #20]
 80073b4:	2800      	cmp	r0, #0
 80073b6:	f43f ae8f 	beq.w	80070d8 <_strtod_l+0x488>
 80073ba:	f1ba 0f00 	cmp.w	sl, #0
 80073be:	dd08      	ble.n	80073d2 <_strtod_l+0x782>
 80073c0:	4659      	mov	r1, fp
 80073c2:	4652      	mov	r2, sl
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff f9d3 	bl	8006770 <__lshift>
 80073ca:	4683      	mov	fp, r0
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f43f ae83 	beq.w	80070d8 <_strtod_l+0x488>
 80073d2:	9a05      	ldr	r2, [sp, #20]
 80073d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80073d6:	4620      	mov	r0, r4
 80073d8:	f7ff fa52 	bl	8006880 <__mdiff>
 80073dc:	4605      	mov	r5, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	f43f ae7a 	beq.w	80070d8 <_strtod_l+0x488>
 80073e4:	68c3      	ldr	r3, [r0, #12]
 80073e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e8:	2300      	movs	r3, #0
 80073ea:	60c3      	str	r3, [r0, #12]
 80073ec:	4659      	mov	r1, fp
 80073ee:	f7ff fa2b 	bl	8006848 <__mcmp>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	da60      	bge.n	80074b8 <_strtod_l+0x868>
 80073f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f8:	ea53 0308 	orrs.w	r3, r3, r8
 80073fc:	f040 8084 	bne.w	8007508 <_strtod_l+0x8b8>
 8007400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007404:	2b00      	cmp	r3, #0
 8007406:	d17f      	bne.n	8007508 <_strtod_l+0x8b8>
 8007408:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	051b      	lsls	r3, r3, #20
 8007410:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007414:	d978      	bls.n	8007508 <_strtod_l+0x8b8>
 8007416:	696b      	ldr	r3, [r5, #20]
 8007418:	b913      	cbnz	r3, 8007420 <_strtod_l+0x7d0>
 800741a:	692b      	ldr	r3, [r5, #16]
 800741c:	2b01      	cmp	r3, #1
 800741e:	dd73      	ble.n	8007508 <_strtod_l+0x8b8>
 8007420:	4629      	mov	r1, r5
 8007422:	2201      	movs	r2, #1
 8007424:	4620      	mov	r0, r4
 8007426:	f7ff f9a3 	bl	8006770 <__lshift>
 800742a:	4659      	mov	r1, fp
 800742c:	4605      	mov	r5, r0
 800742e:	f7ff fa0b 	bl	8006848 <__mcmp>
 8007432:	2800      	cmp	r0, #0
 8007434:	dd68      	ble.n	8007508 <_strtod_l+0x8b8>
 8007436:	9904      	ldr	r1, [sp, #16]
 8007438:	4a54      	ldr	r2, [pc, #336]	; (800758c <_strtod_l+0x93c>)
 800743a:	464b      	mov	r3, r9
 800743c:	2900      	cmp	r1, #0
 800743e:	f000 8084 	beq.w	800754a <_strtod_l+0x8fa>
 8007442:	ea02 0109 	and.w	r1, r2, r9
 8007446:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800744a:	dc7e      	bgt.n	800754a <_strtod_l+0x8fa>
 800744c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007450:	f77f aeb3 	ble.w	80071ba <_strtod_l+0x56a>
 8007454:	4b4e      	ldr	r3, [pc, #312]	; (8007590 <_strtod_l+0x940>)
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	2200      	movs	r2, #0
 800745c:	f7f9 f8cc 	bl	80005f8 <__aeabi_dmul>
 8007460:	4b4a      	ldr	r3, [pc, #296]	; (800758c <_strtod_l+0x93c>)
 8007462:	400b      	ands	r3, r1
 8007464:	4680      	mov	r8, r0
 8007466:	4689      	mov	r9, r1
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f ae3f 	bne.w	80070ec <_strtod_l+0x49c>
 800746e:	2322      	movs	r3, #34	; 0x22
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	e63b      	b.n	80070ec <_strtod_l+0x49c>
 8007474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	ea03 0808 	and.w	r8, r3, r8
 8007480:	e6e8      	b.n	8007254 <_strtod_l+0x604>
 8007482:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007486:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800748a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800748e:	36e2      	adds	r6, #226	; 0xe2
 8007490:	fa01 f306 	lsl.w	r3, r1, r6
 8007494:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007498:	e748      	b.n	800732c <_strtod_l+0x6dc>
 800749a:	2100      	movs	r1, #0
 800749c:	2301      	movs	r3, #1
 800749e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80074a2:	e743      	b.n	800732c <_strtod_l+0x6dc>
 80074a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074a6:	4632      	mov	r2, r6
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff f961 	bl	8006770 <__lshift>
 80074ae:	9016      	str	r0, [sp, #88]	; 0x58
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f47f af6b 	bne.w	800738c <_strtod_l+0x73c>
 80074b6:	e60f      	b.n	80070d8 <_strtod_l+0x488>
 80074b8:	46ca      	mov	sl, r9
 80074ba:	d171      	bne.n	80075a0 <_strtod_l+0x950>
 80074bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074c2:	b352      	cbz	r2, 800751a <_strtod_l+0x8ca>
 80074c4:	4a33      	ldr	r2, [pc, #204]	; (8007594 <_strtod_l+0x944>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d12a      	bne.n	8007520 <_strtod_l+0x8d0>
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	4641      	mov	r1, r8
 80074ce:	b1fb      	cbz	r3, 8007510 <_strtod_l+0x8c0>
 80074d0:	4b2e      	ldr	r3, [pc, #184]	; (800758c <_strtod_l+0x93c>)
 80074d2:	ea09 0303 	and.w	r3, r9, r3
 80074d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074de:	d81a      	bhi.n	8007516 <_strtod_l+0x8c6>
 80074e0:	0d1b      	lsrs	r3, r3, #20
 80074e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d118      	bne.n	8007520 <_strtod_l+0x8d0>
 80074ee:	4b2a      	ldr	r3, [pc, #168]	; (8007598 <_strtod_l+0x948>)
 80074f0:	459a      	cmp	sl, r3
 80074f2:	d102      	bne.n	80074fa <_strtod_l+0x8aa>
 80074f4:	3101      	adds	r1, #1
 80074f6:	f43f adef 	beq.w	80070d8 <_strtod_l+0x488>
 80074fa:	4b24      	ldr	r3, [pc, #144]	; (800758c <_strtod_l+0x93c>)
 80074fc:	ea0a 0303 	and.w	r3, sl, r3
 8007500:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007504:	f04f 0800 	mov.w	r8, #0
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1a2      	bne.n	8007454 <_strtod_l+0x804>
 800750e:	e5ed      	b.n	80070ec <_strtod_l+0x49c>
 8007510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007514:	e7e9      	b.n	80074ea <_strtod_l+0x89a>
 8007516:	4613      	mov	r3, r2
 8007518:	e7e7      	b.n	80074ea <_strtod_l+0x89a>
 800751a:	ea53 0308 	orrs.w	r3, r3, r8
 800751e:	d08a      	beq.n	8007436 <_strtod_l+0x7e6>
 8007520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007522:	b1e3      	cbz	r3, 800755e <_strtod_l+0x90e>
 8007524:	ea13 0f0a 	tst.w	r3, sl
 8007528:	d0ee      	beq.n	8007508 <_strtod_l+0x8b8>
 800752a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	b1c3      	cbz	r3, 8007566 <_strtod_l+0x916>
 8007534:	f7ff fb6f 	bl	8006c16 <sulp>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	ec51 0b18 	vmov	r0, r1, d8
 8007540:	f7f8 fea4 	bl	800028c <__adddf3>
 8007544:	4680      	mov	r8, r0
 8007546:	4689      	mov	r9, r1
 8007548:	e7de      	b.n	8007508 <_strtod_l+0x8b8>
 800754a:	4013      	ands	r3, r2
 800754c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007550:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007554:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007558:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800755c:	e7d4      	b.n	8007508 <_strtod_l+0x8b8>
 800755e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007560:	ea13 0f08 	tst.w	r3, r8
 8007564:	e7e0      	b.n	8007528 <_strtod_l+0x8d8>
 8007566:	f7ff fb56 	bl	8006c16 <sulp>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	ec51 0b18 	vmov	r0, r1, d8
 8007572:	f7f8 fe89 	bl	8000288 <__aeabi_dsub>
 8007576:	2200      	movs	r2, #0
 8007578:	2300      	movs	r3, #0
 800757a:	4680      	mov	r8, r0
 800757c:	4689      	mov	r9, r1
 800757e:	f7f9 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007582:	2800      	cmp	r0, #0
 8007584:	d0c0      	beq.n	8007508 <_strtod_l+0x8b8>
 8007586:	e618      	b.n	80071ba <_strtod_l+0x56a>
 8007588:	fffffc02 	.word	0xfffffc02
 800758c:	7ff00000 	.word	0x7ff00000
 8007590:	39500000 	.word	0x39500000
 8007594:	000fffff 	.word	0x000fffff
 8007598:	7fefffff 	.word	0x7fefffff
 800759c:	08008de0 	.word	0x08008de0
 80075a0:	4659      	mov	r1, fp
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7ff fac0 	bl	8006b28 <__ratio>
 80075a8:	ec57 6b10 	vmov	r6, r7, d0
 80075ac:	ee10 0a10 	vmov	r0, s0
 80075b0:	2200      	movs	r2, #0
 80075b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f9 fa9a 	bl	8000af0 <__aeabi_dcmple>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d071      	beq.n	80076a4 <_strtod_l+0xa54>
 80075c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d17c      	bne.n	80076c0 <_strtod_l+0xa70>
 80075c6:	f1b8 0f00 	cmp.w	r8, #0
 80075ca:	d15a      	bne.n	8007682 <_strtod_l+0xa32>
 80075cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d15d      	bne.n	8007690 <_strtod_l+0xa40>
 80075d4:	4b90      	ldr	r3, [pc, #576]	; (8007818 <_strtod_l+0xbc8>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	4630      	mov	r0, r6
 80075da:	4639      	mov	r1, r7
 80075dc:	f7f9 fa7e 	bl	8000adc <__aeabi_dcmplt>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d15c      	bne.n	800769e <_strtod_l+0xa4e>
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	4b8c      	ldr	r3, [pc, #560]	; (800781c <_strtod_l+0xbcc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	f7f9 f804 	bl	80005f8 <__aeabi_dmul>
 80075f0:	4606      	mov	r6, r0
 80075f2:	460f      	mov	r7, r1
 80075f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80075f8:	9606      	str	r6, [sp, #24]
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007600:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007604:	4b86      	ldr	r3, [pc, #536]	; (8007820 <_strtod_l+0xbd0>)
 8007606:	ea0a 0303 	and.w	r3, sl, r3
 800760a:	930d      	str	r3, [sp, #52]	; 0x34
 800760c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800760e:	4b85      	ldr	r3, [pc, #532]	; (8007824 <_strtod_l+0xbd4>)
 8007610:	429a      	cmp	r2, r3
 8007612:	f040 8090 	bne.w	8007736 <_strtod_l+0xae6>
 8007616:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800761a:	ec49 8b10 	vmov	d0, r8, r9
 800761e:	f7ff f9b9 	bl	8006994 <__ulp>
 8007622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007626:	ec51 0b10 	vmov	r0, r1, d0
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	4642      	mov	r2, r8
 8007630:	464b      	mov	r3, r9
 8007632:	f7f8 fe2b 	bl	800028c <__adddf3>
 8007636:	460b      	mov	r3, r1
 8007638:	4979      	ldr	r1, [pc, #484]	; (8007820 <_strtod_l+0xbd0>)
 800763a:	4a7b      	ldr	r2, [pc, #492]	; (8007828 <_strtod_l+0xbd8>)
 800763c:	4019      	ands	r1, r3
 800763e:	4291      	cmp	r1, r2
 8007640:	4680      	mov	r8, r0
 8007642:	d944      	bls.n	80076ce <_strtod_l+0xa7e>
 8007644:	ee18 2a90 	vmov	r2, s17
 8007648:	4b78      	ldr	r3, [pc, #480]	; (800782c <_strtod_l+0xbdc>)
 800764a:	429a      	cmp	r2, r3
 800764c:	d104      	bne.n	8007658 <_strtod_l+0xa08>
 800764e:	ee18 3a10 	vmov	r3, s16
 8007652:	3301      	adds	r3, #1
 8007654:	f43f ad40 	beq.w	80070d8 <_strtod_l+0x488>
 8007658:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800782c <_strtod_l+0xbdc>
 800765c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007660:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007662:	4620      	mov	r0, r4
 8007664:	f7fe fe6a 	bl	800633c <_Bfree>
 8007668:	9905      	ldr	r1, [sp, #20]
 800766a:	4620      	mov	r0, r4
 800766c:	f7fe fe66 	bl	800633c <_Bfree>
 8007670:	4659      	mov	r1, fp
 8007672:	4620      	mov	r0, r4
 8007674:	f7fe fe62 	bl	800633c <_Bfree>
 8007678:	4629      	mov	r1, r5
 800767a:	4620      	mov	r0, r4
 800767c:	f7fe fe5e 	bl	800633c <_Bfree>
 8007680:	e609      	b.n	8007296 <_strtod_l+0x646>
 8007682:	f1b8 0f01 	cmp.w	r8, #1
 8007686:	d103      	bne.n	8007690 <_strtod_l+0xa40>
 8007688:	f1b9 0f00 	cmp.w	r9, #0
 800768c:	f43f ad95 	beq.w	80071ba <_strtod_l+0x56a>
 8007690:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80077e8 <_strtod_l+0xb98>
 8007694:	4f60      	ldr	r7, [pc, #384]	; (8007818 <_strtod_l+0xbc8>)
 8007696:	ed8d 7b06 	vstr	d7, [sp, #24]
 800769a:	2600      	movs	r6, #0
 800769c:	e7ae      	b.n	80075fc <_strtod_l+0x9ac>
 800769e:	4f5f      	ldr	r7, [pc, #380]	; (800781c <_strtod_l+0xbcc>)
 80076a0:	2600      	movs	r6, #0
 80076a2:	e7a7      	b.n	80075f4 <_strtod_l+0x9a4>
 80076a4:	4b5d      	ldr	r3, [pc, #372]	; (800781c <_strtod_l+0xbcc>)
 80076a6:	4630      	mov	r0, r6
 80076a8:	4639      	mov	r1, r7
 80076aa:	2200      	movs	r2, #0
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076b2:	4606      	mov	r6, r0
 80076b4:	460f      	mov	r7, r1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d09c      	beq.n	80075f4 <_strtod_l+0x9a4>
 80076ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80076be:	e79d      	b.n	80075fc <_strtod_l+0x9ac>
 80076c0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80077f0 <_strtod_l+0xba0>
 80076c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80076c8:	ec57 6b17 	vmov	r6, r7, d7
 80076cc:	e796      	b.n	80075fc <_strtod_l+0x9ac>
 80076ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	46ca      	mov	sl, r9
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1c2      	bne.n	8007660 <_strtod_l+0xa10>
 80076da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076e0:	0d1b      	lsrs	r3, r3, #20
 80076e2:	051b      	lsls	r3, r3, #20
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d1bb      	bne.n	8007660 <_strtod_l+0xa10>
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 fae4 	bl	8000cb8 <__aeabi_d2lz>
 80076f0:	f7f8 ff54 	bl	800059c <__aeabi_l2d>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4630      	mov	r0, r6
 80076fa:	4639      	mov	r1, r7
 80076fc:	f7f8 fdc4 	bl	8000288 <__aeabi_dsub>
 8007700:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007702:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007706:	ea43 0308 	orr.w	r3, r3, r8
 800770a:	4313      	orrs	r3, r2
 800770c:	4606      	mov	r6, r0
 800770e:	460f      	mov	r7, r1
 8007710:	d054      	beq.n	80077bc <_strtod_l+0xb6c>
 8007712:	a339      	add	r3, pc, #228	; (adr r3, 80077f8 <_strtod_l+0xba8>)
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	f7f9 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	f47f ace5 	bne.w	80070ec <_strtod_l+0x49c>
 8007722:	a337      	add	r3, pc, #220	; (adr r3, 8007800 <_strtod_l+0xbb0>)
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	4630      	mov	r0, r6
 800772a:	4639      	mov	r1, r7
 800772c:	f7f9 f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8007730:	2800      	cmp	r0, #0
 8007732:	d095      	beq.n	8007660 <_strtod_l+0xa10>
 8007734:	e4da      	b.n	80070ec <_strtod_l+0x49c>
 8007736:	9b04      	ldr	r3, [sp, #16]
 8007738:	b333      	cbz	r3, 8007788 <_strtod_l+0xb38>
 800773a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800773c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007740:	d822      	bhi.n	8007788 <_strtod_l+0xb38>
 8007742:	a331      	add	r3, pc, #196	; (adr r3, 8007808 <_strtod_l+0xbb8>)
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f9 f9d0 	bl	8000af0 <__aeabi_dcmple>
 8007750:	b1a0      	cbz	r0, 800777c <_strtod_l+0xb2c>
 8007752:	4639      	mov	r1, r7
 8007754:	4630      	mov	r0, r6
 8007756:	f7f9 fa27 	bl	8000ba8 <__aeabi_d2uiz>
 800775a:	2801      	cmp	r0, #1
 800775c:	bf38      	it	cc
 800775e:	2001      	movcc	r0, #1
 8007760:	f7f8 fed0 	bl	8000504 <__aeabi_ui2d>
 8007764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007766:	4606      	mov	r6, r0
 8007768:	460f      	mov	r7, r1
 800776a:	bb23      	cbnz	r3, 80077b6 <_strtod_l+0xb66>
 800776c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007770:	9010      	str	r0, [sp, #64]	; 0x40
 8007772:	9311      	str	r3, [sp, #68]	; 0x44
 8007774:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007778:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800777c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800777e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007780:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	930f      	str	r3, [sp, #60]	; 0x3c
 8007788:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800778c:	eeb0 0a48 	vmov.f32	s0, s16
 8007790:	eef0 0a68 	vmov.f32	s1, s17
 8007794:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007798:	f7ff f8fc 	bl	8006994 <__ulp>
 800779c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80077a0:	ec53 2b10 	vmov	r2, r3, d0
 80077a4:	f7f8 ff28 	bl	80005f8 <__aeabi_dmul>
 80077a8:	ec53 2b18 	vmov	r2, r3, d8
 80077ac:	f7f8 fd6e 	bl	800028c <__adddf3>
 80077b0:	4680      	mov	r8, r0
 80077b2:	4689      	mov	r9, r1
 80077b4:	e78d      	b.n	80076d2 <_strtod_l+0xa82>
 80077b6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80077ba:	e7db      	b.n	8007774 <_strtod_l+0xb24>
 80077bc:	a314      	add	r3, pc, #80	; (adr r3, 8007810 <_strtod_l+0xbc0>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f9 f98b 	bl	8000adc <__aeabi_dcmplt>
 80077c6:	e7b3      	b.n	8007730 <_strtod_l+0xae0>
 80077c8:	2300      	movs	r3, #0
 80077ca:	930a      	str	r3, [sp, #40]	; 0x28
 80077cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	f7ff ba7c 	b.w	8006cce <_strtod_l+0x7e>
 80077d6:	2a65      	cmp	r2, #101	; 0x65
 80077d8:	f43f ab75 	beq.w	8006ec6 <_strtod_l+0x276>
 80077dc:	2a45      	cmp	r2, #69	; 0x45
 80077de:	f43f ab72 	beq.w	8006ec6 <_strtod_l+0x276>
 80077e2:	2301      	movs	r3, #1
 80077e4:	f7ff bbaa 	b.w	8006f3c <_strtod_l+0x2ec>
 80077e8:	00000000 	.word	0x00000000
 80077ec:	bff00000 	.word	0xbff00000
 80077f0:	00000000 	.word	0x00000000
 80077f4:	3ff00000 	.word	0x3ff00000
 80077f8:	94a03595 	.word	0x94a03595
 80077fc:	3fdfffff 	.word	0x3fdfffff
 8007800:	35afe535 	.word	0x35afe535
 8007804:	3fe00000 	.word	0x3fe00000
 8007808:	ffc00000 	.word	0xffc00000
 800780c:	41dfffff 	.word	0x41dfffff
 8007810:	94a03595 	.word	0x94a03595
 8007814:	3fcfffff 	.word	0x3fcfffff
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	3fe00000 	.word	0x3fe00000
 8007820:	7ff00000 	.word	0x7ff00000
 8007824:	7fe00000 	.word	0x7fe00000
 8007828:	7c9fffff 	.word	0x7c9fffff
 800782c:	7fefffff 	.word	0x7fefffff

08007830 <_strtod_r>:
 8007830:	4b01      	ldr	r3, [pc, #4]	; (8007838 <_strtod_r+0x8>)
 8007832:	f7ff ba0d 	b.w	8006c50 <_strtod_l>
 8007836:	bf00      	nop
 8007838:	2000006c 	.word	0x2000006c

0800783c <_strtol_l.constprop.0>:
 800783c:	2b01      	cmp	r3, #1
 800783e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007842:	d001      	beq.n	8007848 <_strtol_l.constprop.0+0xc>
 8007844:	2b24      	cmp	r3, #36	; 0x24
 8007846:	d906      	bls.n	8007856 <_strtol_l.constprop.0+0x1a>
 8007848:	f7fd fd8a 	bl	8005360 <__errno>
 800784c:	2316      	movs	r3, #22
 800784e:	6003      	str	r3, [r0, #0]
 8007850:	2000      	movs	r0, #0
 8007852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007856:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800793c <_strtol_l.constprop.0+0x100>
 800785a:	460d      	mov	r5, r1
 800785c:	462e      	mov	r6, r5
 800785e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007862:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007866:	f017 0708 	ands.w	r7, r7, #8
 800786a:	d1f7      	bne.n	800785c <_strtol_l.constprop.0+0x20>
 800786c:	2c2d      	cmp	r4, #45	; 0x2d
 800786e:	d132      	bne.n	80078d6 <_strtol_l.constprop.0+0x9a>
 8007870:	782c      	ldrb	r4, [r5, #0]
 8007872:	2701      	movs	r7, #1
 8007874:	1cb5      	adds	r5, r6, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d05b      	beq.n	8007932 <_strtol_l.constprop.0+0xf6>
 800787a:	2b10      	cmp	r3, #16
 800787c:	d109      	bne.n	8007892 <_strtol_l.constprop.0+0x56>
 800787e:	2c30      	cmp	r4, #48	; 0x30
 8007880:	d107      	bne.n	8007892 <_strtol_l.constprop.0+0x56>
 8007882:	782c      	ldrb	r4, [r5, #0]
 8007884:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007888:	2c58      	cmp	r4, #88	; 0x58
 800788a:	d14d      	bne.n	8007928 <_strtol_l.constprop.0+0xec>
 800788c:	786c      	ldrb	r4, [r5, #1]
 800788e:	2310      	movs	r3, #16
 8007890:	3502      	adds	r5, #2
 8007892:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007896:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800789a:	f04f 0e00 	mov.w	lr, #0
 800789e:	fbb8 f9f3 	udiv	r9, r8, r3
 80078a2:	4676      	mov	r6, lr
 80078a4:	fb03 8a19 	mls	sl, r3, r9, r8
 80078a8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80078ac:	f1bc 0f09 	cmp.w	ip, #9
 80078b0:	d816      	bhi.n	80078e0 <_strtol_l.constprop.0+0xa4>
 80078b2:	4664      	mov	r4, ip
 80078b4:	42a3      	cmp	r3, r4
 80078b6:	dd24      	ble.n	8007902 <_strtol_l.constprop.0+0xc6>
 80078b8:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80078bc:	d008      	beq.n	80078d0 <_strtol_l.constprop.0+0x94>
 80078be:	45b1      	cmp	r9, r6
 80078c0:	d31c      	bcc.n	80078fc <_strtol_l.constprop.0+0xc0>
 80078c2:	d101      	bne.n	80078c8 <_strtol_l.constprop.0+0x8c>
 80078c4:	45a2      	cmp	sl, r4
 80078c6:	db19      	blt.n	80078fc <_strtol_l.constprop.0+0xc0>
 80078c8:	fb06 4603 	mla	r6, r6, r3, r4
 80078cc:	f04f 0e01 	mov.w	lr, #1
 80078d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078d4:	e7e8      	b.n	80078a8 <_strtol_l.constprop.0+0x6c>
 80078d6:	2c2b      	cmp	r4, #43	; 0x2b
 80078d8:	bf04      	itt	eq
 80078da:	782c      	ldrbeq	r4, [r5, #0]
 80078dc:	1cb5      	addeq	r5, r6, #2
 80078de:	e7ca      	b.n	8007876 <_strtol_l.constprop.0+0x3a>
 80078e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80078e4:	f1bc 0f19 	cmp.w	ip, #25
 80078e8:	d801      	bhi.n	80078ee <_strtol_l.constprop.0+0xb2>
 80078ea:	3c37      	subs	r4, #55	; 0x37
 80078ec:	e7e2      	b.n	80078b4 <_strtol_l.constprop.0+0x78>
 80078ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80078f2:	f1bc 0f19 	cmp.w	ip, #25
 80078f6:	d804      	bhi.n	8007902 <_strtol_l.constprop.0+0xc6>
 80078f8:	3c57      	subs	r4, #87	; 0x57
 80078fa:	e7db      	b.n	80078b4 <_strtol_l.constprop.0+0x78>
 80078fc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8007900:	e7e6      	b.n	80078d0 <_strtol_l.constprop.0+0x94>
 8007902:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8007906:	d105      	bne.n	8007914 <_strtol_l.constprop.0+0xd8>
 8007908:	2322      	movs	r3, #34	; 0x22
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	4646      	mov	r6, r8
 800790e:	b942      	cbnz	r2, 8007922 <_strtol_l.constprop.0+0xe6>
 8007910:	4630      	mov	r0, r6
 8007912:	e79e      	b.n	8007852 <_strtol_l.constprop.0+0x16>
 8007914:	b107      	cbz	r7, 8007918 <_strtol_l.constprop.0+0xdc>
 8007916:	4276      	negs	r6, r6
 8007918:	2a00      	cmp	r2, #0
 800791a:	d0f9      	beq.n	8007910 <_strtol_l.constprop.0+0xd4>
 800791c:	f1be 0f00 	cmp.w	lr, #0
 8007920:	d000      	beq.n	8007924 <_strtol_l.constprop.0+0xe8>
 8007922:	1e69      	subs	r1, r5, #1
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	e7f3      	b.n	8007910 <_strtol_l.constprop.0+0xd4>
 8007928:	2430      	movs	r4, #48	; 0x30
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1b1      	bne.n	8007892 <_strtol_l.constprop.0+0x56>
 800792e:	2308      	movs	r3, #8
 8007930:	e7af      	b.n	8007892 <_strtol_l.constprop.0+0x56>
 8007932:	2c30      	cmp	r4, #48	; 0x30
 8007934:	d0a5      	beq.n	8007882 <_strtol_l.constprop.0+0x46>
 8007936:	230a      	movs	r3, #10
 8007938:	e7ab      	b.n	8007892 <_strtol_l.constprop.0+0x56>
 800793a:	bf00      	nop
 800793c:	08008e09 	.word	0x08008e09

08007940 <_strtol_r>:
 8007940:	f7ff bf7c 	b.w	800783c <_strtol_l.constprop.0>

08007944 <__ssputs_r>:
 8007944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	688e      	ldr	r6, [r1, #8]
 800794a:	461f      	mov	r7, r3
 800794c:	42be      	cmp	r6, r7
 800794e:	680b      	ldr	r3, [r1, #0]
 8007950:	4682      	mov	sl, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4690      	mov	r8, r2
 8007956:	d82c      	bhi.n	80079b2 <__ssputs_r+0x6e>
 8007958:	898a      	ldrh	r2, [r1, #12]
 800795a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800795e:	d026      	beq.n	80079ae <__ssputs_r+0x6a>
 8007960:	6965      	ldr	r5, [r4, #20]
 8007962:	6909      	ldr	r1, [r1, #16]
 8007964:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007968:	eba3 0901 	sub.w	r9, r3, r1
 800796c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007970:	1c7b      	adds	r3, r7, #1
 8007972:	444b      	add	r3, r9
 8007974:	106d      	asrs	r5, r5, #1
 8007976:	429d      	cmp	r5, r3
 8007978:	bf38      	it	cc
 800797a:	461d      	movcc	r5, r3
 800797c:	0553      	lsls	r3, r2, #21
 800797e:	d527      	bpl.n	80079d0 <__ssputs_r+0x8c>
 8007980:	4629      	mov	r1, r5
 8007982:	f7fe fc0f 	bl	80061a4 <_malloc_r>
 8007986:	4606      	mov	r6, r0
 8007988:	b360      	cbz	r0, 80079e4 <__ssputs_r+0xa0>
 800798a:	6921      	ldr	r1, [r4, #16]
 800798c:	464a      	mov	r2, r9
 800798e:	f000 fa1b 	bl	8007dc8 <memcpy>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	6126      	str	r6, [r4, #16]
 80079a0:	6165      	str	r5, [r4, #20]
 80079a2:	444e      	add	r6, r9
 80079a4:	eba5 0509 	sub.w	r5, r5, r9
 80079a8:	6026      	str	r6, [r4, #0]
 80079aa:	60a5      	str	r5, [r4, #8]
 80079ac:	463e      	mov	r6, r7
 80079ae:	42be      	cmp	r6, r7
 80079b0:	d900      	bls.n	80079b4 <__ssputs_r+0x70>
 80079b2:	463e      	mov	r6, r7
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	4632      	mov	r2, r6
 80079b8:	4641      	mov	r1, r8
 80079ba:	f000 f9c9 	bl	8007d50 <memmove>
 80079be:	68a3      	ldr	r3, [r4, #8]
 80079c0:	1b9b      	subs	r3, r3, r6
 80079c2:	60a3      	str	r3, [r4, #8]
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	4433      	add	r3, r6
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	2000      	movs	r0, #0
 80079cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d0:	462a      	mov	r2, r5
 80079d2:	f000 fdae 	bl	8008532 <_realloc_r>
 80079d6:	4606      	mov	r6, r0
 80079d8:	2800      	cmp	r0, #0
 80079da:	d1e0      	bne.n	800799e <__ssputs_r+0x5a>
 80079dc:	6921      	ldr	r1, [r4, #16]
 80079de:	4650      	mov	r0, sl
 80079e0:	f7fe fb6c 	bl	80060bc <_free_r>
 80079e4:	230c      	movs	r3, #12
 80079e6:	f8ca 3000 	str.w	r3, [sl]
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f6:	e7e9      	b.n	80079cc <__ssputs_r+0x88>

080079f8 <_svfiprintf_r>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	4698      	mov	r8, r3
 80079fe:	898b      	ldrh	r3, [r1, #12]
 8007a00:	061b      	lsls	r3, r3, #24
 8007a02:	b09d      	sub	sp, #116	; 0x74
 8007a04:	4607      	mov	r7, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	d50e      	bpl.n	8007a2a <_svfiprintf_r+0x32>
 8007a0c:	690b      	ldr	r3, [r1, #16]
 8007a0e:	b963      	cbnz	r3, 8007a2a <_svfiprintf_r+0x32>
 8007a10:	2140      	movs	r1, #64	; 0x40
 8007a12:	f7fe fbc7 	bl	80061a4 <_malloc_r>
 8007a16:	6028      	str	r0, [r5, #0]
 8007a18:	6128      	str	r0, [r5, #16]
 8007a1a:	b920      	cbnz	r0, 8007a26 <_svfiprintf_r+0x2e>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a24:	e0d0      	b.n	8007bc8 <_svfiprintf_r+0x1d0>
 8007a26:	2340      	movs	r3, #64	; 0x40
 8007a28:	616b      	str	r3, [r5, #20]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a2e:	2320      	movs	r3, #32
 8007a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a38:	2330      	movs	r3, #48	; 0x30
 8007a3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007be0 <_svfiprintf_r+0x1e8>
 8007a3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a42:	f04f 0901 	mov.w	r9, #1
 8007a46:	4623      	mov	r3, r4
 8007a48:	469a      	mov	sl, r3
 8007a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a4e:	b10a      	cbz	r2, 8007a54 <_svfiprintf_r+0x5c>
 8007a50:	2a25      	cmp	r2, #37	; 0x25
 8007a52:	d1f9      	bne.n	8007a48 <_svfiprintf_r+0x50>
 8007a54:	ebba 0b04 	subs.w	fp, sl, r4
 8007a58:	d00b      	beq.n	8007a72 <_svfiprintf_r+0x7a>
 8007a5a:	465b      	mov	r3, fp
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4638      	mov	r0, r7
 8007a62:	f7ff ff6f 	bl	8007944 <__ssputs_r>
 8007a66:	3001      	adds	r0, #1
 8007a68:	f000 80a9 	beq.w	8007bbe <_svfiprintf_r+0x1c6>
 8007a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a6e:	445a      	add	r2, fp
 8007a70:	9209      	str	r2, [sp, #36]	; 0x24
 8007a72:	f89a 3000 	ldrb.w	r3, [sl]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 80a1 	beq.w	8007bbe <_svfiprintf_r+0x1c6>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a86:	f10a 0a01 	add.w	sl, sl, #1
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	9307      	str	r3, [sp, #28]
 8007a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a92:	931a      	str	r3, [sp, #104]	; 0x68
 8007a94:	4654      	mov	r4, sl
 8007a96:	2205      	movs	r2, #5
 8007a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9c:	4850      	ldr	r0, [pc, #320]	; (8007be0 <_svfiprintf_r+0x1e8>)
 8007a9e:	f7f8 fb97 	bl	80001d0 <memchr>
 8007aa2:	9a04      	ldr	r2, [sp, #16]
 8007aa4:	b9d8      	cbnz	r0, 8007ade <_svfiprintf_r+0xe6>
 8007aa6:	06d0      	lsls	r0, r2, #27
 8007aa8:	bf44      	itt	mi
 8007aaa:	2320      	movmi	r3, #32
 8007aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab0:	0711      	lsls	r1, r2, #28
 8007ab2:	bf44      	itt	mi
 8007ab4:	232b      	movmi	r3, #43	; 0x2b
 8007ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aba:	f89a 3000 	ldrb.w	r3, [sl]
 8007abe:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac0:	d015      	beq.n	8007aee <_svfiprintf_r+0xf6>
 8007ac2:	9a07      	ldr	r2, [sp, #28]
 8007ac4:	4654      	mov	r4, sl
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f04f 0c0a 	mov.w	ip, #10
 8007acc:	4621      	mov	r1, r4
 8007ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ad2:	3b30      	subs	r3, #48	; 0x30
 8007ad4:	2b09      	cmp	r3, #9
 8007ad6:	d94d      	bls.n	8007b74 <_svfiprintf_r+0x17c>
 8007ad8:	b1b0      	cbz	r0, 8007b08 <_svfiprintf_r+0x110>
 8007ada:	9207      	str	r2, [sp, #28]
 8007adc:	e014      	b.n	8007b08 <_svfiprintf_r+0x110>
 8007ade:	eba0 0308 	sub.w	r3, r0, r8
 8007ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	46a2      	mov	sl, r4
 8007aec:	e7d2      	b.n	8007a94 <_svfiprintf_r+0x9c>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	1d19      	adds	r1, r3, #4
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	9103      	str	r1, [sp, #12]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfbb      	ittet	lt
 8007afa:	425b      	neglt	r3, r3
 8007afc:	f042 0202 	orrlt.w	r2, r2, #2
 8007b00:	9307      	strge	r3, [sp, #28]
 8007b02:	9307      	strlt	r3, [sp, #28]
 8007b04:	bfb8      	it	lt
 8007b06:	9204      	strlt	r2, [sp, #16]
 8007b08:	7823      	ldrb	r3, [r4, #0]
 8007b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b0c:	d10c      	bne.n	8007b28 <_svfiprintf_r+0x130>
 8007b0e:	7863      	ldrb	r3, [r4, #1]
 8007b10:	2b2a      	cmp	r3, #42	; 0x2a
 8007b12:	d134      	bne.n	8007b7e <_svfiprintf_r+0x186>
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	9203      	str	r2, [sp, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bfb8      	it	lt
 8007b20:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b24:	3402      	adds	r4, #2
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007bf0 <_svfiprintf_r+0x1f8>
 8007b2c:	7821      	ldrb	r1, [r4, #0]
 8007b2e:	2203      	movs	r2, #3
 8007b30:	4650      	mov	r0, sl
 8007b32:	f7f8 fb4d 	bl	80001d0 <memchr>
 8007b36:	b138      	cbz	r0, 8007b48 <_svfiprintf_r+0x150>
 8007b38:	9b04      	ldr	r3, [sp, #16]
 8007b3a:	eba0 000a 	sub.w	r0, r0, sl
 8007b3e:	2240      	movs	r2, #64	; 0x40
 8007b40:	4082      	lsls	r2, r0
 8007b42:	4313      	orrs	r3, r2
 8007b44:	3401      	adds	r4, #1
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4c:	4825      	ldr	r0, [pc, #148]	; (8007be4 <_svfiprintf_r+0x1ec>)
 8007b4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b52:	2206      	movs	r2, #6
 8007b54:	f7f8 fb3c 	bl	80001d0 <memchr>
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d038      	beq.n	8007bce <_svfiprintf_r+0x1d6>
 8007b5c:	4b22      	ldr	r3, [pc, #136]	; (8007be8 <_svfiprintf_r+0x1f0>)
 8007b5e:	bb1b      	cbnz	r3, 8007ba8 <_svfiprintf_r+0x1b0>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	3307      	adds	r3, #7
 8007b64:	f023 0307 	bic.w	r3, r3, #7
 8007b68:	3308      	adds	r3, #8
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6e:	4433      	add	r3, r6
 8007b70:	9309      	str	r3, [sp, #36]	; 0x24
 8007b72:	e768      	b.n	8007a46 <_svfiprintf_r+0x4e>
 8007b74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b78:	460c      	mov	r4, r1
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	e7a6      	b.n	8007acc <_svfiprintf_r+0xd4>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	3401      	adds	r4, #1
 8007b82:	9305      	str	r3, [sp, #20]
 8007b84:	4619      	mov	r1, r3
 8007b86:	f04f 0c0a 	mov.w	ip, #10
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b90:	3a30      	subs	r2, #48	; 0x30
 8007b92:	2a09      	cmp	r2, #9
 8007b94:	d903      	bls.n	8007b9e <_svfiprintf_r+0x1a6>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0c6      	beq.n	8007b28 <_svfiprintf_r+0x130>
 8007b9a:	9105      	str	r1, [sp, #20]
 8007b9c:	e7c4      	b.n	8007b28 <_svfiprintf_r+0x130>
 8007b9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e7f0      	b.n	8007b8a <_svfiprintf_r+0x192>
 8007ba8:	ab03      	add	r3, sp, #12
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	462a      	mov	r2, r5
 8007bae:	4b0f      	ldr	r3, [pc, #60]	; (8007bec <_svfiprintf_r+0x1f4>)
 8007bb0:	a904      	add	r1, sp, #16
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f7fc fc66 	bl	8004484 <_printf_float>
 8007bb8:	1c42      	adds	r2, r0, #1
 8007bba:	4606      	mov	r6, r0
 8007bbc:	d1d6      	bne.n	8007b6c <_svfiprintf_r+0x174>
 8007bbe:	89ab      	ldrh	r3, [r5, #12]
 8007bc0:	065b      	lsls	r3, r3, #25
 8007bc2:	f53f af2d 	bmi.w	8007a20 <_svfiprintf_r+0x28>
 8007bc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bc8:	b01d      	add	sp, #116	; 0x74
 8007bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bce:	ab03      	add	r3, sp, #12
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <_svfiprintf_r+0x1f4>)
 8007bd6:	a904      	add	r1, sp, #16
 8007bd8:	4638      	mov	r0, r7
 8007bda:	f7fc fef7 	bl	80049cc <_printf_i>
 8007bde:	e7eb      	b.n	8007bb8 <_svfiprintf_r+0x1c0>
 8007be0:	08008f09 	.word	0x08008f09
 8007be4:	08008f13 	.word	0x08008f13
 8007be8:	08004485 	.word	0x08004485
 8007bec:	08007945 	.word	0x08007945
 8007bf0:	08008f0f 	.word	0x08008f0f

08007bf4 <__sflush_r>:
 8007bf4:	898a      	ldrh	r2, [r1, #12]
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	0710      	lsls	r0, r2, #28
 8007bfe:	460c      	mov	r4, r1
 8007c00:	d458      	bmi.n	8007cb4 <__sflush_r+0xc0>
 8007c02:	684b      	ldr	r3, [r1, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dc05      	bgt.n	8007c14 <__sflush_r+0x20>
 8007c08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dc02      	bgt.n	8007c14 <__sflush_r+0x20>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d0f9      	beq.n	8007c0e <__sflush_r+0x1a>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c20:	682f      	ldr	r7, [r5, #0]
 8007c22:	6a21      	ldr	r1, [r4, #32]
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	d032      	beq.n	8007c8e <__sflush_r+0x9a>
 8007c28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	075a      	lsls	r2, r3, #29
 8007c2e:	d505      	bpl.n	8007c3c <__sflush_r+0x48>
 8007c30:	6863      	ldr	r3, [r4, #4]
 8007c32:	1ac0      	subs	r0, r0, r3
 8007c34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c36:	b10b      	cbz	r3, 8007c3c <__sflush_r+0x48>
 8007c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c3a:	1ac0      	subs	r0, r0, r3
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4602      	mov	r2, r0
 8007c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c42:	6a21      	ldr	r1, [r4, #32]
 8007c44:	4628      	mov	r0, r5
 8007c46:	47b0      	blx	r6
 8007c48:	1c43      	adds	r3, r0, #1
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	d106      	bne.n	8007c5c <__sflush_r+0x68>
 8007c4e:	6829      	ldr	r1, [r5, #0]
 8007c50:	291d      	cmp	r1, #29
 8007c52:	d82b      	bhi.n	8007cac <__sflush_r+0xb8>
 8007c54:	4a29      	ldr	r2, [pc, #164]	; (8007cfc <__sflush_r+0x108>)
 8007c56:	410a      	asrs	r2, r1
 8007c58:	07d6      	lsls	r6, r2, #31
 8007c5a:	d427      	bmi.n	8007cac <__sflush_r+0xb8>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6062      	str	r2, [r4, #4]
 8007c60:	04d9      	lsls	r1, r3, #19
 8007c62:	6922      	ldr	r2, [r4, #16]
 8007c64:	6022      	str	r2, [r4, #0]
 8007c66:	d504      	bpl.n	8007c72 <__sflush_r+0x7e>
 8007c68:	1c42      	adds	r2, r0, #1
 8007c6a:	d101      	bne.n	8007c70 <__sflush_r+0x7c>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b903      	cbnz	r3, 8007c72 <__sflush_r+0x7e>
 8007c70:	6560      	str	r0, [r4, #84]	; 0x54
 8007c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c74:	602f      	str	r7, [r5, #0]
 8007c76:	2900      	cmp	r1, #0
 8007c78:	d0c9      	beq.n	8007c0e <__sflush_r+0x1a>
 8007c7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c7e:	4299      	cmp	r1, r3
 8007c80:	d002      	beq.n	8007c88 <__sflush_r+0x94>
 8007c82:	4628      	mov	r0, r5
 8007c84:	f7fe fa1a 	bl	80060bc <_free_r>
 8007c88:	2000      	movs	r0, #0
 8007c8a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c8c:	e7c0      	b.n	8007c10 <__sflush_r+0x1c>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b0      	blx	r6
 8007c94:	1c41      	adds	r1, r0, #1
 8007c96:	d1c8      	bne.n	8007c2a <__sflush_r+0x36>
 8007c98:	682b      	ldr	r3, [r5, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0c5      	beq.n	8007c2a <__sflush_r+0x36>
 8007c9e:	2b1d      	cmp	r3, #29
 8007ca0:	d001      	beq.n	8007ca6 <__sflush_r+0xb2>
 8007ca2:	2b16      	cmp	r3, #22
 8007ca4:	d101      	bne.n	8007caa <__sflush_r+0xb6>
 8007ca6:	602f      	str	r7, [r5, #0]
 8007ca8:	e7b1      	b.n	8007c0e <__sflush_r+0x1a>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	e7ad      	b.n	8007c10 <__sflush_r+0x1c>
 8007cb4:	690f      	ldr	r7, [r1, #16]
 8007cb6:	2f00      	cmp	r7, #0
 8007cb8:	d0a9      	beq.n	8007c0e <__sflush_r+0x1a>
 8007cba:	0793      	lsls	r3, r2, #30
 8007cbc:	680e      	ldr	r6, [r1, #0]
 8007cbe:	bf08      	it	eq
 8007cc0:	694b      	ldreq	r3, [r1, #20]
 8007cc2:	600f      	str	r7, [r1, #0]
 8007cc4:	bf18      	it	ne
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	eba6 0807 	sub.w	r8, r6, r7
 8007ccc:	608b      	str	r3, [r1, #8]
 8007cce:	f1b8 0f00 	cmp.w	r8, #0
 8007cd2:	dd9c      	ble.n	8007c0e <__sflush_r+0x1a>
 8007cd4:	6a21      	ldr	r1, [r4, #32]
 8007cd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cd8:	4643      	mov	r3, r8
 8007cda:	463a      	mov	r2, r7
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b0      	blx	r6
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	dc06      	bgt.n	8007cf2 <__sflush_r+0xfe>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cea:	81a3      	strh	r3, [r4, #12]
 8007cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf0:	e78e      	b.n	8007c10 <__sflush_r+0x1c>
 8007cf2:	4407      	add	r7, r0
 8007cf4:	eba8 0800 	sub.w	r8, r8, r0
 8007cf8:	e7e9      	b.n	8007cce <__sflush_r+0xda>
 8007cfa:	bf00      	nop
 8007cfc:	dfbffffe 	.word	0xdfbffffe

08007d00 <_fflush_r>:
 8007d00:	b538      	push	{r3, r4, r5, lr}
 8007d02:	690b      	ldr	r3, [r1, #16]
 8007d04:	4605      	mov	r5, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b913      	cbnz	r3, 8007d10 <_fflush_r+0x10>
 8007d0a:	2500      	movs	r5, #0
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	b118      	cbz	r0, 8007d1a <_fflush_r+0x1a>
 8007d12:	6a03      	ldr	r3, [r0, #32]
 8007d14:	b90b      	cbnz	r3, 8007d1a <_fflush_r+0x1a>
 8007d16:	f7fd fa17 	bl	8005148 <__sinit>
 8007d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f3      	beq.n	8007d0a <_fflush_r+0xa>
 8007d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d24:	07d0      	lsls	r0, r2, #31
 8007d26:	d404      	bmi.n	8007d32 <_fflush_r+0x32>
 8007d28:	0599      	lsls	r1, r3, #22
 8007d2a:	d402      	bmi.n	8007d32 <_fflush_r+0x32>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f7fd fb42 	bl	80053b6 <__retarget_lock_acquire_recursive>
 8007d32:	4628      	mov	r0, r5
 8007d34:	4621      	mov	r1, r4
 8007d36:	f7ff ff5d 	bl	8007bf4 <__sflush_r>
 8007d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d3c:	07da      	lsls	r2, r3, #31
 8007d3e:	4605      	mov	r5, r0
 8007d40:	d4e4      	bmi.n	8007d0c <_fflush_r+0xc>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	059b      	lsls	r3, r3, #22
 8007d46:	d4e1      	bmi.n	8007d0c <_fflush_r+0xc>
 8007d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d4a:	f7fd fb35 	bl	80053b8 <__retarget_lock_release_recursive>
 8007d4e:	e7dd      	b.n	8007d0c <_fflush_r+0xc>

08007d50 <memmove>:
 8007d50:	4288      	cmp	r0, r1
 8007d52:	b510      	push	{r4, lr}
 8007d54:	eb01 0402 	add.w	r4, r1, r2
 8007d58:	d902      	bls.n	8007d60 <memmove+0x10>
 8007d5a:	4284      	cmp	r4, r0
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	d807      	bhi.n	8007d70 <memmove+0x20>
 8007d60:	1e43      	subs	r3, r0, #1
 8007d62:	42a1      	cmp	r1, r4
 8007d64:	d008      	beq.n	8007d78 <memmove+0x28>
 8007d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d6e:	e7f8      	b.n	8007d62 <memmove+0x12>
 8007d70:	4402      	add	r2, r0
 8007d72:	4601      	mov	r1, r0
 8007d74:	428a      	cmp	r2, r1
 8007d76:	d100      	bne.n	8007d7a <memmove+0x2a>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d82:	e7f7      	b.n	8007d74 <memmove+0x24>

08007d84 <strncmp>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	b16a      	cbz	r2, 8007da4 <strncmp+0x20>
 8007d88:	3901      	subs	r1, #1
 8007d8a:	1884      	adds	r4, r0, r2
 8007d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d103      	bne.n	8007da0 <strncmp+0x1c>
 8007d98:	42a0      	cmp	r0, r4
 8007d9a:	d001      	beq.n	8007da0 <strncmp+0x1c>
 8007d9c:	2a00      	cmp	r2, #0
 8007d9e:	d1f5      	bne.n	8007d8c <strncmp+0x8>
 8007da0:	1ad0      	subs	r0, r2, r3
 8007da2:	bd10      	pop	{r4, pc}
 8007da4:	4610      	mov	r0, r2
 8007da6:	e7fc      	b.n	8007da2 <strncmp+0x1e>

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 fe86 	bl	8001ac4 <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000438 	.word	0x20000438

08007dc8 <memcpy>:
 8007dc8:	440a      	add	r2, r1
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007dd0:	d100      	bne.n	8007dd4 <memcpy+0xc>
 8007dd2:	4770      	bx	lr
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dde:	4291      	cmp	r1, r2
 8007de0:	d1f9      	bne.n	8007dd6 <memcpy+0xe>
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	0000      	movs	r0, r0
	...

08007de8 <nan>:
 8007de8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007df0 <nan+0x8>
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	00000000 	.word	0x00000000
 8007df4:	7ff80000 	.word	0x7ff80000

08007df8 <__assert_func>:
 8007df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dfa:	4614      	mov	r4, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4b09      	ldr	r3, [pc, #36]	; (8007e24 <__assert_func+0x2c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4605      	mov	r5, r0
 8007e04:	68d8      	ldr	r0, [r3, #12]
 8007e06:	b14c      	cbz	r4, 8007e1c <__assert_func+0x24>
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <__assert_func+0x30>)
 8007e0a:	9100      	str	r1, [sp, #0]
 8007e0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e10:	4906      	ldr	r1, [pc, #24]	; (8007e2c <__assert_func+0x34>)
 8007e12:	462b      	mov	r3, r5
 8007e14:	f000 fbca 	bl	80085ac <fiprintf>
 8007e18:	f000 fbda 	bl	80085d0 <abort>
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <__assert_func+0x38>)
 8007e1e:	461c      	mov	r4, r3
 8007e20:	e7f3      	b.n	8007e0a <__assert_func+0x12>
 8007e22:	bf00      	nop
 8007e24:	20000068 	.word	0x20000068
 8007e28:	08008f22 	.word	0x08008f22
 8007e2c:	08008f2f 	.word	0x08008f2f
 8007e30:	08008f5d 	.word	0x08008f5d

08007e34 <_calloc_r>:
 8007e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e36:	fba1 2402 	umull	r2, r4, r1, r2
 8007e3a:	b94c      	cbnz	r4, 8007e50 <_calloc_r+0x1c>
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	9201      	str	r2, [sp, #4]
 8007e40:	f7fe f9b0 	bl	80061a4 <_malloc_r>
 8007e44:	9a01      	ldr	r2, [sp, #4]
 8007e46:	4605      	mov	r5, r0
 8007e48:	b930      	cbnz	r0, 8007e58 <_calloc_r+0x24>
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	b003      	add	sp, #12
 8007e4e:	bd30      	pop	{r4, r5, pc}
 8007e50:	220c      	movs	r2, #12
 8007e52:	6002      	str	r2, [r0, #0]
 8007e54:	2500      	movs	r5, #0
 8007e56:	e7f8      	b.n	8007e4a <_calloc_r+0x16>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	f7fd fa2f 	bl	80052bc <memset>
 8007e5e:	e7f4      	b.n	8007e4a <_calloc_r+0x16>

08007e60 <rshift>:
 8007e60:	6903      	ldr	r3, [r0, #16]
 8007e62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e6e:	f100 0414 	add.w	r4, r0, #20
 8007e72:	dd45      	ble.n	8007f00 <rshift+0xa0>
 8007e74:	f011 011f 	ands.w	r1, r1, #31
 8007e78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e80:	d10c      	bne.n	8007e9c <rshift+0x3c>
 8007e82:	f100 0710 	add.w	r7, r0, #16
 8007e86:	4629      	mov	r1, r5
 8007e88:	42b1      	cmp	r1, r6
 8007e8a:	d334      	bcc.n	8007ef6 <rshift+0x96>
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	1eea      	subs	r2, r5, #3
 8007e92:	4296      	cmp	r6, r2
 8007e94:	bf38      	it	cc
 8007e96:	2300      	movcc	r3, #0
 8007e98:	4423      	add	r3, r4
 8007e9a:	e015      	b.n	8007ec8 <rshift+0x68>
 8007e9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ea0:	f1c1 0820 	rsb	r8, r1, #32
 8007ea4:	40cf      	lsrs	r7, r1
 8007ea6:	f105 0e04 	add.w	lr, r5, #4
 8007eaa:	46a1      	mov	r9, r4
 8007eac:	4576      	cmp	r6, lr
 8007eae:	46f4      	mov	ip, lr
 8007eb0:	d815      	bhi.n	8007ede <rshift+0x7e>
 8007eb2:	1a9a      	subs	r2, r3, r2
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	3a04      	subs	r2, #4
 8007eb8:	3501      	adds	r5, #1
 8007eba:	42ae      	cmp	r6, r5
 8007ebc:	bf38      	it	cc
 8007ebe:	2200      	movcc	r2, #0
 8007ec0:	18a3      	adds	r3, r4, r2
 8007ec2:	50a7      	str	r7, [r4, r2]
 8007ec4:	b107      	cbz	r7, 8007ec8 <rshift+0x68>
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	1b1a      	subs	r2, r3, r4
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007ed0:	bf08      	it	eq
 8007ed2:	2300      	moveq	r3, #0
 8007ed4:	6102      	str	r2, [r0, #16]
 8007ed6:	bf08      	it	eq
 8007ed8:	6143      	streq	r3, [r0, #20]
 8007eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ede:	f8dc c000 	ldr.w	ip, [ip]
 8007ee2:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ee6:	ea4c 0707 	orr.w	r7, ip, r7
 8007eea:	f849 7b04 	str.w	r7, [r9], #4
 8007eee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ef2:	40cf      	lsrs	r7, r1
 8007ef4:	e7da      	b.n	8007eac <rshift+0x4c>
 8007ef6:	f851 cb04 	ldr.w	ip, [r1], #4
 8007efa:	f847 cf04 	str.w	ip, [r7, #4]!
 8007efe:	e7c3      	b.n	8007e88 <rshift+0x28>
 8007f00:	4623      	mov	r3, r4
 8007f02:	e7e1      	b.n	8007ec8 <rshift+0x68>

08007f04 <__hexdig_fun>:
 8007f04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d802      	bhi.n	8007f12 <__hexdig_fun+0xe>
 8007f0c:	3820      	subs	r0, #32
 8007f0e:	b2c0      	uxtb	r0, r0
 8007f10:	4770      	bx	lr
 8007f12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d801      	bhi.n	8007f1e <__hexdig_fun+0x1a>
 8007f1a:	3847      	subs	r0, #71	; 0x47
 8007f1c:	e7f7      	b.n	8007f0e <__hexdig_fun+0xa>
 8007f1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d801      	bhi.n	8007f2a <__hexdig_fun+0x26>
 8007f26:	3827      	subs	r0, #39	; 0x27
 8007f28:	e7f1      	b.n	8007f0e <__hexdig_fun+0xa>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	4770      	bx	lr
	...

08007f30 <__gethex>:
 8007f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	4617      	mov	r7, r2
 8007f36:	680a      	ldr	r2, [r1, #0]
 8007f38:	b085      	sub	sp, #20
 8007f3a:	f102 0b02 	add.w	fp, r2, #2
 8007f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f46:	4681      	mov	r9, r0
 8007f48:	468a      	mov	sl, r1
 8007f4a:	9302      	str	r3, [sp, #8]
 8007f4c:	32fe      	adds	r2, #254	; 0xfe
 8007f4e:	eb02 030b 	add.w	r3, r2, fp
 8007f52:	46d8      	mov	r8, fp
 8007f54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	2830      	cmp	r0, #48	; 0x30
 8007f5c:	d0f7      	beq.n	8007f4e <__gethex+0x1e>
 8007f5e:	f7ff ffd1 	bl	8007f04 <__hexdig_fun>
 8007f62:	4604      	mov	r4, r0
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d138      	bne.n	8007fda <__gethex+0xaa>
 8007f68:	49a7      	ldr	r1, [pc, #668]	; (8008208 <__gethex+0x2d8>)
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f7ff ff09 	bl	8007d84 <strncmp>
 8007f72:	4606      	mov	r6, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d169      	bne.n	800804c <__gethex+0x11c>
 8007f78:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007f7c:	465d      	mov	r5, fp
 8007f7e:	f7ff ffc1 	bl	8007f04 <__hexdig_fun>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d064      	beq.n	8008050 <__gethex+0x120>
 8007f86:	465a      	mov	r2, fp
 8007f88:	7810      	ldrb	r0, [r2, #0]
 8007f8a:	2830      	cmp	r0, #48	; 0x30
 8007f8c:	4690      	mov	r8, r2
 8007f8e:	f102 0201 	add.w	r2, r2, #1
 8007f92:	d0f9      	beq.n	8007f88 <__gethex+0x58>
 8007f94:	f7ff ffb6 	bl	8007f04 <__hexdig_fun>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	fab0 f480 	clz	r4, r0
 8007f9e:	0964      	lsrs	r4, r4, #5
 8007fa0:	465e      	mov	r6, fp
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	4615      	mov	r5, r2
 8007fa8:	3201      	adds	r2, #1
 8007faa:	7828      	ldrb	r0, [r5, #0]
 8007fac:	f7ff ffaa 	bl	8007f04 <__hexdig_fun>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1f8      	bne.n	8007fa6 <__gethex+0x76>
 8007fb4:	4994      	ldr	r1, [pc, #592]	; (8008208 <__gethex+0x2d8>)
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f7ff fee3 	bl	8007d84 <strncmp>
 8007fbe:	b978      	cbnz	r0, 8007fe0 <__gethex+0xb0>
 8007fc0:	b946      	cbnz	r6, 8007fd4 <__gethex+0xa4>
 8007fc2:	1c6e      	adds	r6, r5, #1
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	3201      	adds	r2, #1
 8007fca:	7828      	ldrb	r0, [r5, #0]
 8007fcc:	f7ff ff9a 	bl	8007f04 <__hexdig_fun>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d1f8      	bne.n	8007fc6 <__gethex+0x96>
 8007fd4:	1b73      	subs	r3, r6, r5
 8007fd6:	009e      	lsls	r6, r3, #2
 8007fd8:	e004      	b.n	8007fe4 <__gethex+0xb4>
 8007fda:	2400      	movs	r4, #0
 8007fdc:	4626      	mov	r6, r4
 8007fde:	e7e1      	b.n	8007fa4 <__gethex+0x74>
 8007fe0:	2e00      	cmp	r6, #0
 8007fe2:	d1f7      	bne.n	8007fd4 <__gethex+0xa4>
 8007fe4:	782b      	ldrb	r3, [r5, #0]
 8007fe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fea:	2b50      	cmp	r3, #80	; 0x50
 8007fec:	d13d      	bne.n	800806a <__gethex+0x13a>
 8007fee:	786b      	ldrb	r3, [r5, #1]
 8007ff0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ff2:	d02f      	beq.n	8008054 <__gethex+0x124>
 8007ff4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff6:	d031      	beq.n	800805c <__gethex+0x12c>
 8007ff8:	1c69      	adds	r1, r5, #1
 8007ffa:	f04f 0b00 	mov.w	fp, #0
 8007ffe:	7808      	ldrb	r0, [r1, #0]
 8008000:	f7ff ff80 	bl	8007f04 <__hexdig_fun>
 8008004:	1e42      	subs	r2, r0, #1
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	2a18      	cmp	r2, #24
 800800a:	d82e      	bhi.n	800806a <__gethex+0x13a>
 800800c:	f1a0 0210 	sub.w	r2, r0, #16
 8008010:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008014:	f7ff ff76 	bl	8007f04 <__hexdig_fun>
 8008018:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800801c:	fa5f fc8c 	uxtb.w	ip, ip
 8008020:	f1bc 0f18 	cmp.w	ip, #24
 8008024:	d91d      	bls.n	8008062 <__gethex+0x132>
 8008026:	f1bb 0f00 	cmp.w	fp, #0
 800802a:	d000      	beq.n	800802e <__gethex+0xfe>
 800802c:	4252      	negs	r2, r2
 800802e:	4416      	add	r6, r2
 8008030:	f8ca 1000 	str.w	r1, [sl]
 8008034:	b1dc      	cbz	r4, 800806e <__gethex+0x13e>
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf14      	ite	ne
 800803c:	f04f 0800 	movne.w	r8, #0
 8008040:	f04f 0806 	moveq.w	r8, #6
 8008044:	4640      	mov	r0, r8
 8008046:	b005      	add	sp, #20
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	4645      	mov	r5, r8
 800804e:	4626      	mov	r6, r4
 8008050:	2401      	movs	r4, #1
 8008052:	e7c7      	b.n	8007fe4 <__gethex+0xb4>
 8008054:	f04f 0b00 	mov.w	fp, #0
 8008058:	1ca9      	adds	r1, r5, #2
 800805a:	e7d0      	b.n	8007ffe <__gethex+0xce>
 800805c:	f04f 0b01 	mov.w	fp, #1
 8008060:	e7fa      	b.n	8008058 <__gethex+0x128>
 8008062:	230a      	movs	r3, #10
 8008064:	fb03 0002 	mla	r0, r3, r2, r0
 8008068:	e7d0      	b.n	800800c <__gethex+0xdc>
 800806a:	4629      	mov	r1, r5
 800806c:	e7e0      	b.n	8008030 <__gethex+0x100>
 800806e:	eba5 0308 	sub.w	r3, r5, r8
 8008072:	3b01      	subs	r3, #1
 8008074:	4621      	mov	r1, r4
 8008076:	2b07      	cmp	r3, #7
 8008078:	dc0a      	bgt.n	8008090 <__gethex+0x160>
 800807a:	4648      	mov	r0, r9
 800807c:	f7fe f91e 	bl	80062bc <_Balloc>
 8008080:	4604      	mov	r4, r0
 8008082:	b940      	cbnz	r0, 8008096 <__gethex+0x166>
 8008084:	4b61      	ldr	r3, [pc, #388]	; (800820c <__gethex+0x2dc>)
 8008086:	4602      	mov	r2, r0
 8008088:	21e4      	movs	r1, #228	; 0xe4
 800808a:	4861      	ldr	r0, [pc, #388]	; (8008210 <__gethex+0x2e0>)
 800808c:	f7ff feb4 	bl	8007df8 <__assert_func>
 8008090:	3101      	adds	r1, #1
 8008092:	105b      	asrs	r3, r3, #1
 8008094:	e7ef      	b.n	8008076 <__gethex+0x146>
 8008096:	f100 0a14 	add.w	sl, r0, #20
 800809a:	2300      	movs	r3, #0
 800809c:	495a      	ldr	r1, [pc, #360]	; (8008208 <__gethex+0x2d8>)
 800809e:	f8cd a004 	str.w	sl, [sp, #4]
 80080a2:	469b      	mov	fp, r3
 80080a4:	45a8      	cmp	r8, r5
 80080a6:	d342      	bcc.n	800812e <__gethex+0x1fe>
 80080a8:	9801      	ldr	r0, [sp, #4]
 80080aa:	f840 bb04 	str.w	fp, [r0], #4
 80080ae:	eba0 000a 	sub.w	r0, r0, sl
 80080b2:	1080      	asrs	r0, r0, #2
 80080b4:	6120      	str	r0, [r4, #16]
 80080b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80080ba:	4658      	mov	r0, fp
 80080bc:	f7fe f9f0 	bl	80064a0 <__hi0bits>
 80080c0:	683d      	ldr	r5, [r7, #0]
 80080c2:	eba8 0000 	sub.w	r0, r8, r0
 80080c6:	42a8      	cmp	r0, r5
 80080c8:	dd59      	ble.n	800817e <__gethex+0x24e>
 80080ca:	eba0 0805 	sub.w	r8, r0, r5
 80080ce:	4641      	mov	r1, r8
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7fe fd7f 	bl	8006bd4 <__any_on>
 80080d6:	4683      	mov	fp, r0
 80080d8:	b1b8      	cbz	r0, 800810a <__gethex+0x1da>
 80080da:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80080de:	1159      	asrs	r1, r3, #5
 80080e0:	f003 021f 	and.w	r2, r3, #31
 80080e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80080e8:	f04f 0b01 	mov.w	fp, #1
 80080ec:	fa0b f202 	lsl.w	r2, fp, r2
 80080f0:	420a      	tst	r2, r1
 80080f2:	d00a      	beq.n	800810a <__gethex+0x1da>
 80080f4:	455b      	cmp	r3, fp
 80080f6:	dd06      	ble.n	8008106 <__gethex+0x1d6>
 80080f8:	f1a8 0102 	sub.w	r1, r8, #2
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7fe fd69 	bl	8006bd4 <__any_on>
 8008102:	2800      	cmp	r0, #0
 8008104:	d138      	bne.n	8008178 <__gethex+0x248>
 8008106:	f04f 0b02 	mov.w	fp, #2
 800810a:	4641      	mov	r1, r8
 800810c:	4620      	mov	r0, r4
 800810e:	f7ff fea7 	bl	8007e60 <rshift>
 8008112:	4446      	add	r6, r8
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	42b3      	cmp	r3, r6
 8008118:	da41      	bge.n	800819e <__gethex+0x26e>
 800811a:	4621      	mov	r1, r4
 800811c:	4648      	mov	r0, r9
 800811e:	f7fe f90d 	bl	800633c <_Bfree>
 8008122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008124:	2300      	movs	r3, #0
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800812c:	e78a      	b.n	8008044 <__gethex+0x114>
 800812e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008132:	2a2e      	cmp	r2, #46	; 0x2e
 8008134:	d014      	beq.n	8008160 <__gethex+0x230>
 8008136:	2b20      	cmp	r3, #32
 8008138:	d106      	bne.n	8008148 <__gethex+0x218>
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	f843 bb04 	str.w	fp, [r3], #4
 8008140:	f04f 0b00 	mov.w	fp, #0
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	465b      	mov	r3, fp
 8008148:	7828      	ldrb	r0, [r5, #0]
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	f7ff feda 	bl	8007f04 <__hexdig_fun>
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	f000 000f 	and.w	r0, r0, #15
 8008156:	4098      	lsls	r0, r3
 8008158:	ea4b 0b00 	orr.w	fp, fp, r0
 800815c:	3304      	adds	r3, #4
 800815e:	e7a1      	b.n	80080a4 <__gethex+0x174>
 8008160:	45a8      	cmp	r8, r5
 8008162:	d8e8      	bhi.n	8008136 <__gethex+0x206>
 8008164:	2201      	movs	r2, #1
 8008166:	4628      	mov	r0, r5
 8008168:	9303      	str	r3, [sp, #12]
 800816a:	f7ff fe0b 	bl	8007d84 <strncmp>
 800816e:	4926      	ldr	r1, [pc, #152]	; (8008208 <__gethex+0x2d8>)
 8008170:	9b03      	ldr	r3, [sp, #12]
 8008172:	2800      	cmp	r0, #0
 8008174:	d1df      	bne.n	8008136 <__gethex+0x206>
 8008176:	e795      	b.n	80080a4 <__gethex+0x174>
 8008178:	f04f 0b03 	mov.w	fp, #3
 800817c:	e7c5      	b.n	800810a <__gethex+0x1da>
 800817e:	da0b      	bge.n	8008198 <__gethex+0x268>
 8008180:	eba5 0800 	sub.w	r8, r5, r0
 8008184:	4621      	mov	r1, r4
 8008186:	4642      	mov	r2, r8
 8008188:	4648      	mov	r0, r9
 800818a:	f7fe faf1 	bl	8006770 <__lshift>
 800818e:	eba6 0608 	sub.w	r6, r6, r8
 8008192:	4604      	mov	r4, r0
 8008194:	f100 0a14 	add.w	sl, r0, #20
 8008198:	f04f 0b00 	mov.w	fp, #0
 800819c:	e7ba      	b.n	8008114 <__gethex+0x1e4>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	dd73      	ble.n	800828c <__gethex+0x35c>
 80081a4:	1b9e      	subs	r6, r3, r6
 80081a6:	42b5      	cmp	r5, r6
 80081a8:	dc34      	bgt.n	8008214 <__gethex+0x2e4>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d023      	beq.n	80081f8 <__gethex+0x2c8>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d025      	beq.n	8008200 <__gethex+0x2d0>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d115      	bne.n	80081e4 <__gethex+0x2b4>
 80081b8:	42b5      	cmp	r5, r6
 80081ba:	d113      	bne.n	80081e4 <__gethex+0x2b4>
 80081bc:	2d01      	cmp	r5, #1
 80081be:	d10b      	bne.n	80081d8 <__gethex+0x2a8>
 80081c0:	9a02      	ldr	r2, [sp, #8]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	2301      	movs	r3, #1
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	f8ca 3000 	str.w	r3, [sl]
 80081ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80081d4:	601c      	str	r4, [r3, #0]
 80081d6:	e735      	b.n	8008044 <__gethex+0x114>
 80081d8:	1e69      	subs	r1, r5, #1
 80081da:	4620      	mov	r0, r4
 80081dc:	f7fe fcfa 	bl	8006bd4 <__any_on>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1ed      	bne.n	80081c0 <__gethex+0x290>
 80081e4:	4621      	mov	r1, r4
 80081e6:	4648      	mov	r0, r9
 80081e8:	f7fe f8a8 	bl	800633c <_Bfree>
 80081ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ee:	2300      	movs	r3, #0
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80081f6:	e725      	b.n	8008044 <__gethex+0x114>
 80081f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f2      	bne.n	80081e4 <__gethex+0x2b4>
 80081fe:	e7df      	b.n	80081c0 <__gethex+0x290>
 8008200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1dc      	bne.n	80081c0 <__gethex+0x290>
 8008206:	e7ed      	b.n	80081e4 <__gethex+0x2b4>
 8008208:	08008db4 	.word	0x08008db4
 800820c:	08008c49 	.word	0x08008c49
 8008210:	08008f5e 	.word	0x08008f5e
 8008214:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8008218:	f1bb 0f00 	cmp.w	fp, #0
 800821c:	d133      	bne.n	8008286 <__gethex+0x356>
 800821e:	f1b8 0f00 	cmp.w	r8, #0
 8008222:	d004      	beq.n	800822e <__gethex+0x2fe>
 8008224:	4641      	mov	r1, r8
 8008226:	4620      	mov	r0, r4
 8008228:	f7fe fcd4 	bl	8006bd4 <__any_on>
 800822c:	4683      	mov	fp, r0
 800822e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008232:	2301      	movs	r3, #1
 8008234:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008238:	f008 081f 	and.w	r8, r8, #31
 800823c:	fa03 f308 	lsl.w	r3, r3, r8
 8008240:	4213      	tst	r3, r2
 8008242:	4631      	mov	r1, r6
 8008244:	4620      	mov	r0, r4
 8008246:	bf18      	it	ne
 8008248:	f04b 0b02 	orrne.w	fp, fp, #2
 800824c:	1bad      	subs	r5, r5, r6
 800824e:	f7ff fe07 	bl	8007e60 <rshift>
 8008252:	687e      	ldr	r6, [r7, #4]
 8008254:	f04f 0802 	mov.w	r8, #2
 8008258:	f1bb 0f00 	cmp.w	fp, #0
 800825c:	d04a      	beq.n	80082f4 <__gethex+0x3c4>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b02      	cmp	r3, #2
 8008262:	d016      	beq.n	8008292 <__gethex+0x362>
 8008264:	2b03      	cmp	r3, #3
 8008266:	d018      	beq.n	800829a <__gethex+0x36a>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d109      	bne.n	8008280 <__gethex+0x350>
 800826c:	f01b 0f02 	tst.w	fp, #2
 8008270:	d006      	beq.n	8008280 <__gethex+0x350>
 8008272:	f8da 3000 	ldr.w	r3, [sl]
 8008276:	ea4b 0b03 	orr.w	fp, fp, r3
 800827a:	f01b 0f01 	tst.w	fp, #1
 800827e:	d10f      	bne.n	80082a0 <__gethex+0x370>
 8008280:	f048 0810 	orr.w	r8, r8, #16
 8008284:	e036      	b.n	80082f4 <__gethex+0x3c4>
 8008286:	f04f 0b01 	mov.w	fp, #1
 800828a:	e7d0      	b.n	800822e <__gethex+0x2fe>
 800828c:	f04f 0801 	mov.w	r8, #1
 8008290:	e7e2      	b.n	8008258 <__gethex+0x328>
 8008292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008294:	f1c3 0301 	rsb	r3, r3, #1
 8008298:	930f      	str	r3, [sp, #60]	; 0x3c
 800829a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0ef      	beq.n	8008280 <__gethex+0x350>
 80082a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082a4:	f104 0214 	add.w	r2, r4, #20
 80082a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80082b2:	2300      	movs	r3, #0
 80082b4:	4694      	mov	ip, r2
 80082b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80082ba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80082be:	d01e      	beq.n	80082fe <__gethex+0x3ce>
 80082c0:	3101      	adds	r1, #1
 80082c2:	f8cc 1000 	str.w	r1, [ip]
 80082c6:	f1b8 0f02 	cmp.w	r8, #2
 80082ca:	f104 0214 	add.w	r2, r4, #20
 80082ce:	d13d      	bne.n	800834c <__gethex+0x41c>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	42ab      	cmp	r3, r5
 80082d6:	d10b      	bne.n	80082f0 <__gethex+0x3c0>
 80082d8:	1169      	asrs	r1, r5, #5
 80082da:	2301      	movs	r3, #1
 80082dc:	f005 051f 	and.w	r5, r5, #31
 80082e0:	fa03 f505 	lsl.w	r5, r3, r5
 80082e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e8:	421d      	tst	r5, r3
 80082ea:	bf18      	it	ne
 80082ec:	f04f 0801 	movne.w	r8, #1
 80082f0:	f048 0820 	orr.w	r8, r8, #32
 80082f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082f6:	601c      	str	r4, [r3, #0]
 80082f8:	9b02      	ldr	r3, [sp, #8]
 80082fa:	601e      	str	r6, [r3, #0]
 80082fc:	e6a2      	b.n	8008044 <__gethex+0x114>
 80082fe:	4290      	cmp	r0, r2
 8008300:	f842 3c04 	str.w	r3, [r2, #-4]
 8008304:	d8d6      	bhi.n	80082b4 <__gethex+0x384>
 8008306:	68a2      	ldr	r2, [r4, #8]
 8008308:	4593      	cmp	fp, r2
 800830a:	db17      	blt.n	800833c <__gethex+0x40c>
 800830c:	6861      	ldr	r1, [r4, #4]
 800830e:	4648      	mov	r0, r9
 8008310:	3101      	adds	r1, #1
 8008312:	f7fd ffd3 	bl	80062bc <_Balloc>
 8008316:	4682      	mov	sl, r0
 8008318:	b918      	cbnz	r0, 8008322 <__gethex+0x3f2>
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <__gethex+0x458>)
 800831c:	4602      	mov	r2, r0
 800831e:	2184      	movs	r1, #132	; 0x84
 8008320:	e6b3      	b.n	800808a <__gethex+0x15a>
 8008322:	6922      	ldr	r2, [r4, #16]
 8008324:	3202      	adds	r2, #2
 8008326:	f104 010c 	add.w	r1, r4, #12
 800832a:	0092      	lsls	r2, r2, #2
 800832c:	300c      	adds	r0, #12
 800832e:	f7ff fd4b 	bl	8007dc8 <memcpy>
 8008332:	4621      	mov	r1, r4
 8008334:	4648      	mov	r0, r9
 8008336:	f7fe f801 	bl	800633c <_Bfree>
 800833a:	4654      	mov	r4, sl
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	1c51      	adds	r1, r2, #1
 8008340:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008344:	6121      	str	r1, [r4, #16]
 8008346:	2101      	movs	r1, #1
 8008348:	6151      	str	r1, [r2, #20]
 800834a:	e7bc      	b.n	80082c6 <__gethex+0x396>
 800834c:	6921      	ldr	r1, [r4, #16]
 800834e:	4559      	cmp	r1, fp
 8008350:	dd0b      	ble.n	800836a <__gethex+0x43a>
 8008352:	2101      	movs	r1, #1
 8008354:	4620      	mov	r0, r4
 8008356:	f7ff fd83 	bl	8007e60 <rshift>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	3601      	adds	r6, #1
 800835e:	42b3      	cmp	r3, r6
 8008360:	f6ff aedb 	blt.w	800811a <__gethex+0x1ea>
 8008364:	f04f 0801 	mov.w	r8, #1
 8008368:	e7c2      	b.n	80082f0 <__gethex+0x3c0>
 800836a:	f015 051f 	ands.w	r5, r5, #31
 800836e:	d0f9      	beq.n	8008364 <__gethex+0x434>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	441a      	add	r2, r3
 8008374:	f1c5 0520 	rsb	r5, r5, #32
 8008378:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800837c:	f7fe f890 	bl	80064a0 <__hi0bits>
 8008380:	42a8      	cmp	r0, r5
 8008382:	dbe6      	blt.n	8008352 <__gethex+0x422>
 8008384:	e7ee      	b.n	8008364 <__gethex+0x434>
 8008386:	bf00      	nop
 8008388:	08008c49 	.word	0x08008c49

0800838c <L_shift>:
 800838c:	f1c2 0208 	rsb	r2, r2, #8
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	b570      	push	{r4, r5, r6, lr}
 8008394:	f1c2 0620 	rsb	r6, r2, #32
 8008398:	6843      	ldr	r3, [r0, #4]
 800839a:	6804      	ldr	r4, [r0, #0]
 800839c:	fa03 f506 	lsl.w	r5, r3, r6
 80083a0:	432c      	orrs	r4, r5
 80083a2:	40d3      	lsrs	r3, r2
 80083a4:	6004      	str	r4, [r0, #0]
 80083a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80083aa:	4288      	cmp	r0, r1
 80083ac:	d3f4      	bcc.n	8008398 <L_shift+0xc>
 80083ae:	bd70      	pop	{r4, r5, r6, pc}

080083b0 <__match>:
 80083b0:	b530      	push	{r4, r5, lr}
 80083b2:	6803      	ldr	r3, [r0, #0]
 80083b4:	3301      	adds	r3, #1
 80083b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ba:	b914      	cbnz	r4, 80083c2 <__match+0x12>
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	2001      	movs	r0, #1
 80083c0:	bd30      	pop	{r4, r5, pc}
 80083c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083ca:	2d19      	cmp	r5, #25
 80083cc:	bf98      	it	ls
 80083ce:	3220      	addls	r2, #32
 80083d0:	42a2      	cmp	r2, r4
 80083d2:	d0f0      	beq.n	80083b6 <__match+0x6>
 80083d4:	2000      	movs	r0, #0
 80083d6:	e7f3      	b.n	80083c0 <__match+0x10>

080083d8 <__hexnan>:
 80083d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083dc:	680b      	ldr	r3, [r1, #0]
 80083de:	6801      	ldr	r1, [r0, #0]
 80083e0:	115e      	asrs	r6, r3, #5
 80083e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083e6:	f013 031f 	ands.w	r3, r3, #31
 80083ea:	b087      	sub	sp, #28
 80083ec:	bf18      	it	ne
 80083ee:	3604      	addne	r6, #4
 80083f0:	2500      	movs	r5, #0
 80083f2:	1f37      	subs	r7, r6, #4
 80083f4:	4682      	mov	sl, r0
 80083f6:	4690      	mov	r8, r2
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80083fe:	46b9      	mov	r9, r7
 8008400:	463c      	mov	r4, r7
 8008402:	9502      	str	r5, [sp, #8]
 8008404:	46ab      	mov	fp, r5
 8008406:	784a      	ldrb	r2, [r1, #1]
 8008408:	1c4b      	adds	r3, r1, #1
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	b342      	cbz	r2, 8008460 <__hexnan+0x88>
 800840e:	4610      	mov	r0, r2
 8008410:	9105      	str	r1, [sp, #20]
 8008412:	9204      	str	r2, [sp, #16]
 8008414:	f7ff fd76 	bl	8007f04 <__hexdig_fun>
 8008418:	2800      	cmp	r0, #0
 800841a:	d14f      	bne.n	80084bc <__hexnan+0xe4>
 800841c:	9a04      	ldr	r2, [sp, #16]
 800841e:	9905      	ldr	r1, [sp, #20]
 8008420:	2a20      	cmp	r2, #32
 8008422:	d818      	bhi.n	8008456 <__hexnan+0x7e>
 8008424:	9b02      	ldr	r3, [sp, #8]
 8008426:	459b      	cmp	fp, r3
 8008428:	dd13      	ble.n	8008452 <__hexnan+0x7a>
 800842a:	454c      	cmp	r4, r9
 800842c:	d206      	bcs.n	800843c <__hexnan+0x64>
 800842e:	2d07      	cmp	r5, #7
 8008430:	dc04      	bgt.n	800843c <__hexnan+0x64>
 8008432:	462a      	mov	r2, r5
 8008434:	4649      	mov	r1, r9
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff ffa8 	bl	800838c <L_shift>
 800843c:	4544      	cmp	r4, r8
 800843e:	d950      	bls.n	80084e2 <__hexnan+0x10a>
 8008440:	2300      	movs	r3, #0
 8008442:	f1a4 0904 	sub.w	r9, r4, #4
 8008446:	f844 3c04 	str.w	r3, [r4, #-4]
 800844a:	f8cd b008 	str.w	fp, [sp, #8]
 800844e:	464c      	mov	r4, r9
 8008450:	461d      	mov	r5, r3
 8008452:	9903      	ldr	r1, [sp, #12]
 8008454:	e7d7      	b.n	8008406 <__hexnan+0x2e>
 8008456:	2a29      	cmp	r2, #41	; 0x29
 8008458:	d155      	bne.n	8008506 <__hexnan+0x12e>
 800845a:	3102      	adds	r1, #2
 800845c:	f8ca 1000 	str.w	r1, [sl]
 8008460:	f1bb 0f00 	cmp.w	fp, #0
 8008464:	d04f      	beq.n	8008506 <__hexnan+0x12e>
 8008466:	454c      	cmp	r4, r9
 8008468:	d206      	bcs.n	8008478 <__hexnan+0xa0>
 800846a:	2d07      	cmp	r5, #7
 800846c:	dc04      	bgt.n	8008478 <__hexnan+0xa0>
 800846e:	462a      	mov	r2, r5
 8008470:	4649      	mov	r1, r9
 8008472:	4620      	mov	r0, r4
 8008474:	f7ff ff8a 	bl	800838c <L_shift>
 8008478:	4544      	cmp	r4, r8
 800847a:	d934      	bls.n	80084e6 <__hexnan+0x10e>
 800847c:	f1a8 0204 	sub.w	r2, r8, #4
 8008480:	4623      	mov	r3, r4
 8008482:	f853 1b04 	ldr.w	r1, [r3], #4
 8008486:	f842 1f04 	str.w	r1, [r2, #4]!
 800848a:	429f      	cmp	r7, r3
 800848c:	d2f9      	bcs.n	8008482 <__hexnan+0xaa>
 800848e:	1b3b      	subs	r3, r7, r4
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	3304      	adds	r3, #4
 8008496:	3e03      	subs	r6, #3
 8008498:	3401      	adds	r4, #1
 800849a:	42a6      	cmp	r6, r4
 800849c:	bf38      	it	cc
 800849e:	2304      	movcc	r3, #4
 80084a0:	4443      	add	r3, r8
 80084a2:	2200      	movs	r2, #0
 80084a4:	f843 2b04 	str.w	r2, [r3], #4
 80084a8:	429f      	cmp	r7, r3
 80084aa:	d2fb      	bcs.n	80084a4 <__hexnan+0xcc>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	b91b      	cbnz	r3, 80084b8 <__hexnan+0xe0>
 80084b0:	4547      	cmp	r7, r8
 80084b2:	d126      	bne.n	8008502 <__hexnan+0x12a>
 80084b4:	2301      	movs	r3, #1
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	2005      	movs	r0, #5
 80084ba:	e025      	b.n	8008508 <__hexnan+0x130>
 80084bc:	3501      	adds	r5, #1
 80084be:	2d08      	cmp	r5, #8
 80084c0:	f10b 0b01 	add.w	fp, fp, #1
 80084c4:	dd06      	ble.n	80084d4 <__hexnan+0xfc>
 80084c6:	4544      	cmp	r4, r8
 80084c8:	d9c3      	bls.n	8008452 <__hexnan+0x7a>
 80084ca:	2300      	movs	r3, #0
 80084cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80084d0:	2501      	movs	r5, #1
 80084d2:	3c04      	subs	r4, #4
 80084d4:	6822      	ldr	r2, [r4, #0]
 80084d6:	f000 000f 	and.w	r0, r0, #15
 80084da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80084de:	6020      	str	r0, [r4, #0]
 80084e0:	e7b7      	b.n	8008452 <__hexnan+0x7a>
 80084e2:	2508      	movs	r5, #8
 80084e4:	e7b5      	b.n	8008452 <__hexnan+0x7a>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0df      	beq.n	80084ac <__hexnan+0xd4>
 80084ec:	f1c3 0320 	rsb	r3, r3, #32
 80084f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084f4:	40da      	lsrs	r2, r3
 80084f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80084fa:	4013      	ands	r3, r2
 80084fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008500:	e7d4      	b.n	80084ac <__hexnan+0xd4>
 8008502:	3f04      	subs	r7, #4
 8008504:	e7d2      	b.n	80084ac <__hexnan+0xd4>
 8008506:	2004      	movs	r0, #4
 8008508:	b007      	add	sp, #28
 800850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800850e <__ascii_mbtowc>:
 800850e:	b082      	sub	sp, #8
 8008510:	b901      	cbnz	r1, 8008514 <__ascii_mbtowc+0x6>
 8008512:	a901      	add	r1, sp, #4
 8008514:	b142      	cbz	r2, 8008528 <__ascii_mbtowc+0x1a>
 8008516:	b14b      	cbz	r3, 800852c <__ascii_mbtowc+0x1e>
 8008518:	7813      	ldrb	r3, [r2, #0]
 800851a:	600b      	str	r3, [r1, #0]
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	1e10      	subs	r0, r2, #0
 8008520:	bf18      	it	ne
 8008522:	2001      	movne	r0, #1
 8008524:	b002      	add	sp, #8
 8008526:	4770      	bx	lr
 8008528:	4610      	mov	r0, r2
 800852a:	e7fb      	b.n	8008524 <__ascii_mbtowc+0x16>
 800852c:	f06f 0001 	mvn.w	r0, #1
 8008530:	e7f8      	b.n	8008524 <__ascii_mbtowc+0x16>

08008532 <_realloc_r>:
 8008532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008536:	4680      	mov	r8, r0
 8008538:	4614      	mov	r4, r2
 800853a:	460e      	mov	r6, r1
 800853c:	b921      	cbnz	r1, 8008548 <_realloc_r+0x16>
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	4611      	mov	r1, r2
 8008544:	f7fd be2e 	b.w	80061a4 <_malloc_r>
 8008548:	b92a      	cbnz	r2, 8008556 <_realloc_r+0x24>
 800854a:	f7fd fdb7 	bl	80060bc <_free_r>
 800854e:	4625      	mov	r5, r4
 8008550:	4628      	mov	r0, r5
 8008552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008556:	f000 f842 	bl	80085de <_malloc_usable_size_r>
 800855a:	4284      	cmp	r4, r0
 800855c:	4607      	mov	r7, r0
 800855e:	d802      	bhi.n	8008566 <_realloc_r+0x34>
 8008560:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008564:	d812      	bhi.n	800858c <_realloc_r+0x5a>
 8008566:	4621      	mov	r1, r4
 8008568:	4640      	mov	r0, r8
 800856a:	f7fd fe1b 	bl	80061a4 <_malloc_r>
 800856e:	4605      	mov	r5, r0
 8008570:	2800      	cmp	r0, #0
 8008572:	d0ed      	beq.n	8008550 <_realloc_r+0x1e>
 8008574:	42bc      	cmp	r4, r7
 8008576:	4622      	mov	r2, r4
 8008578:	4631      	mov	r1, r6
 800857a:	bf28      	it	cs
 800857c:	463a      	movcs	r2, r7
 800857e:	f7ff fc23 	bl	8007dc8 <memcpy>
 8008582:	4631      	mov	r1, r6
 8008584:	4640      	mov	r0, r8
 8008586:	f7fd fd99 	bl	80060bc <_free_r>
 800858a:	e7e1      	b.n	8008550 <_realloc_r+0x1e>
 800858c:	4635      	mov	r5, r6
 800858e:	e7df      	b.n	8008550 <_realloc_r+0x1e>

08008590 <__ascii_wctomb>:
 8008590:	b149      	cbz	r1, 80085a6 <__ascii_wctomb+0x16>
 8008592:	2aff      	cmp	r2, #255	; 0xff
 8008594:	bf85      	ittet	hi
 8008596:	238a      	movhi	r3, #138	; 0x8a
 8008598:	6003      	strhi	r3, [r0, #0]
 800859a:	700a      	strbls	r2, [r1, #0]
 800859c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80085a0:	bf98      	it	ls
 80085a2:	2001      	movls	r0, #1
 80085a4:	4770      	bx	lr
 80085a6:	4608      	mov	r0, r1
 80085a8:	4770      	bx	lr
	...

080085ac <fiprintf>:
 80085ac:	b40e      	push	{r1, r2, r3}
 80085ae:	b503      	push	{r0, r1, lr}
 80085b0:	4601      	mov	r1, r0
 80085b2:	ab03      	add	r3, sp, #12
 80085b4:	4805      	ldr	r0, [pc, #20]	; (80085cc <fiprintf+0x20>)
 80085b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	f000 f83f 	bl	8008640 <_vfiprintf_r>
 80085c2:	b002      	add	sp, #8
 80085c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c8:	b003      	add	sp, #12
 80085ca:	4770      	bx	lr
 80085cc:	20000068 	.word	0x20000068

080085d0 <abort>:
 80085d0:	b508      	push	{r3, lr}
 80085d2:	2006      	movs	r0, #6
 80085d4:	f000 fa0c 	bl	80089f0 <raise>
 80085d8:	2001      	movs	r0, #1
 80085da:	f7f9 f9fb 	bl	80019d4 <_exit>

080085de <_malloc_usable_size_r>:
 80085de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e2:	1f18      	subs	r0, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfbc      	itt	lt
 80085e8:	580b      	ldrlt	r3, [r1, r0]
 80085ea:	18c0      	addlt	r0, r0, r3
 80085ec:	4770      	bx	lr

080085ee <__sfputc_r>:
 80085ee:	6893      	ldr	r3, [r2, #8]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	b410      	push	{r4}
 80085f6:	6093      	str	r3, [r2, #8]
 80085f8:	da08      	bge.n	800860c <__sfputc_r+0x1e>
 80085fa:	6994      	ldr	r4, [r2, #24]
 80085fc:	42a3      	cmp	r3, r4
 80085fe:	db01      	blt.n	8008604 <__sfputc_r+0x16>
 8008600:	290a      	cmp	r1, #10
 8008602:	d103      	bne.n	800860c <__sfputc_r+0x1e>
 8008604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008608:	f000 b934 	b.w	8008874 <__swbuf_r>
 800860c:	6813      	ldr	r3, [r2, #0]
 800860e:	1c58      	adds	r0, r3, #1
 8008610:	6010      	str	r0, [r2, #0]
 8008612:	7019      	strb	r1, [r3, #0]
 8008614:	4608      	mov	r0, r1
 8008616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800861a:	4770      	bx	lr

0800861c <__sfputs_r>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	4606      	mov	r6, r0
 8008620:	460f      	mov	r7, r1
 8008622:	4614      	mov	r4, r2
 8008624:	18d5      	adds	r5, r2, r3
 8008626:	42ac      	cmp	r4, r5
 8008628:	d101      	bne.n	800862e <__sfputs_r+0x12>
 800862a:	2000      	movs	r0, #0
 800862c:	e007      	b.n	800863e <__sfputs_r+0x22>
 800862e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008632:	463a      	mov	r2, r7
 8008634:	4630      	mov	r0, r6
 8008636:	f7ff ffda 	bl	80085ee <__sfputc_r>
 800863a:	1c43      	adds	r3, r0, #1
 800863c:	d1f3      	bne.n	8008626 <__sfputs_r+0xa>
 800863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008640 <_vfiprintf_r>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	460d      	mov	r5, r1
 8008646:	b09d      	sub	sp, #116	; 0x74
 8008648:	4614      	mov	r4, r2
 800864a:	4698      	mov	r8, r3
 800864c:	4606      	mov	r6, r0
 800864e:	b118      	cbz	r0, 8008658 <_vfiprintf_r+0x18>
 8008650:	6a03      	ldr	r3, [r0, #32]
 8008652:	b90b      	cbnz	r3, 8008658 <_vfiprintf_r+0x18>
 8008654:	f7fc fd78 	bl	8005148 <__sinit>
 8008658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800865a:	07d9      	lsls	r1, r3, #31
 800865c:	d405      	bmi.n	800866a <_vfiprintf_r+0x2a>
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	059a      	lsls	r2, r3, #22
 8008662:	d402      	bmi.n	800866a <_vfiprintf_r+0x2a>
 8008664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008666:	f7fc fea6 	bl	80053b6 <__retarget_lock_acquire_recursive>
 800866a:	89ab      	ldrh	r3, [r5, #12]
 800866c:	071b      	lsls	r3, r3, #28
 800866e:	d501      	bpl.n	8008674 <_vfiprintf_r+0x34>
 8008670:	692b      	ldr	r3, [r5, #16]
 8008672:	b99b      	cbnz	r3, 800869c <_vfiprintf_r+0x5c>
 8008674:	4629      	mov	r1, r5
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f93a 	bl	80088f0 <__swsetup_r>
 800867c:	b170      	cbz	r0, 800869c <_vfiprintf_r+0x5c>
 800867e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008680:	07dc      	lsls	r4, r3, #31
 8008682:	d504      	bpl.n	800868e <_vfiprintf_r+0x4e>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008688:	b01d      	add	sp, #116	; 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	89ab      	ldrh	r3, [r5, #12]
 8008690:	0598      	lsls	r0, r3, #22
 8008692:	d4f7      	bmi.n	8008684 <_vfiprintf_r+0x44>
 8008694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008696:	f7fc fe8f 	bl	80053b8 <__retarget_lock_release_recursive>
 800869a:	e7f3      	b.n	8008684 <_vfiprintf_r+0x44>
 800869c:	2300      	movs	r3, #0
 800869e:	9309      	str	r3, [sp, #36]	; 0x24
 80086a0:	2320      	movs	r3, #32
 80086a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086aa:	2330      	movs	r3, #48	; 0x30
 80086ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008860 <_vfiprintf_r+0x220>
 80086b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b4:	f04f 0901 	mov.w	r9, #1
 80086b8:	4623      	mov	r3, r4
 80086ba:	469a      	mov	sl, r3
 80086bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c0:	b10a      	cbz	r2, 80086c6 <_vfiprintf_r+0x86>
 80086c2:	2a25      	cmp	r2, #37	; 0x25
 80086c4:	d1f9      	bne.n	80086ba <_vfiprintf_r+0x7a>
 80086c6:	ebba 0b04 	subs.w	fp, sl, r4
 80086ca:	d00b      	beq.n	80086e4 <_vfiprintf_r+0xa4>
 80086cc:	465b      	mov	r3, fp
 80086ce:	4622      	mov	r2, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ffa2 	bl	800861c <__sfputs_r>
 80086d8:	3001      	adds	r0, #1
 80086da:	f000 80a9 	beq.w	8008830 <_vfiprintf_r+0x1f0>
 80086de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e0:	445a      	add	r2, fp
 80086e2:	9209      	str	r2, [sp, #36]	; 0x24
 80086e4:	f89a 3000 	ldrb.w	r3, [sl]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 80a1 	beq.w	8008830 <_vfiprintf_r+0x1f0>
 80086ee:	2300      	movs	r3, #0
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f8:	f10a 0a01 	add.w	sl, sl, #1
 80086fc:	9304      	str	r3, [sp, #16]
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008704:	931a      	str	r3, [sp, #104]	; 0x68
 8008706:	4654      	mov	r4, sl
 8008708:	2205      	movs	r2, #5
 800870a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870e:	4854      	ldr	r0, [pc, #336]	; (8008860 <_vfiprintf_r+0x220>)
 8008710:	f7f7 fd5e 	bl	80001d0 <memchr>
 8008714:	9a04      	ldr	r2, [sp, #16]
 8008716:	b9d8      	cbnz	r0, 8008750 <_vfiprintf_r+0x110>
 8008718:	06d1      	lsls	r1, r2, #27
 800871a:	bf44      	itt	mi
 800871c:	2320      	movmi	r3, #32
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008722:	0713      	lsls	r3, r2, #28
 8008724:	bf44      	itt	mi
 8008726:	232b      	movmi	r3, #43	; 0x2b
 8008728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800872c:	f89a 3000 	ldrb.w	r3, [sl]
 8008730:	2b2a      	cmp	r3, #42	; 0x2a
 8008732:	d015      	beq.n	8008760 <_vfiprintf_r+0x120>
 8008734:	9a07      	ldr	r2, [sp, #28]
 8008736:	4654      	mov	r4, sl
 8008738:	2000      	movs	r0, #0
 800873a:	f04f 0c0a 	mov.w	ip, #10
 800873e:	4621      	mov	r1, r4
 8008740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008744:	3b30      	subs	r3, #48	; 0x30
 8008746:	2b09      	cmp	r3, #9
 8008748:	d94d      	bls.n	80087e6 <_vfiprintf_r+0x1a6>
 800874a:	b1b0      	cbz	r0, 800877a <_vfiprintf_r+0x13a>
 800874c:	9207      	str	r2, [sp, #28]
 800874e:	e014      	b.n	800877a <_vfiprintf_r+0x13a>
 8008750:	eba0 0308 	sub.w	r3, r0, r8
 8008754:	fa09 f303 	lsl.w	r3, r9, r3
 8008758:	4313      	orrs	r3, r2
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	46a2      	mov	sl, r4
 800875e:	e7d2      	b.n	8008706 <_vfiprintf_r+0xc6>
 8008760:	9b03      	ldr	r3, [sp, #12]
 8008762:	1d19      	adds	r1, r3, #4
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	bfbb      	ittet	lt
 800876c:	425b      	neglt	r3, r3
 800876e:	f042 0202 	orrlt.w	r2, r2, #2
 8008772:	9307      	strge	r3, [sp, #28]
 8008774:	9307      	strlt	r3, [sp, #28]
 8008776:	bfb8      	it	lt
 8008778:	9204      	strlt	r2, [sp, #16]
 800877a:	7823      	ldrb	r3, [r4, #0]
 800877c:	2b2e      	cmp	r3, #46	; 0x2e
 800877e:	d10c      	bne.n	800879a <_vfiprintf_r+0x15a>
 8008780:	7863      	ldrb	r3, [r4, #1]
 8008782:	2b2a      	cmp	r3, #42	; 0x2a
 8008784:	d134      	bne.n	80087f0 <_vfiprintf_r+0x1b0>
 8008786:	9b03      	ldr	r3, [sp, #12]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	9203      	str	r2, [sp, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	bfb8      	it	lt
 8008792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008796:	3402      	adds	r4, #2
 8008798:	9305      	str	r3, [sp, #20]
 800879a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008870 <_vfiprintf_r+0x230>
 800879e:	7821      	ldrb	r1, [r4, #0]
 80087a0:	2203      	movs	r2, #3
 80087a2:	4650      	mov	r0, sl
 80087a4:	f7f7 fd14 	bl	80001d0 <memchr>
 80087a8:	b138      	cbz	r0, 80087ba <_vfiprintf_r+0x17a>
 80087aa:	9b04      	ldr	r3, [sp, #16]
 80087ac:	eba0 000a 	sub.w	r0, r0, sl
 80087b0:	2240      	movs	r2, #64	; 0x40
 80087b2:	4082      	lsls	r2, r0
 80087b4:	4313      	orrs	r3, r2
 80087b6:	3401      	adds	r4, #1
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087be:	4829      	ldr	r0, [pc, #164]	; (8008864 <_vfiprintf_r+0x224>)
 80087c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087c4:	2206      	movs	r2, #6
 80087c6:	f7f7 fd03 	bl	80001d0 <memchr>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d03f      	beq.n	800884e <_vfiprintf_r+0x20e>
 80087ce:	4b26      	ldr	r3, [pc, #152]	; (8008868 <_vfiprintf_r+0x228>)
 80087d0:	bb1b      	cbnz	r3, 800881a <_vfiprintf_r+0x1da>
 80087d2:	9b03      	ldr	r3, [sp, #12]
 80087d4:	3307      	adds	r3, #7
 80087d6:	f023 0307 	bic.w	r3, r3, #7
 80087da:	3308      	adds	r3, #8
 80087dc:	9303      	str	r3, [sp, #12]
 80087de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e0:	443b      	add	r3, r7
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	e768      	b.n	80086b8 <_vfiprintf_r+0x78>
 80087e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087ea:	460c      	mov	r4, r1
 80087ec:	2001      	movs	r0, #1
 80087ee:	e7a6      	b.n	800873e <_vfiprintf_r+0xfe>
 80087f0:	2300      	movs	r3, #0
 80087f2:	3401      	adds	r4, #1
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	4619      	mov	r1, r3
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008802:	3a30      	subs	r2, #48	; 0x30
 8008804:	2a09      	cmp	r2, #9
 8008806:	d903      	bls.n	8008810 <_vfiprintf_r+0x1d0>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d0c6      	beq.n	800879a <_vfiprintf_r+0x15a>
 800880c:	9105      	str	r1, [sp, #20]
 800880e:	e7c4      	b.n	800879a <_vfiprintf_r+0x15a>
 8008810:	fb0c 2101 	mla	r1, ip, r1, r2
 8008814:	4604      	mov	r4, r0
 8008816:	2301      	movs	r3, #1
 8008818:	e7f0      	b.n	80087fc <_vfiprintf_r+0x1bc>
 800881a:	ab03      	add	r3, sp, #12
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462a      	mov	r2, r5
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <_vfiprintf_r+0x22c>)
 8008822:	a904      	add	r1, sp, #16
 8008824:	4630      	mov	r0, r6
 8008826:	f7fb fe2d 	bl	8004484 <_printf_float>
 800882a:	4607      	mov	r7, r0
 800882c:	1c78      	adds	r0, r7, #1
 800882e:	d1d6      	bne.n	80087de <_vfiprintf_r+0x19e>
 8008830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008832:	07d9      	lsls	r1, r3, #31
 8008834:	d405      	bmi.n	8008842 <_vfiprintf_r+0x202>
 8008836:	89ab      	ldrh	r3, [r5, #12]
 8008838:	059a      	lsls	r2, r3, #22
 800883a:	d402      	bmi.n	8008842 <_vfiprintf_r+0x202>
 800883c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800883e:	f7fc fdbb 	bl	80053b8 <__retarget_lock_release_recursive>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	065b      	lsls	r3, r3, #25
 8008846:	f53f af1d 	bmi.w	8008684 <_vfiprintf_r+0x44>
 800884a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800884c:	e71c      	b.n	8008688 <_vfiprintf_r+0x48>
 800884e:	ab03      	add	r3, sp, #12
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	462a      	mov	r2, r5
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <_vfiprintf_r+0x22c>)
 8008856:	a904      	add	r1, sp, #16
 8008858:	4630      	mov	r0, r6
 800885a:	f7fc f8b7 	bl	80049cc <_printf_i>
 800885e:	e7e4      	b.n	800882a <_vfiprintf_r+0x1ea>
 8008860:	08008f09 	.word	0x08008f09
 8008864:	08008f13 	.word	0x08008f13
 8008868:	08004485 	.word	0x08004485
 800886c:	0800861d 	.word	0x0800861d
 8008870:	08008f0f 	.word	0x08008f0f

08008874 <__swbuf_r>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	460e      	mov	r6, r1
 8008878:	4614      	mov	r4, r2
 800887a:	4605      	mov	r5, r0
 800887c:	b118      	cbz	r0, 8008886 <__swbuf_r+0x12>
 800887e:	6a03      	ldr	r3, [r0, #32]
 8008880:	b90b      	cbnz	r3, 8008886 <__swbuf_r+0x12>
 8008882:	f7fc fc61 	bl	8005148 <__sinit>
 8008886:	69a3      	ldr	r3, [r4, #24]
 8008888:	60a3      	str	r3, [r4, #8]
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	071a      	lsls	r2, r3, #28
 800888e:	d525      	bpl.n	80088dc <__swbuf_r+0x68>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	b31b      	cbz	r3, 80088dc <__swbuf_r+0x68>
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	6922      	ldr	r2, [r4, #16]
 8008898:	1a98      	subs	r0, r3, r2
 800889a:	6963      	ldr	r3, [r4, #20]
 800889c:	b2f6      	uxtb	r6, r6
 800889e:	4283      	cmp	r3, r0
 80088a0:	4637      	mov	r7, r6
 80088a2:	dc04      	bgt.n	80088ae <__swbuf_r+0x3a>
 80088a4:	4621      	mov	r1, r4
 80088a6:	4628      	mov	r0, r5
 80088a8:	f7ff fa2a 	bl	8007d00 <_fflush_r>
 80088ac:	b9e0      	cbnz	r0, 80088e8 <__swbuf_r+0x74>
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	60a3      	str	r3, [r4, #8]
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	6022      	str	r2, [r4, #0]
 80088ba:	701e      	strb	r6, [r3, #0]
 80088bc:	6962      	ldr	r2, [r4, #20]
 80088be:	1c43      	adds	r3, r0, #1
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d004      	beq.n	80088ce <__swbuf_r+0x5a>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	07db      	lsls	r3, r3, #31
 80088c8:	d506      	bpl.n	80088d8 <__swbuf_r+0x64>
 80088ca:	2e0a      	cmp	r6, #10
 80088cc:	d104      	bne.n	80088d8 <__swbuf_r+0x64>
 80088ce:	4621      	mov	r1, r4
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff fa15 	bl	8007d00 <_fflush_r>
 80088d6:	b938      	cbnz	r0, 80088e8 <__swbuf_r+0x74>
 80088d8:	4638      	mov	r0, r7
 80088da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088dc:	4621      	mov	r1, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f806 	bl	80088f0 <__swsetup_r>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	d0d5      	beq.n	8008894 <__swbuf_r+0x20>
 80088e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088ec:	e7f4      	b.n	80088d8 <__swbuf_r+0x64>
	...

080088f0 <__swsetup_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4b2a      	ldr	r3, [pc, #168]	; (800899c <__swsetup_r+0xac>)
 80088f4:	4605      	mov	r5, r0
 80088f6:	6818      	ldr	r0, [r3, #0]
 80088f8:	460c      	mov	r4, r1
 80088fa:	b118      	cbz	r0, 8008904 <__swsetup_r+0x14>
 80088fc:	6a03      	ldr	r3, [r0, #32]
 80088fe:	b90b      	cbnz	r3, 8008904 <__swsetup_r+0x14>
 8008900:	f7fc fc22 	bl	8005148 <__sinit>
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800890a:	0718      	lsls	r0, r3, #28
 800890c:	d422      	bmi.n	8008954 <__swsetup_r+0x64>
 800890e:	06d9      	lsls	r1, r3, #27
 8008910:	d407      	bmi.n	8008922 <__swsetup_r+0x32>
 8008912:	2309      	movs	r3, #9
 8008914:	602b      	str	r3, [r5, #0]
 8008916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008920:	e034      	b.n	800898c <__swsetup_r+0x9c>
 8008922:	0758      	lsls	r0, r3, #29
 8008924:	d512      	bpl.n	800894c <__swsetup_r+0x5c>
 8008926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008928:	b141      	cbz	r1, 800893c <__swsetup_r+0x4c>
 800892a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892e:	4299      	cmp	r1, r3
 8008930:	d002      	beq.n	8008938 <__swsetup_r+0x48>
 8008932:	4628      	mov	r0, r5
 8008934:	f7fd fbc2 	bl	80060bc <_free_r>
 8008938:	2300      	movs	r3, #0
 800893a:	6363      	str	r3, [r4, #52]	; 0x34
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008942:	81a3      	strh	r3, [r4, #12]
 8008944:	2300      	movs	r3, #0
 8008946:	6063      	str	r3, [r4, #4]
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f043 0308 	orr.w	r3, r3, #8
 8008952:	81a3      	strh	r3, [r4, #12]
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	b94b      	cbnz	r3, 800896c <__swsetup_r+0x7c>
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800895e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008962:	d003      	beq.n	800896c <__swsetup_r+0x7c>
 8008964:	4621      	mov	r1, r4
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f884 	bl	8008a74 <__smakebuf_r>
 800896c:	89a0      	ldrh	r0, [r4, #12]
 800896e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008972:	f010 0301 	ands.w	r3, r0, #1
 8008976:	d00a      	beq.n	800898e <__swsetup_r+0x9e>
 8008978:	2300      	movs	r3, #0
 800897a:	60a3      	str	r3, [r4, #8]
 800897c:	6963      	ldr	r3, [r4, #20]
 800897e:	425b      	negs	r3, r3
 8008980:	61a3      	str	r3, [r4, #24]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	b943      	cbnz	r3, 8008998 <__swsetup_r+0xa8>
 8008986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800898a:	d1c4      	bne.n	8008916 <__swsetup_r+0x26>
 800898c:	bd38      	pop	{r3, r4, r5, pc}
 800898e:	0781      	lsls	r1, r0, #30
 8008990:	bf58      	it	pl
 8008992:	6963      	ldrpl	r3, [r4, #20]
 8008994:	60a3      	str	r3, [r4, #8]
 8008996:	e7f4      	b.n	8008982 <__swsetup_r+0x92>
 8008998:	2000      	movs	r0, #0
 800899a:	e7f7      	b.n	800898c <__swsetup_r+0x9c>
 800899c:	20000068 	.word	0x20000068

080089a0 <_raise_r>:
 80089a0:	291f      	cmp	r1, #31
 80089a2:	b538      	push	{r3, r4, r5, lr}
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	d904      	bls.n	80089b4 <_raise_r+0x14>
 80089aa:	2316      	movs	r3, #22
 80089ac:	6003      	str	r3, [r0, #0]
 80089ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089b6:	b112      	cbz	r2, 80089be <_raise_r+0x1e>
 80089b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089bc:	b94b      	cbnz	r3, 80089d2 <_raise_r+0x32>
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f830 	bl	8008a24 <_getpid_r>
 80089c4:	462a      	mov	r2, r5
 80089c6:	4601      	mov	r1, r0
 80089c8:	4620      	mov	r0, r4
 80089ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ce:	f000 b817 	b.w	8008a00 <_kill_r>
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d00a      	beq.n	80089ec <_raise_r+0x4c>
 80089d6:	1c59      	adds	r1, r3, #1
 80089d8:	d103      	bne.n	80089e2 <_raise_r+0x42>
 80089da:	2316      	movs	r3, #22
 80089dc:	6003      	str	r3, [r0, #0]
 80089de:	2001      	movs	r0, #1
 80089e0:	e7e7      	b.n	80089b2 <_raise_r+0x12>
 80089e2:	2400      	movs	r4, #0
 80089e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e8:	4628      	mov	r0, r5
 80089ea:	4798      	blx	r3
 80089ec:	2000      	movs	r0, #0
 80089ee:	e7e0      	b.n	80089b2 <_raise_r+0x12>

080089f0 <raise>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <raise+0xc>)
 80089f2:	4601      	mov	r1, r0
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f7ff bfd3 	b.w	80089a0 <_raise_r>
 80089fa:	bf00      	nop
 80089fc:	20000068 	.word	0x20000068

08008a00 <_kill_r>:
 8008a00:	b538      	push	{r3, r4, r5, lr}
 8008a02:	4d07      	ldr	r5, [pc, #28]	; (8008a20 <_kill_r+0x20>)
 8008a04:	2300      	movs	r3, #0
 8008a06:	4604      	mov	r4, r0
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	f7f8 ffd1 	bl	80019b4 <_kill>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d102      	bne.n	8008a1c <_kill_r+0x1c>
 8008a16:	682b      	ldr	r3, [r5, #0]
 8008a18:	b103      	cbz	r3, 8008a1c <_kill_r+0x1c>
 8008a1a:	6023      	str	r3, [r4, #0]
 8008a1c:	bd38      	pop	{r3, r4, r5, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000438 	.word	0x20000438

08008a24 <_getpid_r>:
 8008a24:	f7f8 bfbe 	b.w	80019a4 <_getpid>

08008a28 <__swhatbuf_r>:
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a30:	2900      	cmp	r1, #0
 8008a32:	b096      	sub	sp, #88	; 0x58
 8008a34:	4615      	mov	r5, r2
 8008a36:	461e      	mov	r6, r3
 8008a38:	da0d      	bge.n	8008a56 <__swhatbuf_r+0x2e>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a40:	f04f 0100 	mov.w	r1, #0
 8008a44:	bf0c      	ite	eq
 8008a46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a4a:	2340      	movne	r3, #64	; 0x40
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	6031      	str	r1, [r6, #0]
 8008a50:	602b      	str	r3, [r5, #0]
 8008a52:	b016      	add	sp, #88	; 0x58
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	466a      	mov	r2, sp
 8008a58:	f000 f848 	bl	8008aec <_fstat_r>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	dbec      	blt.n	8008a3a <__swhatbuf_r+0x12>
 8008a60:	9901      	ldr	r1, [sp, #4]
 8008a62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a6a:	4259      	negs	r1, r3
 8008a6c:	4159      	adcs	r1, r3
 8008a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a72:	e7eb      	b.n	8008a4c <__swhatbuf_r+0x24>

08008a74 <__smakebuf_r>:
 8008a74:	898b      	ldrh	r3, [r1, #12]
 8008a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a78:	079d      	lsls	r5, r3, #30
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	d507      	bpl.n	8008a90 <__smakebuf_r+0x1c>
 8008a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	6163      	str	r3, [r4, #20]
 8008a8c:	b002      	add	sp, #8
 8008a8e:	bd70      	pop	{r4, r5, r6, pc}
 8008a90:	ab01      	add	r3, sp, #4
 8008a92:	466a      	mov	r2, sp
 8008a94:	f7ff ffc8 	bl	8008a28 <__swhatbuf_r>
 8008a98:	9900      	ldr	r1, [sp, #0]
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f7fd fb81 	bl	80061a4 <_malloc_r>
 8008aa2:	b948      	cbnz	r0, 8008ab8 <__smakebuf_r+0x44>
 8008aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aa8:	059a      	lsls	r2, r3, #22
 8008aaa:	d4ef      	bmi.n	8008a8c <__smakebuf_r+0x18>
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	f043 0302 	orr.w	r3, r3, #2
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	e7e3      	b.n	8008a80 <__smakebuf_r+0xc>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	6020      	str	r0, [r4, #0]
 8008abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	9b00      	ldr	r3, [sp, #0]
 8008ac4:	6163      	str	r3, [r4, #20]
 8008ac6:	9b01      	ldr	r3, [sp, #4]
 8008ac8:	6120      	str	r0, [r4, #16]
 8008aca:	b15b      	cbz	r3, 8008ae4 <__smakebuf_r+0x70>
 8008acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f000 f81d 	bl	8008b10 <_isatty_r>
 8008ad6:	b128      	cbz	r0, 8008ae4 <__smakebuf_r+0x70>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	f043 0301 	orr.w	r3, r3, #1
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	431d      	orrs	r5, r3
 8008ae8:	81a5      	strh	r5, [r4, #12]
 8008aea:	e7cf      	b.n	8008a8c <__smakebuf_r+0x18>

08008aec <_fstat_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d07      	ldr	r5, [pc, #28]	; (8008b0c <_fstat_r+0x20>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	4604      	mov	r4, r0
 8008af4:	4608      	mov	r0, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	602b      	str	r3, [r5, #0]
 8008afa:	f7f8 ffba 	bl	8001a72 <_fstat>
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	d102      	bne.n	8008b08 <_fstat_r+0x1c>
 8008b02:	682b      	ldr	r3, [r5, #0]
 8008b04:	b103      	cbz	r3, 8008b08 <_fstat_r+0x1c>
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	bd38      	pop	{r3, r4, r5, pc}
 8008b0a:	bf00      	nop
 8008b0c:	20000438 	.word	0x20000438

08008b10 <_isatty_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4d06      	ldr	r5, [pc, #24]	; (8008b2c <_isatty_r+0x1c>)
 8008b14:	2300      	movs	r3, #0
 8008b16:	4604      	mov	r4, r0
 8008b18:	4608      	mov	r0, r1
 8008b1a:	602b      	str	r3, [r5, #0]
 8008b1c:	f7f8 ffb9 	bl	8001a92 <_isatty>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_isatty_r+0x1a>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_isatty_r+0x1a>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000438 	.word	0x20000438

08008b30 <_init>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr

08008b3c <_fini>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr
